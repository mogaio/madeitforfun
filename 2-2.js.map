{"version":3,"sources":["webpack:///./node_modules/jsfeat/build/jsfeat.js"],"names":["jsfeat","REVISION","global","_data_type_size","Int32Array","get_data_type","type","get_channel","get_data_type_size","data_t","size_in_bytes","buffer","this","size","ArrayBuffer","length","u8","Uint8Array","i32","f32","Float32Array","f64","Float64Array","matrix_t","c","r","data_type","data_buffer","channel","cols","rows","allocate","data","prototype","copy_to","other","od","td","i","n","resize","ch","pyramid_t","levels","Array","pyrdown","imgproc","start_w","start_h","build","input","skip_first_level","a","b","j","keypoint_t","x","y","score","level","angle","U8_t","S32_t","F32_t","S64_t","F64_t","C1_t","C2_t","C3_t","C4_t","U8C1_t","U8C3_t","U8C4_t","F32C1_t","F32C2_t","S32C1_t","S32C2_t","EPSILON","FLT_MIN","COLOR_RGBA2GRAY","COLOR_RGB2GRAY","COLOR_BGRA2GRAY","COLOR_BGR2GRAY","BOX_BLUR_NOSCALE","SVD_U_T","SVD_V_T","_pool_head","_pool_tail","_pool_node_t","cache","next","capacity","data_size","node","get_buffer","put_buffer","qsort_stack","math","get_gaussian_kernel","sigma","kernel","t","sigma_x","scale_2x","sum","kern_node","_kernel","Math","exp","perspective_4point_transform","model","src_x0","src_y0","dst_x0","dst_y0","src_x1","src_y1","dst_x1","dst_y1","src_x2","src_y2","dst_x2","dst_y2","src_x3","src_y3","dst_x3","dst_y3","t1","t2","t4","t5","t6","t7","t8","t9","t10","t11","t14","t15","t16","t18","t20","t21","t24","t25","t26","t27","t28","t30","t32","t35","t41","t42","t43","t46","t48","t51","t55","Hr0","Hr1","Hr2","Hr3","Hr4","Hr5","Hr6","Hr7","Hl0","Hl1","Hl2","Hl3","Hl4","Hl5","Hl6","Hl7","t12","t23","t31","t44","t47","t49","t50","mat","qsort","array","low","high","cmp","ta","tb","tc","sp","left","right","m","ptr","ptr2","d","left0","left1","right0","right1","pivot","swap_cnt","stack","min","median","w","middle","ll","hh","matmath","identity","M","value","src","cols_1","len","k","transpose","At","A","nrows","ncols","Ai","Ati","pAt","ad","atd","multiply","C","B","Ap","pA","pB","p_B","Cp","mcols","bd","cd","multiply_ABt","mrows","multiply_AtB","multiply_AAt","pCdiag","p_A","pC","pCt","multiply_AtA","p_C","p_CC","identity_3x3","dt","invert_3x3","from","to","invA","t13","t17","multiply_3x3","Cd","Ad","Bd","m1_0","m1_1","m1_2","m1_3","m1_4","m1_5","m1_6","m1_7","m1_8","m2_0","m2_1","m2_2","m2_3","m2_4","m2_5","m2_6","m2_7","m2_8","mat3x3_determinant","md","determinant_3x3","M11","M12","M13","M21","M22","M23","M31","M32","M33","swap","hypot","linalg","i0","i1","abs","sqrt","lu_solve","alpha","s","p","astep","cholesky_solve","val","inv_diag","col","row","col2","cs","rs","svd_decompose","W","U","V","options","at","_m","_n","a_buff","w_buff","v_buff","a_mt","w_mt","v_mt","_W","Vt","vstep","n1","eps","minval","iter","max_iter","max","Aj","Vi","Vj","changed","t0","sd","beta","gamma","delta","seed","val0","asum","W_buff","JacobiSVDImpl","svd_solve","X","tol","pu","pv","xsum","u_buff","u_mt","ud","wd","vd","svd_invert","pa","id","eigenVV","vects","vals","l","idx","_in","_in2","iters","mv","a0","b0","indR_buff","indC_buff","indR","indC","JacobiImpl","sqr","T0","T1","AtA","AtB","affine2d","mLtL","Evec","get_subset","find_inliers","motion_model","run","count","pt0","pt1","t0d","t1d","px","py","s0","s1","cx0","cy0","d0","cx1","cy1","d1","dx","dy","SQRT2","iso_normalize_points","b_buff","b_mt","error","err","check_subset","homography2d","LtL","evd","Y","smx","smy","cmx","cmy","sMx","sMy","cMx","cMy","ww","negative","fp0","fp1","fp2","fp3","tp0","tp1","tp2","tp3","A11","A12","A21","A22","A31","A32","B11","B12","B21","B22","B31","B32","detA","detB","ransac_params_t","thresh","prob","update_iters","_eps","max_iters","num","log","denom","pow","round","motion_estimator","need_cnt","max_cnt","from_sub","to_sub","indices","ssiter","idx_i","ok","floor","random","mask","numinliers","f","ransac","params","model_points","niters","result","subset0","subset1","mc","mr","m_buff","ms_buff","err_buff","curr_mask","inliers_max","lmeds","min_median","grayscale","h","dst","code","ir","jr","coeff_r","coeff_b","cn","cn2","cn3","dst_u8","resample","nw","nh","xofs_count","src_d","dst_d","scale_x","scale_y","inv_scale_256","sx","sy","sx1","sx2","fsx1","fsx2","dxn","beta1","buf_node","sum_node","xofs_node","buf","xofs","_resample_u8","scale","_resample","box_blur_gray","radius","h2","w2","end","windowSize","radiusPlusOne","radiusPlus2","tmp_buff","dstIndex","srcIndex","nextPixelIndex","previousPixelIndex","data_i32","data_u8","hold","gaussian_blur","kernel_size","half_kernel","is_u8","filter","buf_sz","filt_node","dp","sum1","sum2","sum3","f0","fk","w3","w4","_convol_u8","_convol","_w2","_h2","sptr","sline","dptr","dline","scharr_derivatives","e","trow0","trow1","dstep","x1","srow0","srow1","srow2","drow","img","gxgy","buf0_node","buf1_node","sobel_derivatives","compute_integral_image","dst_sum","dst_sqsum","dst_tilted","w0","h0","w1","s2","pup","v","equalize_histogram","hist0","norm","prev","hist0_node","canny","low_thresh","high_thresh","grad","_grad","suppress","tg22x","tg67x","dxdy_node","map_node","stack_node","map","dxdy","dxdy_m","row0","row1","row2","map_w","map_i","stack_i","warp_perspective","transform","fill_value","src_width","src_height","dst_width","dst_height","off","ixs","iys","xs","ys","xs0","ys0","ws","sc","p0","p1","m00","m01","m02","m10","m11","m12","m20","m21","m22","warp_affine","skindetector","g","width","height","offsets16","threshold_tab","pixel_off","score_diff","_cmp_score_16","_threshold","fast_corners","pixel","threshold","set_threshold","detect","corners","border","pt","vt","m3","cpbuf_node","cpbuf","ey","ex","_count","corners_cnt","score_func","thresh_tab","tab","ncorners","cornerpos","curr","pprev","jp1","jm1","step","pattern_size","offsets","_cmp_offsets","pixel0","pixel1","pixel2","pixel3","pixel4","pixel5","pixel6","pixel7","pixel8","pixel9","pixel10","pixel11","pixel12","pixel13","pixel14","pixel15","hessian_min_eigen_value","yape06","tr","Dxx","Dyy","Dxy","Dyx","Ixx","Iyy","Ixy","sqrt_delta","laplacian_threshold","min_eigen_value_threshold","points","srd_d","lap_buf","laplacian","lv","rowx","min_eigen_value","number_of_points","lap_thresh","eigen_thresh","yrow","compute_laplacian","is_local_maxima","perform_one_point","lev_table_t","yape","neighborhood","I","Scores","Im","Ip","dirs","opposite","dirs_nb","B0","B1","B2","state","dirs_count","R","precompute_directions","scores","level_tables","tau","init","pyramid_levels","Sb","Rm1","hw","ip","im","abs_score","bit_pattern_31_","H","patch_img","rectify_patch","orb","psize","cosine","cos","sine","sin","describe","descriptors","patch_d","patt","descr_d","descr_off","scharr_deriv","optical_flow_lk","track","prev_pyr","curr_pyr","prev_xy","curr_xy","win_size","status","min_eigen_threshold","half_win","win_area","win_area2","prev_imgs","next_imgs","img_prev","img_next","lw","lh","iwin_node","deriv_iwin_node","deriv_lev_node","deriv_m","iwin_buf","deriv_iwin","deriv_lev","dsrc","iptr","diptr","jptr","lev_sc","prev_x","prev_y","next_x","next_y","prev_delta_x","prev_delta_y","delta_x","delta_y","iprev_x","iprev_y","inext_x","inext_y","ptid","brd_r","brd_b","b1","b2","iw00","iw01","iw10","iw11","ival","ixval","iyval","D","max_level","W_BITS4","_group_func","haar","r1","r2","distance","edges_density","detect_single_scale","int_sum","int_sqsum","int_tilted","int_canny_sum","classifier","mean","variance","std","stages","stage","trees","tree","sn","tn","fn","stage_thresh","stage_sum","tree_sum","feature","features","fi_a","fi_b","fi_c","fw","fh","win_w","win_h","step_x","step_y","inv_area","found","ii_a","ii_b","ii_c","ii_d","edges_thresh","rects","complexClassifiers","simpleClassifiers","tilted","left_val","right_val","push","detect_multi_scale","scale_factor","scale_min","concat","group_rectangles","min_neighbors","element","root","parent","root2","rank","temp","node2","idx_seq","class_idx","node1","comps","neighbors","confidence","seq2","result_seq","flag","img_pyr","bbf","interval","scale_to","prepare_cascade","cascade","stage_classifier","orig_feature","f_cnt","_feature","build_pyramid","min_width","min_height","sw","sh","new_pyr","src0","src1","pyr_l","pyramid","feature_k","feature_o","scale_upto","q","q_cnt","pmin","nmax","i4","qw","qh","shortcut","seq","pyr","u8o","paddings","pz","nx","ny","nz","lib","module","exports","window"],"mappings":"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","file":"2-2.js","sourcesContent":["/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n */\r\n\r\n// namespace ?\r\nvar jsfeat = jsfeat || { REVISION: 'ALPHA' };\r\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    // CONSTANTS\r\n    var EPSILON = 0.0000001192092896;\r\n    var FLT_MIN = 1E-37;\r\n\r\n    // implementation from CCV project\r\n    // currently working only with u8,s32,f32\r\n    var U8_t = 0x0100,\r\n        S32_t = 0x0200,\r\n        F32_t = 0x0400,\r\n        S64_t = 0x0800,\r\n        F64_t = 0x1000;\r\n\r\n    var C1_t = 0x01,\r\n        C2_t = 0x02,\r\n        C3_t = 0x03,\r\n        C4_t = 0x04;\r\n\r\n    var _data_type_size = new Int32Array([ -1, 1, 4, -1, 4, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, 8 ]);\r\n\r\n    var get_data_type = (function () {\r\n        return function(type) {\r\n            return (type & 0xFF00);\r\n        }\r\n    })();\r\n\r\n    var get_channel = (function () {\r\n        return function(type) {\r\n            return (type & 0xFF);\r\n        }\r\n    })();\r\n\r\n    var get_data_type_size = (function () {\r\n        return function(type) {\r\n            return _data_type_size[(type & 0xFF00) >> 8];\r\n        }\r\n    })();\r\n\r\n    // color conversion\r\n    var COLOR_RGBA2GRAY = 0;\r\n    var COLOR_RGB2GRAY = 1;\r\n    var COLOR_BGRA2GRAY = 2;\r\n    var COLOR_BGR2GRAY = 3;\r\n\r\n    // box blur option\r\n    var BOX_BLUR_NOSCALE = 0x01;\r\n    // svd options\r\n    var SVD_U_T = 0x01;\r\n    var SVD_V_T = 0x02;\r\n\r\n    var data_t = (function () {\r\n        function data_t(size_in_bytes, buffer) {\r\n            // we need align size to multiple of 8\r\n            this.size = ((size_in_bytes + 7) | 0) & -8;\r\n            if (typeof buffer === \"undefined\") { \r\n                this.buffer = new ArrayBuffer(this.size);\r\n            } else {\r\n                this.buffer = buffer;\r\n                this.size = buffer.length;\r\n            }\r\n            this.u8 = new Uint8Array(this.buffer);\r\n            this.i32 = new Int32Array(this.buffer);\r\n            this.f32 = new Float32Array(this.buffer);\r\n            this.f64 = new Float64Array(this.buffer);\r\n        }\r\n        return data_t;\r\n    })();\r\n\r\n    var matrix_t = (function () {\r\n        // columns, rows, data_type\r\n        function matrix_t(c, r, data_type, data_buffer) {\r\n            this.type = get_data_type(data_type)|0;\r\n            this.channel = get_channel(data_type)|0;\r\n            this.cols = c|0;\r\n            this.rows = r|0;\r\n            if (typeof data_buffer === \"undefined\") { \r\n                this.allocate();\r\n            } else {\r\n                this.buffer = data_buffer;\r\n                // data user asked for\r\n                this.data = this.type&U8_t ? this.buffer.u8 : (this.type&S32_t ? this.buffer.i32 : (this.type&F32_t ? this.buffer.f32 : this.buffer.f64));\r\n            }\r\n        }\r\n        matrix_t.prototype.allocate = function() {\r\n            // clear references\r\n            delete this.data;\r\n            delete this.buffer;\r\n            //\r\n            this.buffer = new data_t((this.cols * get_data_type_size(this.type) * this.channel) * this.rows);\r\n            this.data = this.type&U8_t ? this.buffer.u8 : (this.type&S32_t ? this.buffer.i32 : (this.type&F32_t ? this.buffer.f32 : this.buffer.f64));\r\n        }\r\n        matrix_t.prototype.copy_to = function(other) {\r\n            var od = other.data, td = this.data;\r\n            var i = 0, n = (this.cols*this.rows*this.channel)|0;\r\n            for(; i < n-4; i+=4) {\r\n                od[i] = td[i];\r\n                od[i+1] = td[i+1];\r\n                od[i+2] = td[i+2];\r\n                od[i+3] = td[i+3];\r\n            }\r\n            for(; i < n; ++i) {\r\n                od[i] = td[i];\r\n            }\r\n        }\r\n        matrix_t.prototype.resize = function(c, r, ch) {\r\n            if (typeof ch === \"undefined\") { ch = this.channel; }\r\n            // relocate buffer only if new size doesnt fit\r\n            var new_size = (c * get_data_type_size(this.type) * ch) * r;\r\n            if(new_size > this.buffer.size) {\r\n                this.cols = c;\r\n                this.rows = r;\r\n                this.channel = ch;\r\n                this.allocate();\r\n            } else {\r\n                this.cols = c;\r\n                this.rows = r;\r\n                this.channel = ch;\r\n            }\r\n        }\r\n\r\n        return matrix_t;\r\n    })();\r\n\r\n    var pyramid_t = (function () {\r\n\r\n        function pyramid_t(levels) {\r\n            this.levels = levels|0;\r\n            this.data = new Array(levels);\r\n            this.pyrdown = jsfeat.imgproc.pyrdown;\r\n        }\r\n\r\n        pyramid_t.prototype.allocate = function(start_w, start_h, data_type) {\r\n            var i = this.levels;\r\n            while(--i >= 0) {\r\n                this.data[i] = new matrix_t(start_w >> i, start_h >> i, data_type);\r\n            }\r\n        }\r\n\r\n        pyramid_t.prototype.build = function(input, skip_first_level) {\r\n            if (typeof skip_first_level === \"undefined\") { skip_first_level = true; }\r\n            // just copy data to first level\r\n            var i = 2, a = input, b = this.data[0];\r\n            if(!skip_first_level) {\r\n                var j=input.cols*input.rows;\r\n                while(--j >= 0) {\r\n                    b.data[j] = input.data[j];\r\n                }\r\n            }\r\n            b = this.data[1];\r\n            this.pyrdown(a, b);\r\n            for(; i < this.levels; ++i) {\r\n                a = b;\r\n                b = this.data[i];\r\n                this.pyrdown(a, b);\r\n            }\r\n        }\r\n\r\n        return pyramid_t;\r\n    })();\r\n\r\n    var keypoint_t = (function () {\r\n        function keypoint_t(x,y,score,level,angle) {\r\n            if (typeof x === \"undefined\") { x=0; }\r\n            if (typeof y === \"undefined\") { y=0; }\r\n            if (typeof score === \"undefined\") { score=0; }\r\n            if (typeof level === \"undefined\") { level=0; }\r\n            if (typeof angle === \"undefined\") { angle=-1.0; }\r\n\r\n            this.x = x;\r\n            this.y = y;\r\n            this.score = score;\r\n            this.level = level;\r\n            this.angle = angle;\r\n        }\r\n        return keypoint_t;\r\n    })();\r\n\r\n\r\n    // data types\r\n    global.U8_t = U8_t;\r\n    global.S32_t = S32_t;\r\n    global.F32_t = F32_t;\r\n    global.S64_t = S64_t;\r\n    global.F64_t = F64_t;\r\n    // data channels\r\n    global.C1_t = C1_t;\r\n    global.C2_t = C2_t;\r\n    global.C3_t = C3_t;\r\n    global.C4_t = C4_t;\r\n\r\n    // popular formats\r\n    global.U8C1_t = U8_t | C1_t;\r\n    global.U8C3_t = U8_t | C3_t;\r\n    global.U8C4_t = U8_t | C4_t;\r\n\r\n    global.F32C1_t = F32_t | C1_t;\r\n    global.F32C2_t = F32_t | C2_t;\r\n    global.S32C1_t = S32_t | C1_t;\r\n    global.S32C2_t = S32_t | C2_t;\r\n\r\n    // constants\r\n    global.EPSILON = EPSILON;\r\n    global.FLT_MIN = FLT_MIN;\r\n\r\n    // color convert\r\n    global.COLOR_RGBA2GRAY = COLOR_RGBA2GRAY;\r\n    global.COLOR_RGB2GRAY = COLOR_RGB2GRAY;\r\n    global.COLOR_BGRA2GRAY = COLOR_BGRA2GRAY;\r\n    global.COLOR_BGR2GRAY = COLOR_BGR2GRAY;\r\n\r\n    // options\r\n    global.BOX_BLUR_NOSCALE = BOX_BLUR_NOSCALE;\r\n    global.SVD_U_T = SVD_U_T;\r\n    global.SVD_V_T = SVD_V_T;\r\n\r\n    global.get_data_type = get_data_type;\r\n    global.get_channel = get_channel;\r\n    global.get_data_type_size = get_data_type_size;\r\n\r\n    global.data_t = data_t;\r\n    global.matrix_t = matrix_t;\r\n    global.pyramid_t = pyramid_t;\r\n    global.keypoint_t = keypoint_t;\r\n\r\n})(jsfeat);\r\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var cache = (function() {\n\n        // very primitive array cache, still need testing if it helps\n        // of course V8 has its own powerful cache sys but i'm not sure\n        // it caches several multichannel 640x480 buffer creations each frame\n\n        var _pool_node_t = (function () {\n            function _pool_node_t(size_in_bytes) {\n                this.next = null;\n                this.data = new jsfeat.data_t(size_in_bytes);\n                this.size = this.data.size;\n                this.buffer = this.data.buffer;\n                this.u8 = this.data.u8;\n                this.i32 = this.data.i32;\n                this.f32 = this.data.f32;\n                this.f64 = this.data.f64;\n            }\n            _pool_node_t.prototype.resize = function(size_in_bytes) {\n                delete this.data;\n                this.data = new jsfeat.data_t(size_in_bytes);\n                this.size = this.data.size;\n                this.buffer = this.data.buffer;\n                this.u8 = this.data.u8;\n                this.i32 = this.data.i32;\n                this.f32 = this.data.f32;\n                this.f64 = this.data.f64;\n            }\n            return _pool_node_t;\n        })();\n\n        var _pool_head, _pool_tail;\n        var _pool_size = 0;\n\n        return {\n\n            allocate: function(capacity, data_size) {\n                _pool_head = _pool_tail = new _pool_node_t(data_size);\n                for (var i = 0; i < capacity; ++i) {\n                    var node = new _pool_node_t(data_size);\n                    _pool_tail = _pool_tail.next = node;\n\n                    _pool_size++;\n                }\n            },\n\n            get_buffer: function(size_in_bytes) {\n                // assume we have enough free nodes\n                var node = _pool_head;\n                _pool_head = _pool_head.next;\n                _pool_size--;\n\n                if(size_in_bytes > node.size) {\n                    node.resize(size_in_bytes);\n                }\n\n                return node;\n            },\n\n            put_buffer: function(node) {\n                _pool_tail = _pool_tail.next = node;\n                _pool_size++;\n            }\n        };\n    })();\n\n    global.cache = cache;\n    // for now we dont need more than 30 buffers\n    // if having cache sys really helps we can add auto extending sys\n    cache.allocate(30, 640*4);\n\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    var math = (function() {\r\n\r\n        var qsort_stack = new Int32Array(48*2);\r\n\r\n        return {\r\n            get_gaussian_kernel: function(size, sigma, kernel, data_type) {\r\n                var i=0,x=0.0,t=0.0,sigma_x=0.0,scale_2x=0.0;\r\n                var sum = 0.0;\r\n                var kern_node = jsfeat.cache.get_buffer(size<<2);\r\n                var _kernel = kern_node.f32;//new Float32Array(size);\r\n\r\n                if((size&1) == 1 && size <= 7 && sigma <= 0) {\r\n                    switch(size>>1) {\r\n                        case 0:\r\n                        _kernel[0] = 1.0;\r\n                        sum = 1.0;\r\n                        break;\r\n                        case 1:\r\n                        _kernel[0] = 0.25, _kernel[1] = 0.5, _kernel[2] = 0.25;\r\n                        sum = 0.25+0.5+0.25;\r\n                        break;\r\n                        case 2:\r\n                        _kernel[0] = 0.0625, _kernel[1] = 0.25, _kernel[2] = 0.375, \r\n                        _kernel[3] = 0.25, _kernel[4] = 0.0625;\r\n                        sum = 0.0625+0.25+0.375+0.25+0.0625;\r\n                        break;\r\n                        case 3:\r\n                        _kernel[0] = 0.03125, _kernel[1] = 0.109375, _kernel[2] = 0.21875, \r\n                        _kernel[3] = 0.28125, _kernel[4] = 0.21875, _kernel[5] = 0.109375, _kernel[6] = 0.03125;\r\n                        sum = 0.03125+0.109375+0.21875+0.28125+0.21875+0.109375+0.03125;\r\n                        break;\r\n                    }\r\n                } else {\r\n                    sigma_x = sigma > 0 ? sigma : ((size-1)*0.5 - 1.0)*0.3 + 0.8;\r\n                    scale_2x = -0.5/(sigma_x*sigma_x);\r\n\r\n                    for( ; i < size; ++i )\r\n                    {\r\n                        x = i - (size-1)*0.5;\r\n                        t = Math.exp(scale_2x*x*x);\r\n\r\n                        _kernel[i] = t;\r\n                        sum += t;\r\n                    }\r\n                }\r\n\r\n                if(data_type & jsfeat.U8_t) {\r\n                    // int based kernel\r\n                    sum = 256.0/sum;\r\n                    for (i = 0; i < size; ++i) {\r\n                        kernel[i] = (_kernel[i] * sum + 0.5)|0;\r\n                    }\r\n                } else {\r\n                    // classic kernel\r\n                    sum = 1.0/sum;\r\n                    for (i = 0; i < size; ++i) {\r\n                        kernel[i] = _kernel[i] * sum;\r\n                    }\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(kern_node);\r\n            },\r\n\r\n            // model is 3x3 matrix_t\r\n            perspective_4point_transform: function(model, src_x0, src_y0, dst_x0, dst_y0,\r\n                                                        src_x1, src_y1, dst_x1, dst_y1,\r\n                                                        src_x2, src_y2, dst_x2, dst_y2,\r\n                                                        src_x3, src_y3, dst_x3, dst_y3) {\r\n                var t1 = src_x0;\r\n                var t2 = src_x2;\r\n                var t4 = src_y1;\r\n                var t5 = t1 * t2 * t4;\r\n                var t6 = src_y3;\r\n                var t7 = t1 * t6;\r\n                var t8 = t2 * t7;\r\n                var t9 = src_y2;\r\n                var t10 = t1 * t9;\r\n                var t11 = src_x1;\r\n                var t14 = src_y0;\r\n                var t15 = src_x3;\r\n                var t16 = t14 * t15;\r\n                var t18 = t16 * t11;\r\n                var t20 = t15 * t11 * t9;\r\n                var t21 = t15 * t4;\r\n                var t24 = t15 * t9;\r\n                var t25 = t2 * t4;\r\n                var t26 = t6 * t2;\r\n                var t27 = t6 * t11;\r\n                var t28 = t9 * t11;\r\n                var t30 = 1.0 / (t21-t24 - t25 + t26 - t27 + t28);\r\n                var t32 = t1 * t15;\r\n                var t35 = t14 * t11;\r\n                var t41 = t4 * t1;\r\n                var t42 = t6 * t41;\r\n                var t43 = t14 * t2;\r\n                var t46 = t16 * t9;\r\n                var t48 = t14 * t9 * t11;\r\n                var t51 = t4 * t6 * t2;\r\n                var t55 = t6 * t14;\r\n                var Hr0 = -(t8-t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;\r\n                var Hr1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;\r\n                var Hr2 = t1;\r\n                var Hr3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;\r\n                var Hr4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;\r\n                var Hr5 = t14;\r\n                var Hr6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;\r\n                var Hr7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;\r\n                \r\n                t1 = dst_x0;\r\n                t2 = dst_x2;\r\n                t4 = dst_y1;\r\n                t5 = t1 * t2 * t4;\r\n                t6 = dst_y3;\r\n                t7 = t1 * t6;\r\n                t8 = t2 * t7;\r\n                t9 = dst_y2;\r\n                t10 = t1 * t9;\r\n                t11 = dst_x1;\r\n                t14 = dst_y0;\r\n                t15 = dst_x3;\r\n                t16 = t14 * t15;\r\n                t18 = t16 * t11;\r\n                t20 = t15 * t11 * t9;\r\n                t21 = t15 * t4;\r\n                t24 = t15 * t9;\r\n                t25 = t2 * t4;\r\n                t26 = t6 * t2;\r\n                t27 = t6 * t11;\r\n                t28 = t9 * t11;\r\n                t30 = 1.0 / (t21-t24 - t25 + t26 - t27 + t28);\r\n                t32 = t1 * t15;\r\n                t35 = t14 * t11;\r\n                t41 = t4 * t1;\r\n                t42 = t6 * t41;\r\n                t43 = t14 * t2;\r\n                t46 = t16 * t9;\r\n                t48 = t14 * t9 * t11;\r\n                t51 = t4 * t6 * t2;\r\n                t55 = t6 * t14;\r\n                var Hl0 = -(t8-t5 + t10 * t11 - t11 * t7 - t16 * t2 + t18 - t20 + t21 * t2) * t30;\r\n                var Hl1 = (t5 - t8 - t32 * t4 + t32 * t9 + t18 - t2 * t35 + t27 * t2 - t20) * t30;\r\n                var Hl2 = t1;\r\n                var Hl3 = (-t9 * t7 + t42 + t43 * t4 - t16 * t4 + t46 - t48 + t27 * t9 - t51) * t30;\r\n                var Hl4 = (-t42 + t41 * t9 - t55 * t2 + t46 - t48 + t55 * t11 + t51 - t21 * t9) * t30;\r\n                var Hl5 = t14;\r\n                var Hl6 = (-t10 + t41 + t43 - t35 + t24 - t21 - t26 + t27) * t30;\r\n                var Hl7 = (-t7 + t10 + t16 - t43 + t27 - t28 - t21 + t25) * t30;\r\n\r\n                // the following code computes R = Hl * inverse Hr\r\n                t2 = Hr4-Hr7*Hr5;\r\n                t4 = Hr0*Hr4;\r\n                t5 = Hr0*Hr5;\r\n                t7 = Hr3*Hr1;\r\n                t8 = Hr2*Hr3;\r\n                t10 = Hr1*Hr6;\r\n                var t12 = Hr2*Hr6;\r\n                t15 = 1.0 / (t4-t5*Hr7-t7+t8*Hr7+t10*Hr5-t12*Hr4);\r\n                t18 = -Hr3+Hr5*Hr6;\r\n                var t23 = -Hr3*Hr7+Hr4*Hr6;\r\n                t28 = -Hr1+Hr2*Hr7;\r\n                var t31 = Hr0-t12;\r\n                t35 = Hr0*Hr7-t10;\r\n                t41 = -Hr1*Hr5+Hr2*Hr4;\r\n                var t44 = t5-t8;\r\n                var t47 = t4-t7;\r\n                t48 = t2*t15;\r\n                var t49 = t28*t15;\r\n                var t50 = t41*t15;\r\n                var mat = model.data;\r\n                mat[0] = Hl0*t48+Hl1*(t18*t15)-Hl2*(t23*t15);\r\n                mat[1] = Hl0*t49+Hl1*(t31*t15)-Hl2*(t35*t15);\r\n                mat[2] = -Hl0*t50-Hl1*(t44*t15)+Hl2*(t47*t15);\r\n                mat[3] = Hl3*t48+Hl4*(t18*t15)-Hl5*(t23*t15);\r\n                mat[4] = Hl3*t49+Hl4*(t31*t15)-Hl5*(t35*t15);\r\n                mat[5] = -Hl3*t50-Hl4*(t44*t15)+Hl5*(t47*t15);\r\n                mat[6] = Hl6*t48+Hl7*(t18*t15)-t23*t15;\r\n                mat[7] = Hl6*t49+Hl7*(t31*t15)-t35*t15;\r\n                mat[8] = -Hl6*t50-Hl7*(t44*t15)+t47*t15;\r\n            },\r\n\r\n            // The current implementation was derived from *BSD system qsort():\r\n            // Copyright (c) 1992, 1993\r\n            // The Regents of the University of California.  All rights reserved.\r\n            qsort: function(array, low, high, cmp) {\r\n                var isort_thresh = 7;\r\n                var t,ta,tb,tc;\r\n                var sp = 0,left=0,right=0,i=0,n=0,m=0,ptr=0,ptr2=0,d=0;\r\n                var left0=0,left1=0,right0=0,right1=0,pivot=0,a=0,b=0,c=0,swap_cnt=0;\r\n\r\n                var stack = qsort_stack;\r\n\r\n                if( (high-low+1) <= 1 ) return;\r\n\r\n                stack[0] = low;\r\n                stack[1] = high;\r\n\r\n                while( sp >= 0 ) {\r\n                \r\n                    left = stack[sp<<1];\r\n                    right = stack[(sp<<1)+1];\r\n                    sp--;\r\n\r\n                    for(;;) {\r\n                        n = (right - left) + 1;\r\n\r\n                        if( n <= isort_thresh ) {\r\n                        //insert_sort:\r\n                            for( ptr = left + 1; ptr <= right; ptr++ ) {\r\n                                for( ptr2 = ptr; ptr2 > left && cmp(array[ptr2],array[ptr2-1]); ptr2--) {\r\n                                    t = array[ptr2];\r\n                                    array[ptr2] = array[ptr2-1];\r\n                                    array[ptr2-1] = t;\r\n                                }\r\n                            }\r\n                            break;\r\n                        } else {\r\n                            swap_cnt = 0;\r\n\r\n                            left0 = left;\r\n                            right0 = right;\r\n                            pivot = left + (n>>1);\r\n\r\n                            if( n > 40 ) {\r\n                                d = n >> 3;\r\n                                a = left, b = left + d, c = left + (d<<1);\r\n                                ta = array[a],tb = array[b],tc = array[c];\r\n                                left = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))\r\n                                                  : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));\r\n\r\n                                a = pivot - d, b = pivot, c = pivot + d;\r\n                                ta = array[a],tb = array[b],tc = array[c];\r\n                                pivot = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))\r\n                                                  : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));\r\n\r\n                                a = right - (d<<1), b = right - d, c = right;\r\n                                ta = array[a],tb = array[b],tc = array[c];\r\n                                right = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))\r\n                                                  : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));\r\n                            }\r\n\r\n                            a = left, b = pivot, c = right;\r\n                            ta = array[a],tb = array[b],tc = array[c];\r\n                            pivot = cmp(ta, tb) ? (cmp(tb, tc) ? b : (cmp(ta, tc) ? c : a))   \r\n                                               : (cmp(tc, tb) ? b : (cmp(ta, tc) ? a : c));\r\n                            if( pivot != left0 ) {\r\n                                t = array[pivot];\r\n                                array[pivot] = array[left0];\r\n                                array[left0] = t;\r\n                                pivot = left0;\r\n                            }\r\n                            left = left1 = left0 + 1;\r\n                            right = right1 = right0;\r\n\r\n                            ta = array[pivot];\r\n                            for(;;) {\r\n                                while( left <= right && !cmp(ta, array[left]) ) {\r\n                                    if( !cmp(array[left], ta) ) {\r\n                                        if( left > left1 ) {\r\n                                            t = array[left1];\r\n                                            array[left1] = array[left];\r\n                                            array[left] = t;\r\n                                        }\r\n                                        swap_cnt = 1;\r\n                                        left1++;\r\n                                    }\r\n                                    left++;\r\n                                }\r\n\r\n                                while( left <= right && !cmp(array[right], ta) ) {\r\n                                    if( !cmp(ta, array[right]) ) {\r\n                                        if( right < right1 ) {\r\n                                            t = array[right1];\r\n                                            array[right1] = array[right];\r\n                                            array[right] = t;\r\n                                        }\r\n                                        swap_cnt = 1;\r\n                                        right1--;\r\n                                    }\r\n                                    right--;\r\n                                }\r\n\r\n                                if( left > right ) break;\r\n                                \r\n                                t = array[left];\r\n                                array[left] = array[right];\r\n                                array[right] = t;\r\n                                swap_cnt = 1;\r\n                                left++;\r\n                                right--;\r\n                            }\r\n\r\n                            if( swap_cnt == 0 ) {\r\n                                left = left0, right = right0;\r\n                                //goto insert_sort;\r\n                                for( ptr = left + 1; ptr <= right; ptr++ ) {\r\n                                    for( ptr2 = ptr; ptr2 > left && cmp(array[ptr2],array[ptr2-1]); ptr2--) {\r\n                                        t = array[ptr2];\r\n                                        array[ptr2] = array[ptr2-1];\r\n                                        array[ptr2-1] = t;\r\n                                    }\r\n                                }\r\n                                break;\r\n                            }\r\n\r\n                            n = Math.min( (left1 - left0), (left - left1) );\r\n                            m = (left-n)|0;\r\n                            for( i = 0; i < n; ++i,++m ) {\r\n                                t = array[left0+i];\r\n                                array[left0+i] = array[m];\r\n                                array[m] = t;\r\n                            }\r\n\r\n                            n = Math.min( (right0 - right1), (right1 - right) );\r\n                            m = (right0-n+1)|0;\r\n                            for( i = 0; i < n; ++i,++m ) {\r\n                                t = array[left+i];\r\n                                array[left+i] = array[m];\r\n                                array[m] = t;\r\n                            }\r\n                            n = (left - left1);\r\n                            m = (right1 - right);\r\n                            if( n > 1 ) {\r\n                                if( m > 1 ) {\r\n                                    if( n > m ) {\r\n                                        ++sp;\r\n                                        stack[sp<<1] = left0;\r\n                                        stack[(sp<<1)+1] = left0 + n - 1;\r\n                                        left = right0 - m + 1, right = right0;\r\n                                    } else {\r\n                                        ++sp;\r\n                                        stack[sp<<1] = right0 - m + 1;\r\n                                        stack[(sp<<1)+1] = right0;\r\n                                        left = left0, right = left0 + n - 1;\r\n                                    }\r\n                                } else {\r\n                                    left = left0, right = left0 + n - 1;\r\n                                }\r\n                            }\r\n                            else if( m > 1 )\r\n                                left = right0 - m + 1, right = right0;\r\n                            else\r\n                                break;\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n            median: function(array, low, high) {\r\n                var w;\r\n                var middle=0,ll=0,hh=0,median=(low+high)>>1;\r\n                for (;;) {\r\n                    if (high <= low) return array[median];\r\n                    if (high == (low + 1)) {\r\n                        if (array[low] > array[high]) {\r\n                            w = array[low];\r\n                            array[low] = array[high];\r\n                            array[high] = w;\r\n                        }\r\n                        return array[median];\r\n                    }\r\n                    middle = ((low + high) >> 1);\r\n                    if (array[middle] > array[high]) {\r\n                        w = array[middle];\r\n                        array[middle] = array[high];\r\n                        array[high] = w;\r\n                    }\r\n                    if (array[low] > array[high]) {\r\n                        w = array[low];\r\n                        array[low] = array[high];\r\n                        array[high] = w;\r\n                    }\r\n                    if (array[middle] > array[low]) {\r\n                        w = array[middle];\r\n                        array[middle] = array[low];\r\n                        array[low] = w;\r\n                    }\r\n                    ll = (low + 1);\r\n                    w = array[middle];\r\n                    array[middle] = array[ll];\r\n                    array[ll] = w;\r\n                    hh = high;\r\n                    for (;;) {\r\n                        do ++ll; while (array[low] > array[ll]);\r\n                        do --hh; while (array[hh] > array[low]);\r\n                        if (hh < ll) break;\r\n                        w = array[ll];\r\n                        array[ll] = array[hh];\r\n                        array[hh] = w;\r\n                    }\r\n                    w = array[low];\r\n                    array[low] = array[hh];\r\n                    array[hh] = w;\r\n                    if (hh <= median)\r\n                        low = ll;\r\n                    else if (hh >= median)\r\n                        high = (hh - 1);\r\n                }\r\n                return 0;\r\n            }\r\n        };\r\n\r\n    })();\r\n\r\n    global.math = math;\r\n\r\n})(jsfeat);\r\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    var matmath = (function() {\r\n        \r\n        return {\r\n            identity: function(M, value) {\r\n                if (typeof value === \"undefined\") { value=1; }\r\n                var src=M.data;\r\n                var rows=M.rows, cols=M.cols, cols_1=(cols+1)|0;\r\n                var len = rows * cols;\r\n                var k = len;\r\n                while(--len >= 0) src[len] = 0.0;\r\n                len = k;\r\n                k = 0;\r\n                while(k < len)  {\r\n                    src[k] = value;\r\n                    k = k + cols_1;\r\n                }\r\n            },\r\n\r\n            transpose: function(At, A) {\r\n                var i=0,j=0,nrows=A.rows,ncols=A.cols;\r\n                var Ai=0,Ati=0,pAt=0;\r\n                var ad=A.data,atd=At.data;\r\n\r\n                for (; i < nrows; Ati += 1, Ai += ncols, i++) {\r\n                    pAt = Ati;\r\n                    for (j = 0; j < ncols; pAt += nrows, j++) atd[pAt] = ad[Ai+j];\r\n                }\r\n            },\r\n\r\n            // C = A * B\r\n            multiply: function(C, A, B) {\r\n                var i=0,j=0,k=0;\r\n                var Ap=0,pA=0,pB=0,p_B=0,Cp=0;\r\n                var ncols=A.cols,nrows=A.rows,mcols=B.cols;\r\n                var ad=A.data,bd=B.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < nrows; Ap += ncols, i++) {\r\n                    for (p_B = 0, j = 0; j < mcols; Cp++, p_B++, j++) {\r\n                        pB = p_B;\r\n                        pA = Ap;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < ncols; pA++, pB += mcols, k++) {\r\n                            sum += ad[pA] * bd[pB];\r\n                        }\r\n                        cd[Cp] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // C = A * B'\r\n            multiply_ABt: function(C, A, B) {\r\n                var i=0,j=0,k=0;\r\n                var Ap=0,pA=0,pB=0,Cp=0;\r\n                var ncols=A.cols,nrows=A.rows,mrows=B.rows;\r\n                var ad=A.data,bd=B.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < nrows; Ap += ncols, i++) {\r\n                    for (pB = 0, j = 0; j < mrows; Cp++, j++) {\r\n                        pA = Ap;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < ncols; pA++, pB++, k++) {\r\n                            sum += ad[pA] * bd[pB];\r\n                        }\r\n                        cd[Cp] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // C = A' * B\r\n            multiply_AtB: function(C, A, B) {\r\n                var i=0,j=0,k=0;\r\n                var Ap=0,pA=0,pB=0,p_B=0,Cp=0;\r\n                var ncols=A.cols,nrows=A.rows,mcols=B.cols;\r\n                var ad=A.data,bd=B.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < ncols; Ap++, i++) {\r\n                    for (p_B = 0, j = 0; j < mcols; Cp++, p_B++, j++) {\r\n                        pB = p_B;\r\n                        pA = Ap;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < nrows; pA += ncols, pB += mcols, k++) {\r\n                            sum += ad[pA] * bd[pB];\r\n                        }\r\n                        cd[Cp] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // C = A * A'\r\n            multiply_AAt: function(C, A) {\r\n                var i=0,j=0,k=0;\r\n                var pCdiag=0,p_A=0,pA=0,pB=0,pC=0,pCt=0;\r\n                var ncols=A.cols,nrows=A.rows;\r\n                var ad=A.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < nrows; pCdiag += nrows + 1, p_A = pA, i++) {\r\n                    pC = pCdiag;\r\n                    pCt = pCdiag;\r\n                    pB = p_A; \r\n                    for (j = i; j < nrows; pC++, pCt += nrows, j++) {\r\n                        pA = p_A;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < ncols; k++) {\r\n                            sum += ad[pA++] * ad[pB++];\r\n                        }\r\n                        cd[pC] = sum\r\n                        cd[pCt] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // C = A' * A\r\n            multiply_AtA: function(C, A) {\r\n                var i=0,j=0,k=0;\r\n                var p_A=0,pA=0,pB=0,p_C=0,pC=0,p_CC=0;\r\n                var ncols=A.cols,nrows=A.rows;\r\n                var ad=A.data,cd=C.data;\r\n                var sum=0.0;\r\n\r\n                for (; i < ncols; p_C += ncols, i++) {\r\n                    p_A = i;\r\n                    p_CC = p_C + i;\r\n                    pC = p_CC;\r\n                    for (j = i; j < ncols; pC++, p_CC += ncols, j++) {\r\n                        pA = p_A;\r\n                        pB = j;\r\n                        sum = 0.0;\r\n                        for (k = 0; k < nrows; pA += ncols, pB += ncols, k++) {\r\n                            sum += ad[pA] * ad[pB];\r\n                        }\r\n                        cd[pC] = sum\r\n                        cd[p_CC] = sum;\r\n                    }\r\n                }\r\n            },\r\n\r\n            // various small matrix operations\r\n            identity_3x3: function(M, value) {\r\n                if (typeof value === \"undefined\") { value=1; }\r\n                var dt=M.data;\r\n                dt[0] = dt[4] = dt[8] = value;\r\n                dt[1] = dt[2] = dt[3] = 0;\r\n                dt[5] = dt[6] = dt[7] = 0;\r\n            },\r\n\r\n            invert_3x3: function(from, to) {\r\n                var A = from.data, invA = to.data;\r\n                var t1 = A[4];\r\n                var t2 = A[8];\r\n                var t4 = A[5];\r\n                var t5 = A[7];\r\n                var t8 = A[0];\r\n\r\n                var t9 = t8*t1;\r\n                var t11 = t8*t4;\r\n                var t13 = A[3];\r\n                var t14 = A[1];\r\n                var t15 = t13*t14;\r\n                var t17 = A[2];\r\n                var t18 = t13*t17;\r\n                var t20 = A[6];\r\n                var t21 = t20*t14;\r\n                var t23 = t20*t17;\r\n                var t26 = 1.0/(t9*t2-t11*t5-t15*t2+t18*t5+t21*t4-t23*t1);\r\n                invA[0] = (t1*t2-t4*t5)*t26;\r\n                invA[1] = -(t14*t2-t17*t5)*t26;\r\n                invA[2] = -(-t14*t4+t17*t1)*t26;\r\n                invA[3] = -(t13*t2-t4*t20)*t26;\r\n                invA[4] = (t8*t2-t23)*t26;\r\n                invA[5] = -(t11-t18)*t26;\r\n                invA[6] = -(-t13*t5+t1*t20)*t26;\r\n                invA[7] = -(t8*t5-t21)*t26;\r\n                invA[8] = (t9-t15)*t26;\r\n            },\r\n            // C = A * B\r\n            multiply_3x3: function(C, A, B) {\r\n                var Cd=C.data, Ad=A.data, Bd=B.data;\r\n                var m1_0 = Ad[0], m1_1 = Ad[1], m1_2 = Ad[2];\r\n                var m1_3 = Ad[3], m1_4 = Ad[4], m1_5 = Ad[5];\r\n                var m1_6 = Ad[6], m1_7 = Ad[7], m1_8 = Ad[8];\r\n\r\n                var m2_0 = Bd[0], m2_1 = Bd[1], m2_2 = Bd[2];\r\n                var m2_3 = Bd[3], m2_4 = Bd[4], m2_5 = Bd[5];\r\n                var m2_6 = Bd[6], m2_7 = Bd[7], m2_8 = Bd[8];\r\n\r\n                Cd[0] = m1_0 * m2_0 + m1_1 * m2_3 + m1_2 * m2_6;\r\n                Cd[1] = m1_0 * m2_1 + m1_1 * m2_4 + m1_2 * m2_7;\r\n                Cd[2] = m1_0 * m2_2 + m1_1 * m2_5 + m1_2 * m2_8;\r\n                Cd[3] = m1_3 * m2_0 + m1_4 * m2_3 + m1_5 * m2_6;\r\n                Cd[4] = m1_3 * m2_1 + m1_4 * m2_4 + m1_5 * m2_7;\r\n                Cd[5] = m1_3 * m2_2 + m1_4 * m2_5 + m1_5 * m2_8;\r\n                Cd[6] = m1_6 * m2_0 + m1_7 * m2_3 + m1_8 * m2_6;\r\n                Cd[7] = m1_6 * m2_1 + m1_7 * m2_4 + m1_8 * m2_7;\r\n                Cd[8] = m1_6 * m2_2 + m1_7 * m2_5 + m1_8 * m2_8;\r\n            },\r\n\r\n            mat3x3_determinant: function(M) {\r\n                var md=M.data;\r\n                return  md[0] * md[4] * md[8] -\r\n                        md[0] * md[5] * md[7] -\r\n                        md[3] * md[1] * md[8] +\r\n                        md[3] * md[2] * md[7] +\r\n                        md[6] * md[1] * md[5] -\r\n                        md[6] * md[2] * md[4];\r\n            },\r\n\r\n            determinant_3x3: function(M11, M12, M13, \r\n                                      M21, M22, M23, \r\n                                      M31, M32, M33) {\r\n                return  M11 * M22 * M33 - M11 * M23 * M32 -\r\n                          M21 * M12 * M33 + M21 * M13 * M32 +\r\n                          M31 * M12 * M23 - M31 * M13 * M22;\r\n            }\r\n        };\r\n\r\n    })();\r\n\r\n    global.matmath = matmath;\r\n\r\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    var linalg = (function() {\r\n\r\n        var swap = function(A, i0, i1, t) {\r\n            t = A[i0];\r\n            A[i0] = A[i1];\r\n            A[i1] = t;\r\n        }\r\n\r\n        var hypot = function(a, b) {\r\n            a = Math.abs(a);\r\n            b = Math.abs(b);\r\n            if( a > b ) {\r\n                b /= a;\r\n                return a*Math.sqrt(1.0 + b*b);\r\n            }\r\n            if( b > 0 ) {\r\n                a /= b;\r\n                return b*Math.sqrt(1.0 + a*a);\r\n            }\r\n            return 0.0;\r\n        }\r\n\r\n        var JacobiImpl = function(A, astep, W, V, vstep, n) {\r\n            var eps = jsfeat.EPSILON;\r\n            var i=0,j=0,k=0,m=0,l=0,idx=0,_in=0,_in2=0;\r\n            var iters=0,max_iter=n*n*30;\r\n            var mv=0.0,val=0.0,p=0.0,y=0.0,t=0.0,s=0.0,c=0.0,a0=0.0,b0=0.0;\r\n\r\n            var indR_buff = jsfeat.cache.get_buffer(n<<2);\r\n            var indC_buff = jsfeat.cache.get_buffer(n<<2);\r\n            var indR = indR_buff.i32;\r\n            var indC = indC_buff.i32;\r\n\r\n            if(V) {\r\n                for(; i < n; i++) {\r\n                    k = i*vstep;\r\n                    for(j = 0; j < n; j++) {\r\n                        V[k + j] = 0.0;\r\n                    }\r\n                    V[k + i] = 1.0;\r\n                }\r\n            }\r\n\r\n            for(k = 0; k < n; k++) {\r\n                W[k] = A[(astep + 1)*k];\r\n                if(k < n - 1) {\r\n                    for(m = k+1, mv = Math.abs(A[astep*k + m]), i = k+2; i < n; i++) {\r\n                        val = Math.abs(A[astep*k+i]);\r\n                        if(mv < val)\r\n                            mv = val, m = i;\r\n                    }\r\n                    indR[k] = m;\r\n                }\r\n                if(k > 0) {\r\n                    for(m = 0, mv = Math.abs(A[k]), i = 1; i < k; i++) {\r\n                        val = Math.abs(A[astep*i+k]);\r\n                        if(mv < val)\r\n                            mv = val, m = i;\r\n                    }\r\n                    indC[k] = m;\r\n                }\r\n            }\r\n\r\n            if(n > 1) for( ; iters < max_iter; iters++) {\r\n                // find index (k,l) of pivot p\r\n                for(k = 0, mv = Math.abs(A[indR[0]]), i = 1; i < n-1; i++) {\r\n                    val = Math.abs(A[astep*i + indR[i]]);\r\n                    if( mv < val )\r\n                        mv = val, k = i;\r\n                }\r\n                l = indR[k];\r\n                for(i = 1; i < n; i++) {\r\n                    val = Math.abs(A[astep*indC[i] + i]);\r\n                    if( mv < val )\r\n                        mv = val, k = indC[i], l = i;\r\n                }\r\n                \r\n                p = A[astep*k + l];\r\n\r\n                if(Math.abs(p) <= eps) break;\r\n\r\n                y = (W[l] - W[k])*0.5;\r\n                t = Math.abs(y) + hypot(p, y);\r\n                s = hypot(p, t);\r\n                c = t/s;\r\n                s = p/s; t = (p/t)*p;\r\n                if(y < 0)\r\n                    s = -s, t = -t;\r\n                A[astep*k + l] = 0;\r\n                \r\n                W[k] -= t;\r\n                W[l] += t;\r\n                \r\n                // rotate rows and columns k and l\r\n                for (i = 0; i < k; i++) {\r\n                    _in = (astep * i + k);\r\n                    _in2 = (astep * i + l);\r\n                    a0 = A[_in];\r\n                    b0 = A[_in2];\r\n                    A[_in] = a0 * c - b0 * s;\r\n                    A[_in2] = a0 * s + b0 * c;\r\n                }\r\n                for (i = (k + 1); i < l; i++) {\r\n                    _in = (astep * k + i);\r\n                    _in2 = (astep * i + l);\r\n                    a0 = A[_in];\r\n                    b0 = A[_in2];\r\n                    A[_in] = a0 * c - b0 * s;\r\n                    A[_in2] = a0 * s + b0 * c;\r\n                }\r\n                i = l + 1;\r\n                _in = (astep * k + i);\r\n                _in2 = (astep * l + i);\r\n                for (; i < n; i++, _in++, _in2++) {\r\n                    a0 = A[_in];\r\n                    b0 = A[_in2];\r\n                    A[_in] = a0 * c - b0 * s;\r\n                    A[_in2] = a0 * s + b0 * c;\r\n                }\r\n                \r\n                // rotate eigenvectors\r\n                if (V) {\r\n                    _in = vstep * k;\r\n                    _in2 = vstep * l;\r\n                    for (i = 0; i < n; i++, _in++, _in2++) {\r\n                        a0 = V[_in];\r\n                        b0 = V[_in2];\r\n                        V[_in] = a0 * c - b0 * s;\r\n                        V[_in2] = a0 * s + b0 * c;\r\n                    }\r\n                }\r\n                \r\n                for(j = 0; j < 2; j++) {\r\n                    idx = j == 0 ? k : l;\r\n                    if(idx < n - 1) {\r\n                        for(m = idx+1, mv = Math.abs(A[astep*idx + m]), i = idx+2; i < n; i++) {\r\n                            val = Math.abs(A[astep*idx+i]);\r\n                            if( mv < val )\r\n                                mv = val, m = i;\r\n                        }\r\n                        indR[idx] = m;\r\n                    }\r\n                    if(idx > 0) {\r\n                        for(m = 0, mv = Math.abs(A[idx]), i = 1; i < idx; i++) {\r\n                            val = Math.abs(A[astep*i+idx]);\r\n                            if( mv < val )\r\n                                mv = val, m = i;\r\n                        }\r\n                        indC[idx] = m;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // sort eigenvalues & eigenvectors\r\n            for(k = 0; k < n-1; k++) {\r\n                m = k;\r\n                for(i = k+1; i < n; i++) {\r\n                    if(W[m] < W[i])\r\n                        m = i;\r\n                }\r\n                if(k != m) {\r\n                    swap(W, m, k, mv);\r\n                    if(V) {\r\n                        for(i = 0; i < n; i++) {\r\n                            swap(V, vstep*m + i, vstep*k + i, mv);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n            jsfeat.cache.put_buffer(indR_buff);\r\n            jsfeat.cache.put_buffer(indC_buff);\r\n        }\r\n\r\n        var JacobiSVDImpl = function(At, astep, _W, Vt, vstep, m, n, n1) {\r\n            var eps = jsfeat.EPSILON * 2.0;\r\n            var minval = jsfeat.FLT_MIN;\r\n            var i=0,j=0,k=0,iter=0,max_iter=Math.max(m, 30);\r\n            var Ai=0,Aj=0,Vi=0,Vj=0,changed=0;\r\n            var c=0.0, s=0.0, t=0.0;\r\n            var t0=0.0,t1=0.0,sd=0.0,beta=0.0,gamma=0.0,delta=0.0,a=0.0,p=0.0,b=0.0;\r\n            var seed = 0x1234;\r\n            var val=0.0,val0=0.0,asum=0.0;\r\n\r\n            var W_buff = jsfeat.cache.get_buffer(n<<3);\r\n            var W = W_buff.f64;\r\n            \r\n            for(; i < n; i++) {\r\n                for(k = 0, sd = 0; k < m; k++) {\r\n                    t = At[i*astep + k];\r\n                    sd += t*t;\r\n                }\r\n                W[i] = sd;\r\n                \r\n                if(Vt) {\r\n                    for(k = 0; k < n; k++) {\r\n                        Vt[i*vstep + k] = 0;\r\n                    }\r\n                    Vt[i*vstep + i] = 1;\r\n                }\r\n            }\r\n            \r\n            for(; iter < max_iter; iter++) {\r\n                changed = 0;\r\n                \r\n                for(i = 0; i < n-1; i++) {\r\n                    for(j = i+1; j < n; j++) {\r\n                        Ai = (i*astep)|0, Aj = (j*astep)|0;\r\n                        a = W[i], p = 0, b = W[j];\r\n                        \r\n                        k = 2;\r\n                        p += At[Ai]*At[Aj];\r\n                        p += At[Ai+1]*At[Aj+1];\r\n\r\n                        for(; k < m; k++)\r\n                            p += At[Ai+k]*At[Aj+k];\r\n                        \r\n                        if(Math.abs(p) <= eps*Math.sqrt(a*b)) continue;\r\n                        \r\n                        p *= 2.0;\r\n                        beta = a - b, gamma = hypot(p, beta);\r\n                        if( beta < 0 ) {\r\n                            delta = (gamma - beta)*0.5;\r\n                            s = Math.sqrt(delta/gamma);\r\n                            c = (p/(gamma*s*2.0));\r\n                        } else {\r\n                            c = Math.sqrt((gamma + beta)/(gamma*2.0));\r\n                            s = (p/(gamma*c*2.0));\r\n                        }\r\n                        \r\n                        a=0.0, b=0.0;\r\n                        \r\n                        k = 2; // unroll\r\n                        t0 = c*At[Ai] + s*At[Aj];\r\n                        t1 = -s*At[Ai] + c*At[Aj];\r\n                        At[Ai] = t0; At[Aj] = t1;\r\n                        a += t0*t0; b += t1*t1;\r\n\r\n                        t0 = c*At[Ai+1] + s*At[Aj+1];\r\n                        t1 = -s*At[Ai+1] + c*At[Aj+1];\r\n                        At[Ai+1] = t0; At[Aj+1] = t1;\r\n                        a += t0*t0; b += t1*t1;\r\n\r\n                        for( ; k < m; k++ )\r\n                        {\r\n                            t0 = c*At[Ai+k] + s*At[Aj+k];\r\n                            t1 = -s*At[Ai+k] + c*At[Aj+k];\r\n                            At[Ai+k] = t0; At[Aj+k] = t1;\r\n                            \r\n                            a += t0*t0; b += t1*t1;\r\n                        }\r\n                        \r\n                        W[i] = a; W[j] = b;\r\n                        \r\n                        changed = 1;\r\n                        \r\n                        if(Vt) {\r\n                            Vi = (i*vstep)|0, Vj = (j*vstep)|0;\r\n\r\n                            k = 2;\r\n                            t0 = c*Vt[Vi] + s*Vt[Vj];\r\n                            t1 = -s*Vt[Vi] + c*Vt[Vj];\r\n                            Vt[Vi] = t0; Vt[Vj] = t1;\r\n\r\n                            t0 = c*Vt[Vi+1] + s*Vt[Vj+1];\r\n                            t1 = -s*Vt[Vi+1] + c*Vt[Vj+1];\r\n                            Vt[Vi+1] = t0; Vt[Vj+1] = t1;\r\n\r\n                            for(; k < n; k++) {\r\n                                t0 = c*Vt[Vi+k] + s*Vt[Vj+k];\r\n                                t1 = -s*Vt[Vi+k] + c*Vt[Vj+k];\r\n                                Vt[Vi+k] = t0; Vt[Vj+k] = t1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if(changed == 0) break;\r\n            }\r\n            \r\n            for(i = 0; i < n; i++) {\r\n                for(k = 0, sd = 0; k < m; k++) {\r\n                    t = At[i*astep + k];\r\n                    sd += t*t;\r\n                }\r\n                W[i] = Math.sqrt(sd);\r\n            }\r\n            \r\n            for(i = 0; i < n-1; i++) {\r\n                j = i;\r\n                for(k = i+1; k < n; k++) {\r\n                    if(W[j] < W[k])\r\n                        j = k;\r\n                }\r\n                if(i != j) {\r\n                    swap(W, i, j, sd);\r\n                    if(Vt) {\r\n                        for(k = 0; k < m; k++) {\r\n                            swap(At, i*astep + k, j*astep + k, t);\r\n                        }\r\n                        \r\n                        for(k = 0; k < n; k++) {\r\n                            swap(Vt, i*vstep + k, j*vstep + k, t);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            for(i = 0; i < n; i++) {\r\n                _W[i] = W[i];\r\n            }\r\n            \r\n            if(!Vt) {\r\n                jsfeat.cache.put_buffer(W_buff);\r\n                return;\r\n            }\r\n\r\n            for(i = 0; i < n1; i++) {\r\n\r\n                sd = i < n ? W[i] : 0;\r\n                \r\n                while(sd <= minval) {\r\n                    // if we got a zero singular value, then in order to get the corresponding left singular vector\r\n                    // we generate a random vector, project it to the previously computed left singular vectors,\r\n                    // subtract the projection and normalize the difference.\r\n                    val0 = (1.0/m);\r\n                    for(k = 0; k < m; k++) {\r\n                        seed = (seed * 214013 + 2531011);\r\n                        val = (((seed >> 16) & 0x7fff) & 256) != 0 ? val0 : -val0;\r\n                        At[i*astep + k] = val;\r\n                    }\r\n                    for(iter = 0; iter < 2; iter++) {\r\n                        for(j = 0; j < i; j++) {\r\n                            sd = 0;\r\n                            for(k = 0; k < m; k++) {\r\n                                sd += At[i*astep + k]*At[j*astep + k];\r\n                            }\r\n                            asum = 0.0;\r\n                            for(k = 0; k < m; k++) {\r\n                                t = (At[i*astep + k] - sd*At[j*astep + k]);\r\n                                At[i*astep + k] = t;\r\n                                asum += Math.abs(t);\r\n                            }\r\n                            asum = asum ? 1.0/asum : 0;\r\n                            for(k = 0; k < m; k++) {\r\n                                At[i*astep + k] *= asum;\r\n                            }\r\n                        }\r\n                    }\r\n                    sd = 0;\r\n                    for(k = 0; k < m; k++) {\r\n                        t = At[i*astep + k];\r\n                        sd += t*t;\r\n                    }\r\n                    sd = Math.sqrt(sd);\r\n                }\r\n                \r\n                s = (1.0/sd);\r\n                for(k = 0; k < m; k++) {\r\n                    At[i*astep + k] *= s;\r\n                }\r\n            }\r\n\r\n            jsfeat.cache.put_buffer(W_buff);\r\n        }\r\n        \r\n        return {\r\n\r\n            lu_solve: function(A, B) {\r\n                var i=0,j=0,k=0,p=1,astep=A.cols;\r\n                var ad=A.data, bd=B.data;\r\n                var t,alpha,d,s;\r\n\r\n                for(i = 0; i < astep; i++) {\r\n                    k = i;                    \r\n                    for(j = i+1; j < astep; j++) {\r\n                        if(Math.abs(ad[j*astep + i]) > Math.abs(ad[k*astep+i])) {\r\n                            k = j;\r\n                        }\r\n                    }\r\n                    \r\n                    if(Math.abs(ad[k*astep+i]) < jsfeat.EPSILON) {\r\n                        return 0; // FAILED\r\n                    }\r\n                    \r\n                    if(k != i) {\r\n                        for(j = i; j < astep; j++ ) {\r\n                            swap(ad, i*astep+j, k*astep+j, t);\r\n                        }\r\n                        \r\n                        swap(bd, i, k, t);\r\n                        p = -p;\r\n                    }\r\n                    \r\n                    d = -1.0/ad[i*astep+i];\r\n                    \r\n                    for(j = i+1; j < astep; j++) {\r\n                        alpha = ad[j*astep+i]*d;\r\n                        \r\n                        for(k = i+1; k < astep; k++) {\r\n                            ad[j*astep+k] += alpha*ad[i*astep+k];\r\n                        }\r\n                        \r\n                        bd[j] += alpha*bd[i];\r\n                    }\r\n                    \r\n                    ad[i*astep+i] = -d;\r\n                }\r\n                \r\n                for(i = astep-1; i >= 0; i--) {\r\n                    s = bd[i];\r\n                    for(k = i+1; k < astep; k++) {\r\n                        s -= ad[i*astep+k]*bd[k];\r\n                    }\r\n                    bd[i] = s*ad[i*astep+i];\r\n                }\r\n\r\n                return 1; // OK\r\n            },\r\n\r\n            cholesky_solve: function(A, B) {\r\n                var col=0,row=0,col2=0,cs=0,rs=0,i=0,j=0;\r\n                var size = A.cols;\r\n                var ad=A.data, bd=B.data;\r\n                var val,inv_diag;\r\n\r\n                for (col = 0; col < size; col++) {\r\n                    inv_diag = 1.0;\r\n                    cs = (col * size);\r\n                    rs = cs;\r\n                    for (row = col; row < size; row++)\r\n                    {\r\n                        // correct for the parts of cholesky already computed\r\n                        val = ad[(rs+col)];\r\n                        for (col2 = 0; col2 < col; col2++) {\r\n                            val -= ad[(col2*size+col)] * ad[(rs+col2)];\r\n                        }\r\n                        if (row == col) {\r\n                            // this is the diagonal element so don't divide\r\n                            ad[(rs+col)] = val;\r\n                            if(val == 0) {\r\n                                return 0;\r\n                            }\r\n                            inv_diag = 1.0 / val;\r\n                        } else {\r\n                            // cache the value without division in the upper half\r\n                            ad[(cs+row)] = val;\r\n                            // divide my the diagonal element for all others\r\n                            ad[(rs+col)] = val * inv_diag;\r\n                        }\r\n                        rs = (rs + size);\r\n                    }\r\n                }\r\n\r\n                // first backsub through L\r\n                cs = 0;\r\n                for (i = 0; i < size; i++) {\r\n                    val = bd[i];\r\n                    for (j = 0; j < i; j++) {\r\n                        val -= ad[(cs+j)] * bd[j];\r\n                    }\r\n                    bd[i] = val;\r\n                    cs = (cs + size);\r\n                }\r\n                // backsub through diagonal\r\n                cs = 0;\r\n                for (i = 0; i < size; i++) {\r\n                    bd[i] /= ad[(cs + i)];\r\n                    cs = (cs + size);\r\n                }\r\n                // backsub through L Transpose\r\n                i = (size-1);\r\n                for (; i >= 0; i--) {\r\n                    val = bd[i];\r\n                    j = (i + 1);\r\n                    cs = (j * size);\r\n                    for (; j < size; j++) {\r\n                        val -= ad[(cs + i)] * bd[j];\r\n                        cs = (cs + size);\r\n                    }\r\n                    bd[i] = val;\r\n                }\r\n\r\n                return 1;\r\n            },\r\n\r\n            svd_decompose: function(A, W, U, V, options) {\r\n                if (typeof options === \"undefined\") { options = 0; };\r\n                var at=0,i=0,j=0,_m=A.rows,_n=A.cols,m=_m,n=_n;\r\n                var dt = A.type | jsfeat.C1_t; // we only work with single channel\r\n\r\n                if(m < n) {\r\n                    at = 1;\r\n                    i = m;\r\n                    m = n;\r\n                    n = i;\r\n                }\r\n\r\n                var a_buff = jsfeat.cache.get_buffer((m*m)<<3);\r\n                var w_buff = jsfeat.cache.get_buffer(n<<3);\r\n                var v_buff = jsfeat.cache.get_buffer((n*n)<<3);\r\n\r\n                var a_mt = new jsfeat.matrix_t(m, m, dt, a_buff.data);\r\n                var w_mt = new jsfeat.matrix_t(1, n, dt, w_buff.data);\r\n                var v_mt = new jsfeat.matrix_t(n, n, dt, v_buff.data);\r\n\r\n                if(at == 0) {\r\n                    // transpose\r\n                    jsfeat.matmath.transpose(a_mt, A);\r\n                } else {\r\n                    for(i = 0; i < _n*_m; i++) {\r\n                        a_mt.data[i] = A.data[i];\r\n                    }\r\n                    for(; i < n*m; i++) {\r\n                        a_mt.data[i] = 0;\r\n                    }\r\n                }\r\n\r\n                JacobiSVDImpl(a_mt.data, m, w_mt.data, v_mt.data, n, m, n, m);\r\n\r\n                if(W) {\r\n                    for(i=0; i < n; i++) {\r\n                        W.data[i] = w_mt.data[i];\r\n                    }\r\n                    for(; i < _n; i++) {\r\n                        W.data[i] = 0;\r\n                    }\r\n                }\r\n\r\n                if (at == 0) {\r\n                    if(U && (options & jsfeat.SVD_U_T)) {\r\n                        i = m*m;\r\n                        while(--i >= 0) {\r\n                            U.data[i] = a_mt.data[i];\r\n                        }\r\n                    } else if(U) {\r\n                        jsfeat.matmath.transpose(U, a_mt);\r\n                    }\r\n\r\n                    if(V && (options & jsfeat.SVD_V_T)) {\r\n                        i = n*n;\r\n                        while(--i >= 0) {\r\n                            V.data[i] = v_mt.data[i];\r\n                        }\r\n                    } else if(V) {\r\n                        jsfeat.matmath.transpose(V, v_mt);\r\n                    }\r\n                } else {\r\n                    if(U && (options & jsfeat.SVD_U_T)) {\r\n                        i = n*n;\r\n                        while(--i >= 0) {\r\n                            U.data[i] = v_mt.data[i];\r\n                        }\r\n                    } else if(U) {\r\n                        jsfeat.matmath.transpose(U, v_mt);\r\n                    }\r\n\r\n                    if(V && (options & jsfeat.SVD_V_T)) {\r\n                        i = m*m;\r\n                        while(--i >= 0) {\r\n                            V.data[i] = a_mt.data[i];\r\n                        }\r\n                    } else if(V) {\r\n                        jsfeat.matmath.transpose(V, a_mt);\r\n                    }\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(a_buff);\r\n                jsfeat.cache.put_buffer(w_buff);\r\n                jsfeat.cache.put_buffer(v_buff);\r\n\r\n            },\r\n\r\n            svd_solve: function(A, X, B) {\r\n                var i=0,j=0,k=0;\r\n                var pu=0,pv=0;\r\n                var nrows=A.rows,ncols=A.cols;\r\n                var sum=0.0,xsum=0.0,tol=0.0;\r\n                var dt = A.type | jsfeat.C1_t;\r\n\r\n                var u_buff = jsfeat.cache.get_buffer((nrows*nrows)<<3);\r\n                var w_buff = jsfeat.cache.get_buffer(ncols<<3);\r\n                var v_buff = jsfeat.cache.get_buffer((ncols*ncols)<<3);\r\n\r\n                var u_mt = new jsfeat.matrix_t(nrows, nrows, dt, u_buff.data);\r\n                var w_mt = new jsfeat.matrix_t(1, ncols, dt, w_buff.data);\r\n                var v_mt = new jsfeat.matrix_t(ncols, ncols, dt, v_buff.data);\r\n\r\n                var bd = B.data, ud = u_mt.data, wd = w_mt.data, vd = v_mt.data;\r\n\r\n                this.svd_decompose(A, w_mt, u_mt, v_mt, 0);\r\n\r\n                tol = jsfeat.EPSILON * wd[0] * ncols;\r\n\r\n                for (; i < ncols; i++, pv += ncols) {\r\n                    xsum = 0.0;\r\n                    for(j = 0; j < ncols; j++) {\r\n                        if(wd[j] > tol) {\r\n                            for(k = 0, sum = 0.0, pu = 0; k < nrows; k++, pu += ncols) {\r\n                                sum += ud[pu + j] * bd[k];\r\n                            }\r\n                            xsum += sum * vd[pv + j] / wd[j];\r\n                        }\r\n                    }\r\n                    X.data[i] = xsum;\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(u_buff);\r\n                jsfeat.cache.put_buffer(w_buff);\r\n                jsfeat.cache.put_buffer(v_buff);\r\n            },\r\n\r\n            svd_invert: function(Ai, A) {\r\n                var i=0,j=0,k=0;\r\n                var pu=0,pv=0,pa=0;\r\n                var nrows=A.rows,ncols=A.cols;\r\n                var sum=0.0,tol=0.0;\r\n                var dt = A.type | jsfeat.C1_t;\r\n\r\n                var u_buff = jsfeat.cache.get_buffer((nrows*nrows)<<3);\r\n                var w_buff = jsfeat.cache.get_buffer(ncols<<3);\r\n                var v_buff = jsfeat.cache.get_buffer((ncols*ncols)<<3);\r\n\r\n                var u_mt = new jsfeat.matrix_t(nrows, nrows, dt, u_buff.data);\r\n                var w_mt = new jsfeat.matrix_t(1, ncols, dt, w_buff.data);\r\n                var v_mt = new jsfeat.matrix_t(ncols, ncols, dt, v_buff.data);\r\n\r\n                var id = Ai.data, ud = u_mt.data, wd = w_mt.data, vd = v_mt.data;\r\n\r\n                this.svd_decompose(A, w_mt, u_mt, v_mt, 0);\r\n\r\n                tol = jsfeat.EPSILON * wd[0] * ncols;\r\n\r\n                for (; i < ncols; i++, pv += ncols) {\r\n                    for (j = 0, pu = 0; j < nrows; j++, pa++) {\r\n                        for (k = 0, sum = 0.0; k < ncols; k++, pu++) {\r\n                            if (wd[k] > tol) sum += vd[pv + k] * ud[pu] / wd[k];\r\n                        }\r\n                        id[pa] = sum;\r\n                    }\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(u_buff);\r\n                jsfeat.cache.put_buffer(w_buff);\r\n                jsfeat.cache.put_buffer(v_buff);\r\n            },\r\n\r\n            eigenVV: function(A, vects, vals) {\r\n                var n=A.cols,i=n*n;\r\n                var dt = A.type | jsfeat.C1_t;\r\n\r\n                var a_buff = jsfeat.cache.get_buffer((n*n)<<3);\r\n                var w_buff = jsfeat.cache.get_buffer(n<<3);\r\n                var a_mt = new jsfeat.matrix_t(n, n, dt, a_buff.data);\r\n                var w_mt = new jsfeat.matrix_t(1, n, dt, w_buff.data);\r\n\r\n                while(--i >= 0) {\r\n                    a_mt.data[i] = A.data[i];\r\n                }\r\n\r\n                JacobiImpl(a_mt.data, n, w_mt.data, vects ? vects.data : null, n, n);\r\n\r\n                if(vals) {\r\n                    while(--n >= 0) {\r\n                        vals.data[n] = w_mt.data[n];\r\n                    }\r\n                }\r\n\r\n                jsfeat.cache.put_buffer(a_buff);\r\n                jsfeat.cache.put_buffer(w_buff);\r\n            }\r\n\r\n        };\r\n\r\n    })();\r\n\r\n    global.linalg = linalg;\r\n\r\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var motion_model = (function() {\n\n    \tvar sqr = function(x) {\n    \t\treturn x*x;\n    \t}\n\n    \t// does isotropic normalization\n    \tvar iso_normalize_points = function(from, to, T0, T1, count) {\n\t\t\tvar i=0;\n\t\t    var cx0=0.0, cy0=0.0, d0=0.0, s0=0.0;\n\t\t    var cx1=0.0, cy1=0.0, d1=0.0, s1=0.0;\n\t\t    var dx=0.0,dy=0.0;\n\n\t\t    for (; i < count; ++i) {\n\t\t        cx0 += from[i].x;\n\t\t        cy0 += from[i].y;\n\t\t        cx1 += to[i].x;\n\t\t        cy1 += to[i].y;\n\t\t    }\n\n\t\t    cx0 /= count; cy0 /= count;\n\t\t    cx1 /= count; cy1 /= count;\n\n\t\t    for (i = 0; i < count; ++i) {\n\t\t        dx = from[i].x - cx0;\n\t\t        dy = from[i].y - cy0;\n\t\t        d0 += Math.sqrt(dx*dx + dy*dy);\n\t\t        dx = to[i].x - cx1;\n\t\t        dy = to[i].y - cy1;\n\t\t        d1 += Math.sqrt(dx*dx + dy*dy);\n\t\t    }\n\n\t\t    d0 /= count; d1 /= count;\n\n\t\t    s0 = Math.SQRT2 / d0; s1 = Math.SQRT2 / d1;\n\n\t\t    T0[0] = T0[4] = s0;\n\t\t    T0[2] = -cx0*s0;\n\t\t    T0[5] = -cy0*s0;\n\t\t    T0[1] = T0[3] = T0[6] = T0[7] = 0.0;\n\t\t    T0[8] = 1.0;\n\n\t\t    T1[0] = T1[4] = s1;\n\t\t    T1[2] = -cx1*s1;\n\t\t    T1[5] = -cy1*s1;\n\t\t    T1[1] = T1[3] = T1[6] = T1[7] = 0.0;\n\t\t    T1[8] = 1.0;\n\t\t}\n\n\t\tvar have_collinear_points = function(points, count) {\n\t\t    var j=0,k=0,i=(count-1)|0;\n\t\t    var dx1=0.0,dy1=0.0,dx2=0.0,dy2=0.0;\n\n\t\t    // check that the i-th selected point does not belong\n\t\t    // to a line connecting some previously selected points\n\t\t    for(; j < i; ++j) {\n\t\t        dx1 = points[j].x - points[i].x;\n\t\t        dy1 = points[j].y - points[i].y;\n\t\t        for(k = 0; k < j; ++k) {\n\t\t            dx2 = points[k].x - points[i].x;\n\t\t            dy2 = points[k].y - points[i].y;\n\t\t            if( Math.abs(dx2*dy1 - dy2*dx1) <= jsfeat.EPSILON*(Math.abs(dx1) + Math.abs(dy1) + Math.abs(dx2) + Math.abs(dy2)))\n\t\t                return true;\n\t\t        }\n\t\t    }\n\t\t    return false;\n\t\t}\n\n\t\tvar T0 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n    \tvar T1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n    \tvar AtA = new jsfeat.matrix_t(6, 6, jsfeat.F32_t|jsfeat.C1_t);\n    \tvar AtB = new jsfeat.matrix_t(6, 1, jsfeat.F32_t|jsfeat.C1_t);\n    \t\n    \tvar affine2d = (function () {\n\n\t        function affine2d() {\n\t        \t// empty constructor\n\t        }\n\n\t        affine2d.prototype.run = function(from, to, model, count) {\n\t        \tvar i=0,j=0;\n\t        \tvar dt=model.type|jsfeat.C1_t;\n\t        \tvar md=model.data, t0d=T0.data, t1d=T1.data;\n\t        \tvar pt0,pt1,px=0.0,py=0.0;\n\n\t            iso_normalize_points(from, to, t0d, t1d, count);\n\n\t            var a_buff = jsfeat.cache.get_buffer((2*count*6)<<3);\n                var b_buff = jsfeat.cache.get_buffer((2*count)<<3);\n\n                var a_mt = new jsfeat.matrix_t(6, 2*count, dt, a_buff.data);\n                var b_mt = new jsfeat.matrix_t(1, 2*count, dt, b_buff.data);\n                var ad=a_mt.data, bd=b_mt.data;\n\n\t\t\t    for (; i < count; ++i) {\n\t\t\t    \tpt0 = from[i];\n\t\t\t        pt1 = to[i];\n\n\t\t\t        px = t0d[0]*pt0.x + t0d[1]*pt0.y + t0d[2];\n\t\t\t        py = t0d[3]*pt0.x + t0d[4]*pt0.y + t0d[5];\n\n\t\t\t        j = i*2*6;\n\t\t\t        ad[j]=px, ad[j+1]=py, ad[j+2]=1.0, ad[j+3]=0.0, ad[j+4]=0.0, ad[j+5]=0.0;\n\n\t\t\t        j += 6;\n\t\t\t        ad[j]=0.0, ad[j+1]=0.0, ad[j+2]=0.0, ad[j+3]=px, ad[j+4]=py, ad[j+5]=1.0;\n\n\t\t\t        bd[i<<1] = t1d[0]*pt1.x + t1d[1]*pt1.y + t1d[2];\n\t\t\t        bd[(i<<1)+1] = t1d[3]*pt1.x + t1d[4]*pt1.y + t1d[5];\n\t\t\t    }\n\n\t\t\t    jsfeat.matmath.multiply_AtA(AtA, a_mt);\n\t\t\t    jsfeat.matmath.multiply_AtB(AtB, a_mt, b_mt);\n\n\t\t\t    jsfeat.linalg.lu_solve(AtA, AtB);\n\n\t\t\t    md[0] = AtB.data[0], md[1]=AtB.data[1], md[2]=AtB.data[2];\n\t\t\t    md[3] = AtB.data[3], md[4]=AtB.data[4], md[5]=AtB.data[5];\n\t\t\t    md[6] = 0.0, md[7] = 0.0, md[8] = 1.0; // fill last row\n\n\t\t\t    // denormalize\n\t\t\t    jsfeat.matmath.invert_3x3(T1, T1);\n\t\t\t    jsfeat.matmath.multiply_3x3(model, T1, model);\n\t\t\t    jsfeat.matmath.multiply_3x3(model, model, T0);\n\n\t\t\t    // free buffer\n\t\t\t    jsfeat.cache.put_buffer(a_buff);\n\t\t\t    jsfeat.cache.put_buffer(b_buff);\n\n\t\t\t    return 1;\n\t        }\n\n\t        affine2d.prototype.error = function(from, to, model, err, count) {\n\t        \tvar i=0;\n\t        \tvar pt0,pt1;\n\t        \tvar m=model.data;\n\n\t\t\t    for (; i < count; ++i) {\n\t\t\t        pt0 = from[i];\n\t\t\t        pt1 = to[i];\n\n\t\t\t        err[i] = sqr(pt1.x - m[0]*pt0.x - m[1]*pt0.y - m[2]) +\n\t\t\t                 sqr(pt1.y - m[3]*pt0.x - m[4]*pt0.y - m[5]);\n\t\t\t    }\n\t        }\n\n\t        affine2d.prototype.check_subset = function(from, to, count) {\n\t            return true; // all good\n\t        }\n\n\t        return affine2d;\n\t    })();\n\n\t    var mLtL = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n\t    var Evec = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n\n\t    var homography2d = (function () {\n\n\t        function homography2d() {\n\t        \t// empty constructor\n\t        \t//this.T0 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n\t        \t//this.T1 = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n\t        \t//this.mLtL = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n\t        \t//this.Evec = new jsfeat.matrix_t(9, 9, jsfeat.F32_t|jsfeat.C1_t);\n\t        }\n\n\t        homography2d.prototype.run = function(from, to, model, count) {\n\t        \tvar i=0,j=0;\n\t        \tvar md=model.data, t0d=T0.data, t1d=T1.data;\n\t        \tvar LtL=mLtL.data, evd=Evec.data;\n\t        \tvar x=0.0,y=0.0,X=0.0,Y=0.0;\n\n\t\t\t    // norm\n\t\t\t\tvar smx=0.0, smy=0.0, cmx=0.0, cmy=0.0, sMx=0.0, sMy=0.0, cMx=0.0, cMy=0.0;\n\n\t\t\t\tfor(; i < count; ++i) {\n\t\t\t\t    cmx += to[i].x;\n\t\t\t\t    cmy += to[i].y;\n\t\t\t\t    cMx += from[i].x;\n\t\t\t\t    cMy += from[i].y;\n\t\t\t\t}\n\n\t\t\t    cmx /= count; cmy /= count;\n\t\t\t    cMx /= count; cMy /= count;\n\n\t\t\t    for(i = 0; i < count; ++i)\n\t\t\t    {\n\t\t\t\t    smx += Math.abs(to[i].x - cmx);\n\t\t\t\t    smy += Math.abs(to[i].y - cmy);\n\t\t\t\t    sMx += Math.abs(from[i].x - cMx);\n\t\t\t\t    sMy += Math.abs(from[i].y - cMy);\n\t\t\t\t}\n\n\t\t\t    if( Math.abs(smx) < jsfeat.EPSILON \n\t\t\t    \t|| Math.abs(smy) < jsfeat.EPSILON \n\t\t\t    \t|| Math.abs(sMx) < jsfeat.EPSILON \n\t\t\t    \t|| Math.abs(sMy) < jsfeat.EPSILON ) return 0;\n\n\t\t\t    smx = count/smx; smy = count/smy;\n\t\t\t    sMx = count/sMx; sMy = count/sMy;\n\n\t\t\t    t0d[0] = sMx; \tt0d[1] = 0; \tt0d[2] = -cMx*sMx; \n\t\t\t    t0d[3] = 0; \tt0d[4] = sMy; \tt0d[5] = -cMy*sMy; \n\t\t\t    t0d[6] = 0; \tt0d[7] = 0; \tt0d[8] = 1;\n\n\t\t\t\tt1d[0] = 1.0/smx; \tt1d[1] = 0; \t\tt1d[2] = cmx;\n\t\t\t\tt1d[3] = 0; \t\tt1d[4] = 1.0/smy; \tt1d[5] = cmy;\n\t\t\t\tt1d[6] = 0; \t\tt1d[7] = 0; \t\tt1d[8] = 1;\n\t\t\t\t//\n\n\t\t\t\t// construct system\n\t\t\t\ti = 81;\n\t\t\t\twhile(--i >= 0) {\n\t\t\t\t\tLtL[i] = 0.0;\n\t\t\t\t}\n\t\t\t\tfor(i = 0; i < count; ++i) {\n\t\t\t\t\tx = (to[i].x - cmx) * smx;\n\t\t\t\t\ty = (to[i].y - cmy) * smy;\n\t\t\t\t\tX = (from[i].x - cMx) * sMx;\n\t\t\t\t\tY = (from[i].y - cMy) * sMy;\n\n\t\t\t\t\tLtL[0] += X*X;\n\t\t\t\t\tLtL[1] += X*Y;\n\t\t\t\t\tLtL[2] += X;\n\n\t\t\t\t\tLtL[6] += X*-x*X;\n\t\t\t\t\tLtL[7] += X*-x*Y;\n\t\t\t\t\tLtL[8] += X*-x;\n\t\t\t\t\tLtL[10] += Y*Y;\n\t\t\t\t\tLtL[11] += Y;\n\n\t\t\t\t\tLtL[15] += Y*-x*X;\n\t\t\t\t\tLtL[16] += Y*-x*Y;\n\t\t\t\t\tLtL[17] += Y*-x;\n\t\t\t\t\tLtL[20] += 1.0;\n\n\t\t\t\t\tLtL[24] += -x*X;\n\t\t\t\t\tLtL[25] += -x*Y;\n\t\t\t\t\tLtL[26] += -x;\n\t\t\t\t\tLtL[30] += X*X;\n\t\t\t\t\tLtL[31] += X*Y;\n\t\t\t\t\tLtL[32] += X;\n\t\t\t\t\tLtL[33] += X*-y*X;\n\t\t\t\t\tLtL[34] += X*-y*Y;\n\t\t\t\t\tLtL[35] += X*-y;\n\t\t\t\t\tLtL[40] += Y*Y;\n\t\t\t\t\tLtL[41] += Y;\n\t\t\t\t\tLtL[42] += Y*-y*X;\n\t\t\t\t\tLtL[43] += Y*-y*Y;\n\t\t\t\t\tLtL[44] += Y*-y;\n\t\t\t\t\tLtL[50] += 1.0;\n\t\t\t\t\tLtL[51] += -y*X;\n\t\t\t\t\tLtL[52] += -y*Y;\n\t\t\t\t\tLtL[53] += -y;\n\t\t\t\t\tLtL[60] += -x*X*-x*X + -y*X*-y*X;\n\t\t\t\t\tLtL[61] += -x*X*-x*Y + -y*X*-y*Y;\n\t\t\t\t\tLtL[62] += -x*X*-x + -y*X*-y;\n\t\t\t\t\tLtL[70] += -x*Y*-x*Y + -y*Y*-y*Y;\n\t\t\t\t\tLtL[71] += -x*Y*-x + -y*Y*-y;\n\t\t\t\t\tLtL[80] += -x*-x + -y*-y;\n\t\t\t\t}\n\t\t\t\t//\n\n\t\t\t\t// symmetry\n\t\t\t    for(i = 0; i < 9; ++i) {\n\t\t\t        for(j = 0; j < i; ++j)\n\t\t\t            LtL[i*9+j] = LtL[j*9+i];\n\t\t\t    }\n\n\t\t\t\tjsfeat.linalg.eigenVV(mLtL, Evec);\n\n\t\t\t\tmd[0]=evd[72], md[1]=evd[73], md[2]=evd[74];\n\t\t\t    md[3]=evd[75], md[4]=evd[76], md[5]=evd[77];\n\t\t\t    md[6]=evd[78], md[7]=evd[79], md[8]=evd[80];\n\n\t\t\t\t// denormalize\n\t\t\t    jsfeat.matmath.multiply_3x3(model, T1, model);\n\t\t\t    jsfeat.matmath.multiply_3x3(model, model, T0);\n\n\t\t\t    // set bottom right to 1.0\n\t\t\t    x = 1.0/md[8];\n\t\t\t    md[0] *= x; md[1] *= x; md[2] *= x;\n\t\t\t    md[3] *= x; md[4] *= x; md[5] *= x;\n\t\t\t    md[6] *= x; md[7] *= x; md[8] = 1.0;\n\n\t\t\t    return 1;\n\t        }\n\n\t        homography2d.prototype.error = function(from, to, model, err, count) {\n\t        \tvar i=0;\n\t        \tvar pt0,pt1,ww=0.0,dx=0.0,dy=0.0;\n\t        \tvar m=model.data;\n\n\t\t\t    for (; i < count; ++i) {\n\t\t\t        pt0 = from[i];\n\t\t\t        pt1 = to[i];\n\n\t\t\t        ww = 1.0/(m[6]*pt0.x + m[7]*pt0.y + 1.0);\n\t\t\t        dx = (m[0]*pt0.x + m[1]*pt0.y + m[2])*ww - pt1.x;\n\t\t\t        dy = (m[3]*pt0.x + m[4]*pt0.y + m[5])*ww - pt1.y;\n\t\t\t        err[i] = (dx*dx + dy*dy);\n\t\t\t    }\n\t        }\n\n\t        homography2d.prototype.check_subset = function(from, to, count) {\n\t        \t// seems to reject good subsets actually\n\t        \t//if( have_collinear_points(from, count) || have_collinear_points(to, count) ) {\n        \t\t\t//return false;\n        \t\t//}\n        \t\tif( count == 4 ) {\n\t\t\t        var negative = 0;\n\n\t\t\t        var fp0=from[0],fp1=from[1],fp2=from[2],fp3=from[3];\n\t\t\t        var tp0=to[0],tp1=to[1],tp2=to[2],tp3=to[3];\n\n\t\t\t        // set1\n\t\t\t        var A11=fp0.x, A12=fp0.y, A13=1.0;\n\t\t\t        var A21=fp1.x, A22=fp1.y, A23=1.0;\n\t\t\t        var A31=fp2.x, A32=fp2.y, A33=1.0;\n\n\t\t\t        var B11=tp0.x, B12=tp0.y, B13=1.0;\n\t\t\t        var B21=tp1.x, B22=tp1.y, B23=1.0;\n\t\t\t        var B31=tp2.x, B32=tp2.y, B33=1.0;\n\n\t\t\t        var detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);\n\t\t\t\t\tvar detB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);\n\n\t\t\t\t\tif(detA*detB < 0) negative++;\n\n\t\t\t\t\t// set2\n\t\t\t\t\tA11=fp1.x, A12=fp1.y;\n\t\t\t        A21=fp2.x, A22=fp2.y;\n\t\t\t        A31=fp3.x, A32=fp3.y;\n\n\t\t\t        B11=tp1.x, B12=tp1.y;\n\t\t\t        B21=tp2.x, B22=tp2.y;\n\t\t\t        B31=tp3.x, B32=tp3.y;\n\n\t\t\t        detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);\n\t\t\t\t\tdetB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);\n\n\t\t\t\t\tif(detA*detB < 0) negative++;\n\n\t\t\t\t\t// set3\n\t\t\t\t\tA11=fp0.x, A12=fp0.y;\n\t\t\t        A21=fp2.x, A22=fp2.y;\n\t\t\t        A31=fp3.x, A32=fp3.y;\n\n\t\t\t        B11=tp0.x, B12=tp0.y;\n\t\t\t        B21=tp2.x, B22=tp2.y;\n\t\t\t        B31=tp3.x, B32=tp3.y;\n\n\t\t\t        detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);\n\t\t\t\t\tdetB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);\n\n\t\t\t\t\tif(detA*detB < 0) negative++;\n\n\t\t\t\t\t// set4\n\t\t\t\t\tA11=fp0.x, A12=fp0.y;\n\t\t\t        A21=fp1.x, A22=fp1.y;\n\t\t\t        A31=fp3.x, A32=fp3.y;\n\n\t\t\t        B11=tp0.x, B12=tp0.y;\n\t\t\t        B21=tp1.x, B22=tp1.y;\n\t\t\t        B31=tp3.x, B32=tp3.y;\n\n\t\t\t        detA = jsfeat.matmath.determinant_3x3(A11,A12,A13, A21,A22,A23, A31,A32,A33);\n\t\t\t\t\tdetB = jsfeat.matmath.determinant_3x3(B11,B12,B13, B21,B22,B23, B31,B32,B33);\n\n\t\t\t\t\tif(detA*detB < 0) negative++;\n\n\t\t\t        if(negative != 0 && negative != 4) {\n\t\t\t        \treturn false;\n\t\t\t        }\n\t\t\t    }\n\t            return true; // all good\n\t        }\n\n\t        return homography2d;\n\t    })();\n\n\t    return {\n\n    \t\taffine2d:affine2d,\n    \t\thomography2d:homography2d\n\n    \t};\n\n    })();\n\n    var ransac_params_t = (function () {\n        function ransac_params_t(size, thresh, eps, prob) {\n            if (typeof size === \"undefined\") { size=0; }\n            if (typeof thresh === \"undefined\") { thresh=0.5; }\n            if (typeof eps === \"undefined\") { eps=0.5; }\n            if (typeof prob === \"undefined\") { prob=0.99; }\n\n            this.size = size;\n            this.thresh = thresh;\n            this.eps = eps;\n            this.prob = prob;\n        };\n        ransac_params_t.prototype.update_iters = function(_eps, max_iters) {\n\t        var num = Math.log(1 - this.prob);\n\t        var denom = Math.log(1 - Math.pow(1 - _eps, this.size));\n\t        return (denom >= 0 || -num >= max_iters*(-denom) ? max_iters : Math.round(num/denom))|0;\n        };\n        return ransac_params_t;\n    })();\n\n    var motion_estimator = (function() {\n\n    \tvar get_subset = function(kernel, from, to, need_cnt, max_cnt, from_sub, to_sub) {\n    \t\tvar max_try = 1000;\n    \t\tvar indices = [];\n\t\t    var i=0, j=0, ssiter=0, idx_i=0, ok=false;\n\t\t    for(; ssiter < max_try; ++ssiter)  {\n\t\t        i = 0;\n\t\t        for (; i < need_cnt && ssiter < max_try;) {\n\t\t            ok = false;\n\t\t            idx_i = 0;\n\t\t            while (!ok) {\n\t\t                ok = true;\n\t\t                idx_i = indices[i] = Math.floor(Math.random() * max_cnt)|0;\n\t\t                for (j = 0; j < i; ++j) {\n\t\t                    if (idx_i == indices[j])\n\t\t                    { ok = false; break; }\n\t\t                }\n\t\t            }\n\t\t            from_sub[i] = from[idx_i];\n\t\t            to_sub[i] = to[idx_i];\n\t\t            if( !kernel.check_subset( from_sub, to_sub, i+1 ) ) {\n\t\t                ssiter++;\n\t\t                continue;\n\t\t            }\n\t\t            ++i;\n\t\t        }\n\t\t        break;\n\t\t    }\n\n\t\t    return (i == need_cnt && ssiter < max_try);\n    \t}\n\n    \tvar find_inliers = function(kernel, model, from, to, count, thresh, err, mask) {\n    \t\tvar numinliers = 0, i=0, f=0;\n    \t\tvar t = thresh*thresh;\n\n    \t\tkernel.error(from, to, model, err, count);\n\n\t\t    for(; i < count; ++i) {\n\t\t        f = err[i] <= t;\n\t\t        mask[i] = f;\n\t\t        numinliers += f;\n\t\t    }\n\t\t    return numinliers;\n    \t}\n\n    \treturn {\n\n    \t\transac: function(params, kernel, from, to, count, model, mask, max_iters) {\n    \t\t\tif (typeof max_iters === \"undefined\") { max_iters=1000; }\n\n    \t\t\tif(count < params.size) return false;\n\n    \t\t\tvar model_points = params.size;\n\t\t\t    var niters = max_iters, iter=0;\n\t\t\t    var result = false;\n\n\t\t\t    var subset0 = [];\n\t\t\t    var subset1 = [];\n\t\t\t    var found = false;\n\n\t\t\t    var mc=model.cols,mr=model.rows;\n                var dt = model.type | jsfeat.C1_t;\n\n\t\t\t    var m_buff = jsfeat.cache.get_buffer((mc*mr)<<3);\n\t\t\t    var ms_buff = jsfeat.cache.get_buffer(count);\n\t\t\t    var err_buff = jsfeat.cache.get_buffer(count<<2);\n\t\t\t    var M = new jsfeat.matrix_t(mc, mr, dt, m_buff.data);\n\t\t\t    var curr_mask = new jsfeat.matrix_t(count, 1, jsfeat.U8C1_t, ms_buff.data);\n\n\t\t\t    var inliers_max = -1, numinliers=0;\n\t\t\t    var nmodels = 0;\n\n\t\t\t    var err = err_buff.f32;\n\n\t\t\t    // special case\n\t\t\t    if(count == model_points) {\n\t\t\t        if(kernel.run(from, to, M, count) <= 0) {\n\t\t\t        \tjsfeat.cache.put_buffer(m_buff);\n\t\t\t        \tjsfeat.cache.put_buffer(ms_buff);\n\t\t\t        \tjsfeat.cache.put_buffer(err_buff);\n\t\t\t        \treturn false;\n\t\t\t        }\n\n\t\t\t        M.copy_to(model);\n\t\t\t        if(mask) {\n\t\t\t        \twhile(--count >= 0) {\n\t\t\t        \t\tmask.data[count] = 1;\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        jsfeat.cache.put_buffer(m_buff);\n\t\t\t        jsfeat.cache.put_buffer(ms_buff);\n\t\t\t        jsfeat.cache.put_buffer(err_buff);\n\t\t\t        return true;\n\t\t\t    }\n\n\t\t\t    for (; iter < niters; ++iter) {\n\t\t\t        // generate subset\n\t\t\t        found = get_subset(kernel, from, to, model_points, count, subset0, subset1);\n\t\t\t        if(!found) {\n\t\t\t            if(iter == 0) {\n\t\t\t            \tjsfeat.cache.put_buffer(m_buff);\n\t\t\t            \tjsfeat.cache.put_buffer(ms_buff);\n\t\t\t            \tjsfeat.cache.put_buffer(err_buff);\n\t\t\t                return false;\n\t\t\t            }\n\t\t\t            break;\n\t\t\t        }\n\n\t\t\t        nmodels = kernel.run( subset0, subset1, M, model_points );\n\t\t\t        if(nmodels <= 0)\n\t\t\t            continue;\n\n\t\t\t        // TODO handle multimodel output\n\n\t\t\t        numinliers = find_inliers(kernel, M, from, to, count, params.thresh, err, curr_mask.data);\n\n\t\t\t        if( numinliers > Math.max(inliers_max, model_points-1) ) {\n\t\t\t            M.copy_to(model);\n\t\t\t            inliers_max = numinliers;\n\t\t\t            if(mask) curr_mask.copy_to(mask);\n\t\t\t            niters = params.update_iters((count - numinliers)/count, niters);\n\t\t\t            result = true;\n\t\t\t        }\n\t\t\t    }\n\n\t\t\t    jsfeat.cache.put_buffer(m_buff);\n\t\t\t    jsfeat.cache.put_buffer(ms_buff);\n\t\t\t    jsfeat.cache.put_buffer(err_buff);\n\n\t\t\t    return result;\n    \t\t},\n\n    \t\tlmeds: function(params, kernel, from, to, count, model, mask, max_iters) {\n    \t\t\tif (typeof max_iters === \"undefined\") { max_iters=1000; }\n\n    \t\t\tif(count < params.size) return false;\n\n    \t\t\tvar model_points = params.size;\n\t\t\t    var niters = max_iters, iter=0;\n\t\t\t    var result = false;\n\n\t\t\t    var subset0 = [];\n\t\t\t    var subset1 = [];\n\t\t\t    var found = false;\n\n\t\t\t    var mc=model.cols,mr=model.rows;\n                var dt = model.type | jsfeat.C1_t;\n\n\t\t\t    var m_buff = jsfeat.cache.get_buffer((mc*mr)<<3);\n\t\t\t    var ms_buff = jsfeat.cache.get_buffer(count);\n\t\t\t    var err_buff = jsfeat.cache.get_buffer(count<<2);\n\t\t\t    var M = new jsfeat.matrix_t(mc, mr, dt, m_buff.data);\n\t\t\t    var curr_mask = new jsfeat.matrix_t(count, 1, jsfeat.U8_t|jsfeat.C1_t, ms_buff.data);\n\n\t\t\t    var numinliers=0;\n\t\t\t    var nmodels = 0;\n\n\t\t\t    var err = err_buff.f32;\n\t\t\t    var min_median = 1000000000.0, sigma=0.0, median=0.0;\n\n\t\t\t    params.eps = 0.45;\n\t\t\t    niters = params.update_iters(params.eps, niters);\n\n\t\t\t    // special case\n\t\t\t    if(count == model_points) {\n\t\t\t        if(kernel.run(from, to, M, count) <= 0) {\n\t\t\t        \tjsfeat.cache.put_buffer(m_buff);\n\t\t\t        \tjsfeat.cache.put_buffer(ms_buff);\n\t\t\t        \tjsfeat.cache.put_buffer(err_buff);\n\t\t\t        \treturn false;\n\t\t\t        }\n\n\t\t\t        M.copy_to(model);\n\t\t\t        if(mask) {\n\t\t\t        \twhile(--count >= 0) {\n\t\t\t        \t\tmask.data[count] = 1;\n\t\t\t        \t}\n\t\t\t        }\n\t\t\t        jsfeat.cache.put_buffer(m_buff);\n\t\t\t        jsfeat.cache.put_buffer(ms_buff);\n\t\t\t        jsfeat.cache.put_buffer(err_buff);\n\t\t\t        return true;\n\t\t\t    }\n\n\t\t\t    for (; iter < niters; ++iter) {\n\t\t\t        // generate subset\n\t\t\t        found = get_subset(kernel, from, to, model_points, count, subset0, subset1);\n\t\t\t        if(!found) {\n\t\t\t            if(iter == 0) {\n\t\t\t            \tjsfeat.cache.put_buffer(m_buff);\n\t\t\t            \tjsfeat.cache.put_buffer(ms_buff);\n\t\t\t            \tjsfeat.cache.put_buffer(err_buff);\n\t\t\t                return false;\n\t\t\t            }\n\t\t\t            break;\n\t\t\t        }\n\n\t\t\t        nmodels = kernel.run( subset0, subset1, M, model_points );\n\t\t\t        if(nmodels <= 0)\n\t\t\t            continue;\n\n\t\t\t        // TODO handle multimodel output\n\n\t\t\t        kernel.error(from, to, M, err, count);\n\t\t\t        median = jsfeat.math.median(err, 0, count-1);\n\n\t\t\t        if(median < min_median) {\n\t\t\t            min_median = median;\n\t\t\t            M.copy_to(model);\n\t\t\t            result = true;\n\t\t\t        }\n\t\t\t    }\n\n\t\t\t    if(result) {\n\t\t\t        sigma = 2.5*1.4826*(1 + 5.0/(count - model_points))*Math.sqrt(min_median);\n\t\t\t        sigma = Math.max(sigma, 0.001);\n\n\t\t\t        numinliers = find_inliers(kernel, model, from, to, count, sigma, err, curr_mask.data);\n\t\t\t        if(mask) curr_mask.copy_to(mask);\n\t\t\t        \n\t\t\t        result = numinliers >= model_points;\n\t\t\t    }\n\n\t\t\t    jsfeat.cache.put_buffer(m_buff);\n\t\t\t    jsfeat.cache.put_buffer(ms_buff);\n\t\t\t    jsfeat.cache.put_buffer(err_buff);\n\n\t\t\t    return result;\n    \t\t}\n\n    \t};\n\n    })();\n\n    global.ransac_params_t = ransac_params_t;\n    global.motion_model = motion_model;\n    global.motion_estimator = motion_estimator;\n\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var imgproc = (function() {\n\n        var _resample_u8 = function(src, dst, nw, nh) {\n            var xofs_count=0;\n            var ch=src.channel,w=src.cols,h=src.rows;\n            var src_d=src.data,dst_d=dst.data;\n            var scale_x = w / nw, scale_y = h / nh;\n            var inv_scale_256 = (scale_x * scale_y * 0x10000)|0;\n            var dx=0,dy=0,sx=0,sy=0,sx1=0,sx2=0,i=0,k=0,fsx1=0.0,fsx2=0.0;\n            var a=0,b=0,dxn=0,alpha=0,beta=0,beta1=0;\n\n            var buf_node = jsfeat.cache.get_buffer((nw*ch)<<2);\n            var sum_node = jsfeat.cache.get_buffer((nw*ch)<<2);\n            var xofs_node = jsfeat.cache.get_buffer((w*2*3)<<2);\n\n            var buf = buf_node.i32;\n            var sum = sum_node.i32;\n            var xofs = xofs_node.i32;\n\n            for (; dx < nw; dx++) {\n                fsx1 = dx * scale_x, fsx2 = fsx1 + scale_x;\n                sx1 = (fsx1 + 1.0 - 1e-6)|0, sx2 = fsx2|0;\n                sx1 = Math.min(sx1, w - 1);\n                sx2 = Math.min(sx2, w - 1);\n\n                if(sx1 > fsx1) {\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = ((sx1 - 1)*ch)|0; \n                    xofs[k++] = ((sx1 - fsx1) * 0x100)|0;\n                    xofs_count++;\n                }\n                for(sx = sx1; sx < sx2; sx++){\n                    xofs_count++;\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = (sx * ch)|0;\n                    xofs[k++] = 256;\n                }\n                if(fsx2 - sx2 > 1e-3) {\n                    xofs_count++;\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = (sx2 * ch)|0;\n                    xofs[k++] = ((fsx2 - sx2) * 256)|0;\n                }\n            }\n\n            for (dx = 0; dx < nw * ch; dx++) {\n                buf[dx] = sum[dx] = 0;\n            }\n            dy = 0;\n            for (sy = 0; sy < h; sy++) {\n                a = w * sy;\n                for (k = 0; k < xofs_count; k++) {\n                    dxn = xofs[k*3];\n                    sx1 = xofs[k*3+1];\n                    alpha = xofs[k*3+2];\n                    for (i = 0; i < ch; i++) {\n                        buf[dxn + i] += src_d[a+sx1+i] * alpha;\n                    }\n                }\n                if ((dy + 1) * scale_y <= sy + 1 || sy == h - 1) {\n                    beta = (Math.max(sy + 1 - (dy + 1) * scale_y, 0.0) * 256)|0;\n                    beta1 = 256 - beta;\n                    b = nw * dy;\n                    if (beta <= 0) {\n                        for (dx = 0; dx < nw * ch; dx++) {\n                            dst_d[b+dx] = Math.min(Math.max((sum[dx] + buf[dx] * 256) / inv_scale_256, 0), 255);\n                            sum[dx] = buf[dx] = 0;\n                        }\n                    } else {\n                        for (dx = 0; dx < nw * ch; dx++) {\n                            dst_d[b+dx] = Math.min(Math.max((sum[dx] + buf[dx] * beta1) / inv_scale_256, 0), 255);\n                            sum[dx] = buf[dx] * beta;\n                            buf[dx] = 0;\n                        }\n                    }\n                    dy++;\n                } else {\n                    for(dx = 0; dx < nw * ch; dx++) {\n                        sum[dx] += buf[dx] * 256;\n                        buf[dx] = 0;\n                    }\n                }\n            }\n\n            jsfeat.cache.put_buffer(sum_node);\n            jsfeat.cache.put_buffer(buf_node);\n            jsfeat.cache.put_buffer(xofs_node);\n        }\n\n        var _resample = function(src, dst, nw, nh) {\n            var xofs_count=0;\n            var ch=src.channel,w=src.cols,h=src.rows;\n            var src_d=src.data,dst_d=dst.data;\n            var scale_x = w / nw, scale_y = h / nh;\n            var scale = 1.0 / (scale_x * scale_y);\n            var dx=0,dy=0,sx=0,sy=0,sx1=0,sx2=0,i=0,k=0,fsx1=0.0,fsx2=0.0;\n            var a=0,b=0,dxn=0,alpha=0.0,beta=0.0,beta1=0.0;\n\n            var buf_node = jsfeat.cache.get_buffer((nw*ch)<<2);\n            var sum_node = jsfeat.cache.get_buffer((nw*ch)<<2);\n            var xofs_node = jsfeat.cache.get_buffer((w*2*3)<<2);\n\n            var buf = buf_node.f32;\n            var sum = sum_node.f32;\n            var xofs = xofs_node.f32;\n\n            for (; dx < nw; dx++) {\n                fsx1 = dx * scale_x, fsx2 = fsx1 + scale_x;\n                sx1 = (fsx1 + 1.0 - 1e-6)|0, sx2 = fsx2|0;\n                sx1 = Math.min(sx1, w - 1);\n                sx2 = Math.min(sx2, w - 1);\n\n                if(sx1 > fsx1) {\n                    xofs_count++;\n                    xofs[k++] = ((sx1 - 1)*ch)|0;\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = (sx1 - fsx1) * scale;\n                }\n                for(sx = sx1; sx < sx2; sx++){\n                    xofs_count++;\n                    xofs[k++] = (sx * ch)|0;\n                    xofs[k++] = (dx * ch)|0; \n                    xofs[k++] = scale;\n                }\n                if(fsx2 - sx2 > 1e-3) {\n                    xofs_count++;\n                    xofs[k++] = (sx2 * ch)|0;\n                    xofs[k++] = (dx * ch)|0;\n                    xofs[k++] = (fsx2 - sx2) * scale;\n                }\n            }\n\n            for (dx = 0; dx < nw * ch; dx++) {\n                buf[dx] = sum[dx] = 0;\n            }\n            dy = 0;\n            for (sy = 0; sy < h; sy++) {\n                a = w * sy;\n                for (k = 0; k < xofs_count; k++) {\n                    sx1 = xofs[k*3]|0;\n                    dxn = xofs[k*3+1]|0;\n                    alpha = xofs[k*3+2];\n                    for (i = 0; i < ch; i++) {\n                        buf[dxn + i] += src_d[a+sx1+i] * alpha;\n                    }\n                }\n                if ((dy + 1) * scale_y <= sy + 1 || sy == h - 1) {\n                    beta = Math.max(sy + 1 - (dy + 1) * scale_y, 0.0);\n                    beta1 = 1.0 - beta;\n                    b = nw * dy;\n                    if (Math.abs(beta) < 1e-3) {\n                        for (dx = 0; dx < nw * ch; dx++) {\n                            dst_d[b+dx] = sum[dx] + buf[dx];\n                            sum[dx] = buf[dx] = 0;\n                        }\n                    } else {\n                        for (dx = 0; dx < nw * ch; dx++) {\n                            dst_d[b+dx] = sum[dx] + buf[dx] * beta1;\n                            sum[dx] = buf[dx] * beta;\n                            buf[dx] = 0;\n                        }\n                    }\n                    dy++;\n                } else {\n                    for(dx = 0; dx < nw * ch; dx++) {\n                        sum[dx] += buf[dx]; \n                        buf[dx] = 0;\n                    }\n                }\n            }\n            jsfeat.cache.put_buffer(sum_node);\n            jsfeat.cache.put_buffer(buf_node);\n            jsfeat.cache.put_buffer(xofs_node);\n        }\n\n        var _convol_u8 = function(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel) {\n            var i=0,j=0,k=0,sp=0,dp=0,sum=0,sum1=0,sum2=0,sum3=0,f0=filter[0],fk=0;\n            var w2=w<<1,w3=w*3,w4=w<<2;\n            // hor pass\n            for (; i < h; ++i) { \n                sum = src_d[sp];\n                for (j = 0; j < half_kernel; ++j) {\n                    buf[j] = sum;\n                }\n                for (j = 0; j <= w-2; j+=2) {\n                    buf[j + half_kernel] = src_d[sp+j];\n                    buf[j + half_kernel+1] = src_d[sp+j+1];\n                }\n                for (; j < w; ++j) {\n                    buf[j + half_kernel] = src_d[sp+j];\n                }\n                sum = src_d[sp+w-1];\n                for (j = w; j < half_kernel + w; ++j) {\n                    buf[j + half_kernel] = sum;\n                }\n                for (j = 0; j <= w-4; j+=4) {\n                    sum = buf[j] * f0, \n                    sum1 = buf[j+1] * f0,\n                    sum2 = buf[j+2] * f0,\n                    sum3 = buf[j+3] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        fk = filter[k];\n                        sum += buf[k + j] * fk;\n                        sum1 += buf[k + j+1] * fk;\n                        sum2 += buf[k + j+2] * fk;\n                        sum3 += buf[k + j+3] * fk;\n                    }\n                    dst_d[dp+j] = Math.min(sum >> 8, 255);\n                    dst_d[dp+j+1] = Math.min(sum1 >> 8, 255);\n                    dst_d[dp+j+2] = Math.min(sum2 >> 8, 255);\n                    dst_d[dp+j+3] = Math.min(sum3 >> 8, 255);\n                }\n                for (; j < w; ++j) {\n                    sum = buf[j] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        sum += buf[k + j] * filter[k];\n                    }\n                    dst_d[dp+j] = Math.min(sum >> 8, 255);\n                }\n                sp += w;\n                dp += w;\n            }\n\n            // vert pass\n            for (i = 0; i < w; ++i) {\n                sum = dst_d[i];\n                for (j = 0; j < half_kernel; ++j) {\n                    buf[j] = sum;\n                }\n                k = i;\n                for (j = 0; j <= h-2; j+=2, k+=w2) {\n                    buf[j+half_kernel] = dst_d[k];\n                    buf[j+half_kernel+1] = dst_d[k+w];\n                }\n                for (; j < h; ++j, k+=w) {\n                    buf[j+half_kernel] = dst_d[k];\n                }\n                sum = dst_d[(h-1)*w + i];\n                for (j = h; j < half_kernel + h; ++j) {\n                    buf[j + half_kernel] = sum;\n                }\n                dp = i;\n                for (j = 0; j <= h-4; j+=4, dp+=w4) { \n                    sum = buf[j] * f0, \n                    sum1 = buf[j+1] * f0,\n                    sum2 = buf[j+2] * f0,\n                    sum3 = buf[j+3] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        fk = filter[k];\n                        sum += buf[k + j] * fk;\n                        sum1 += buf[k + j+1] * fk;\n                        sum2 += buf[k + j+2] * fk;\n                        sum3 += buf[k + j+3] * fk;\n                    }\n                    dst_d[dp] = Math.min(sum >> 8, 255);\n                    dst_d[dp+w] = Math.min(sum1 >> 8, 255);\n                    dst_d[dp+w2] = Math.min(sum2 >> 8, 255);\n                    dst_d[dp+w3] = Math.min(sum3 >> 8, 255);\n                }\n                for (; j < h; ++j, dp+=w) {\n                    sum = buf[j] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        sum += buf[k + j] * filter[k];\n                    }\n                    dst_d[dp] = Math.min(sum >> 8, 255);\n                }\n            }\n        }\n\n        var _convol = function(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel) {\n            var i=0,j=0,k=0,sp=0,dp=0,sum=0.0,sum1=0.0,sum2=0.0,sum3=0.0,f0=filter[0],fk=0.0;\n            var w2=w<<1,w3=w*3,w4=w<<2;\n            // hor pass\n            for (; i < h; ++i) { \n                sum = src_d[sp];\n                for (j = 0; j < half_kernel; ++j) {\n                    buf[j] = sum;\n                }\n                for (j = 0; j <= w-2; j+=2) {\n                    buf[j + half_kernel] = src_d[sp+j];\n                    buf[j + half_kernel+1] = src_d[sp+j+1];\n                }\n                for (; j < w; ++j) {\n                    buf[j + half_kernel] = src_d[sp+j];\n                }\n                sum = src_d[sp+w-1];\n                for (j = w; j < half_kernel + w; ++j) {\n                    buf[j + half_kernel] = sum;\n                }\n                for (j = 0; j <= w-4; j+=4) {\n                    sum = buf[j] * f0, \n                    sum1 = buf[j+1] * f0,\n                    sum2 = buf[j+2] * f0,\n                    sum3 = buf[j+3] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        fk = filter[k];\n                        sum += buf[k + j] * fk;\n                        sum1 += buf[k + j+1] * fk;\n                        sum2 += buf[k + j+2] * fk;\n                        sum3 += buf[k + j+3] * fk;\n                    }\n                    dst_d[dp+j] = sum;\n                    dst_d[dp+j+1] = sum1;\n                    dst_d[dp+j+2] = sum2;\n                    dst_d[dp+j+3] = sum3;\n                }\n                for (; j < w; ++j) {\n                    sum = buf[j] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        sum += buf[k + j] * filter[k];\n                    }\n                    dst_d[dp+j] = sum;\n                }\n                sp += w;\n                dp += w;\n            }\n\n            // vert pass\n            for (i = 0; i < w; ++i) {\n                sum = dst_d[i];\n                for (j = 0; j < half_kernel; ++j) {\n                    buf[j] = sum;\n                }\n                k = i;\n                for (j = 0; j <= h-2; j+=2, k+=w2) {\n                    buf[j+half_kernel] = dst_d[k];\n                    buf[j+half_kernel+1] = dst_d[k+w];\n                }\n                for (; j < h; ++j, k+=w) {\n                    buf[j+half_kernel] = dst_d[k];\n                }\n                sum = dst_d[(h-1)*w + i];\n                for (j = h; j < half_kernel + h; ++j) {\n                    buf[j + half_kernel] = sum;\n                }\n                dp = i;\n                for (j = 0; j <= h-4; j+=4, dp+=w4) { \n                    sum = buf[j] * f0, \n                    sum1 = buf[j+1] * f0,\n                    sum2 = buf[j+2] * f0,\n                    sum3 = buf[j+3] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        fk = filter[k];\n                        sum += buf[k + j] * fk;\n                        sum1 += buf[k + j+1] * fk;\n                        sum2 += buf[k + j+2] * fk;\n                        sum3 += buf[k + j+3] * fk;\n                    }\n                    dst_d[dp] = sum;\n                    dst_d[dp+w] = sum1;\n                    dst_d[dp+w2] = sum2;\n                    dst_d[dp+w3] = sum3;\n                }\n                for (; j < h; ++j, dp+=w) {\n                    sum = buf[j] * f0;\n                    for (k = 1; k < kernel_size; ++k) {\n                        sum += buf[k + j] * filter[k];\n                    }\n                    dst_d[dp] = sum;\n                }\n            }\n        }\n\n        return {\n            // TODO: add support for RGB/BGR order\n            // for raw arrays\n            grayscale: function(src, w, h, dst, code) {\n                // this is default image data representation in browser\n                if (typeof code === \"undefined\") { code = jsfeat.COLOR_RGBA2GRAY; }\n                var x=0, y=0, i=0, j=0, ir=0,jr=0;\n                var coeff_r = 4899, coeff_g = 9617, coeff_b = 1868, cn = 4;\n\n                if(code == jsfeat.COLOR_BGRA2GRAY || code == jsfeat.COLOR_BGR2GRAY) {\n                    coeff_r = 1868;\n                    coeff_b = 4899;\n                }\n                if(code == jsfeat.COLOR_RGB2GRAY || code == jsfeat.COLOR_BGR2GRAY) {\n                    cn = 3;\n                }\n                var cn2 = cn<<1, cn3 = (cn*3)|0;\n\n                dst.resize(w, h, 1);\n                var dst_u8 = dst.data;\n\n                for(y = 0; y < h; ++y, j+=w, i+=w*cn) {\n                    for(x = 0, ir = i, jr = j; x <= w-4; x+=4, ir+=cn<<2, jr+=4) {\n                        dst_u8[jr]     = (src[ir] * coeff_r + src[ir+1] * coeff_g + src[ir+2] * coeff_b + 8192) >> 14;\n                        dst_u8[jr + 1] = (src[ir+cn] * coeff_r + src[ir+cn+1] * coeff_g + src[ir+cn+2] * coeff_b + 8192) >> 14;\n                        dst_u8[jr + 2] = (src[ir+cn2] * coeff_r + src[ir+cn2+1] * coeff_g + src[ir+cn2+2] * coeff_b + 8192) >> 14;\n                        dst_u8[jr + 3] = (src[ir+cn3] * coeff_r + src[ir+cn3+1] * coeff_g + src[ir+cn3+2] * coeff_b + 8192) >> 14;\n                    }\n                    for (; x < w; ++x, ++jr, ir+=cn) {\n                        dst_u8[jr] = (src[ir] * coeff_r + src[ir+1] * coeff_g + src[ir+2] * coeff_b + 8192) >> 14;\n                    }\n                }\n            },\n            // derived from CCV library\n            resample: function(src, dst, nw, nh) {\n                var h=src.rows,w=src.cols;\n                if (h > nh && w > nw) {\n                    dst.resize(nw, nh, src.channel);\n                    // using the fast alternative (fix point scale, 0x100 to avoid overflow)\n                    if (src.type&jsfeat.U8_t && dst.type&jsfeat.U8_t && h * w / (nh * nw) < 0x100) {\n                        _resample_u8(src, dst, nw, nh);\n                    } else {\n                        _resample(src, dst, nw, nh);\n                    }\n                }\n            },\n\n            box_blur_gray: function(src, dst, radius, options) {\n                if (typeof options === \"undefined\") { options = 0; }\n                var w=src.cols, h=src.rows, h2=h<<1, w2=w<<1;\n                var i=0,x=0,y=0,end=0;\n                var windowSize = ((radius << 1) + 1)|0;\n                var radiusPlusOne = (radius + 1)|0, radiusPlus2 = (radiusPlusOne+1)|0;\n                var scale = options&jsfeat.BOX_BLUR_NOSCALE ? 1 : (1.0 / (windowSize*windowSize));\n\n                var tmp_buff = jsfeat.cache.get_buffer((w*h)<<2);\n\n                var sum=0, dstIndex=0, srcIndex = 0, nextPixelIndex=0, previousPixelIndex=0;\n                var data_i32 = tmp_buff.i32; // to prevent overflow\n                var data_u8 = src.data;\n                var hold=0;\n\n                dst.resize(w, h, src.channel);\n\n                // first pass\n                // no need to scale \n                //data_u8 = src.data;\n                //data_i32 = tmp;\n                for (y = 0; y < h; ++y) {\n                    dstIndex = y;\n                    sum = radiusPlusOne * data_u8[srcIndex];\n\n                    for(i = (srcIndex+1)|0, end=(srcIndex+radius)|0; i <= end; ++i) {\n                        sum += data_u8[i];\n                    }\n\n                    nextPixelIndex = (srcIndex + radiusPlusOne)|0;\n                    previousPixelIndex = srcIndex;\n                    hold = data_u8[previousPixelIndex];\n                    for(x = 0; x < radius; ++x, dstIndex += h) {\n                        data_i32[dstIndex] = sum;\n                        sum += data_u8[nextPixelIndex]- hold;\n                        nextPixelIndex ++;\n                    }\n                    for(; x < w-radiusPlus2; x+=2, dstIndex += h2) {\n                        data_i32[dstIndex] = sum;\n                        sum += data_u8[nextPixelIndex]- data_u8[previousPixelIndex];\n\n                        data_i32[dstIndex+h] = sum;\n                        sum += data_u8[nextPixelIndex+1]- data_u8[previousPixelIndex+1];\n\n                        nextPixelIndex +=2;\n                        previousPixelIndex +=2;\n                    }\n                    for(; x < w-radiusPlusOne; ++x, dstIndex += h) {\n                        data_i32[dstIndex] = sum;\n                        sum += data_u8[nextPixelIndex]- data_u8[previousPixelIndex];\n\n                        nextPixelIndex ++;\n                        previousPixelIndex ++;\n                    }\n                    \n                    hold = data_u8[nextPixelIndex-1];\n                    for(; x < w; ++x, dstIndex += h) {\n                        data_i32[dstIndex] = sum;\n\n                        sum += hold- data_u8[previousPixelIndex];\n                        previousPixelIndex ++;\n                    }\n\n                    srcIndex += w;\n                }\n                //\n                // second pass\n                srcIndex = 0;\n                //data_i32 = tmp; // this is a transpose\n                data_u8 = dst.data;\n\n                // dont scale result\n                if(scale == 1) {\n                    for (y = 0; y < w; ++y) {\n                        dstIndex = y;\n                        sum = radiusPlusOne * data_i32[srcIndex];\n\n                        for(i = (srcIndex+1)|0, end=(srcIndex+radius)|0; i <= end; ++i) {\n                            sum += data_i32[i];\n                        }\n\n                        nextPixelIndex = srcIndex + radiusPlusOne;\n                        previousPixelIndex = srcIndex;\n                        hold = data_i32[previousPixelIndex];\n\n                        for(x = 0; x < radius; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum;\n                            sum += data_i32[nextPixelIndex]- hold;\n                            nextPixelIndex ++;\n                        }\n                        for(; x < h-radiusPlus2; x+=2, dstIndex += w2) {\n                            data_u8[dstIndex] = sum;\n                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];\n\n                            data_u8[dstIndex+w] = sum;\n                            sum += data_i32[nextPixelIndex+1]- data_i32[previousPixelIndex+1];\n\n                            nextPixelIndex +=2;\n                            previousPixelIndex +=2;\n                        }\n                        for(; x < h-radiusPlusOne; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum;\n\n                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];\n                            nextPixelIndex ++;\n                            previousPixelIndex ++;\n                        }\n                        hold = data_i32[nextPixelIndex-1];\n                        for(; x < h; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum;\n\n                            sum += hold- data_i32[previousPixelIndex];\n                            previousPixelIndex ++;\n                        }\n\n                        srcIndex += h;\n                    }\n                } else {\n                    for (y = 0; y < w; ++y) {\n                        dstIndex = y;\n                        sum = radiusPlusOne * data_i32[srcIndex];\n\n                        for(i = (srcIndex+1)|0, end=(srcIndex+radius)|0; i <= end; ++i) {\n                            sum += data_i32[i];\n                        }\n\n                        nextPixelIndex = srcIndex + radiusPlusOne;\n                        previousPixelIndex = srcIndex;\n                        hold = data_i32[previousPixelIndex];\n\n                        for(x = 0; x < radius; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum*scale;\n                            sum += data_i32[nextPixelIndex]- hold;\n                            nextPixelIndex ++;\n                        }\n                        for(; x < h-radiusPlus2; x+=2, dstIndex += w2) {\n                            data_u8[dstIndex] = sum*scale;\n                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];\n\n                            data_u8[dstIndex+w] = sum*scale;\n                            sum += data_i32[nextPixelIndex+1]- data_i32[previousPixelIndex+1];\n\n                            nextPixelIndex +=2;\n                            previousPixelIndex +=2;\n                        }\n                        for(; x < h-radiusPlusOne; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum*scale;\n\n                            sum += data_i32[nextPixelIndex]- data_i32[previousPixelIndex];\n                            nextPixelIndex ++;\n                            previousPixelIndex ++;\n                        }\n                        hold = data_i32[nextPixelIndex-1];\n                        for(; x < h; ++x, dstIndex += w) {\n                            data_u8[dstIndex] = sum*scale;\n\n                            sum += hold- data_i32[previousPixelIndex];\n                            previousPixelIndex ++;\n                        }\n\n                        srcIndex += h;\n                    }\n                }\n\n                jsfeat.cache.put_buffer(tmp_buff);\n            },\n\n            gaussian_blur: function(src, dst, kernel_size, sigma) {\n                if (typeof sigma === \"undefined\") { sigma = 0.0; }\n                if (typeof kernel_size === \"undefined\") { kernel_size = 0; }\n                kernel_size = kernel_size == 0 ? (Math.max(1, (4.0 * sigma + 1.0 - 1e-8)) * 2 + 1)|0 : kernel_size;\n                var half_kernel = kernel_size >> 1;\n                var w = src.cols, h = src.rows;\n                var data_type = src.type, is_u8 = data_type&jsfeat.U8_t;\n\n                dst.resize(w, h, src.channel);\n\n                var src_d = src.data, dst_d = dst.data;\n                var buf,filter,buf_sz=(kernel_size + Math.max(h, w))|0;\n\n                var buf_node = jsfeat.cache.get_buffer(buf_sz<<2);\n                var filt_node = jsfeat.cache.get_buffer(kernel_size<<2);\n\n                if(is_u8) {\n                    buf = buf_node.i32;\n                    filter = filt_node.i32;\n                } else if(data_type&jsfeat.S32_t) {\n                    buf = buf_node.i32;\n                    filter = filt_node.f32;\n                } else {\n                    buf = buf_node.f32;\n                    filter = filt_node.f32;\n                }\n\n                jsfeat.math.get_gaussian_kernel(kernel_size, sigma, filter, data_type);\n\n                if(is_u8) {\n                    _convol_u8(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel);\n                } else {\n                    _convol(buf, src_d, dst_d, w, h, filter, kernel_size, half_kernel);\n                }\n\n                jsfeat.cache.put_buffer(buf_node);\n                jsfeat.cache.put_buffer(filt_node);\n            },\n            // assume we always need it for u8 image\n            pyrdown: function(src, dst, sx, sy) {\n                // this is needed for bbf\n                if (typeof sx === \"undefined\") { sx = 0; }\n                if (typeof sy === \"undefined\") { sy = 0; }\n\n                var w = src.cols, h = src.rows;\n                var w2 = w >> 1, h2 = h >> 1;\n                var _w2 = w2 - (sx << 1), _h2 = h2 - (sy << 1);\n                var x=0,y=0,sptr=sx+sy*w,sline=0,dptr=0,dline=0;\n\n                dst.resize(w2, h2, src.channel);\n\n                var src_d = src.data, dst_d = dst.data;\n\n                for(y = 0; y < _h2; ++y) {\n                    sline = sptr;\n                    dline = dptr;\n                    for(x = 0; x <= _w2-2; x+=2, dline+=2, sline += 4) {\n                        dst_d[dline] = (src_d[sline] + src_d[sline+1] +\n                                            src_d[sline+w] + src_d[sline+w+1] + 2) >> 2;\n                        dst_d[dline+1] = (src_d[sline+2] + src_d[sline+3] +\n                                            src_d[sline+w+2] + src_d[sline+w+3] + 2) >> 2;\n                    }\n                    for(; x < _w2; ++x, ++dline, sline += 2) {\n                        dst_d[dline] = (src_d[sline] + src_d[sline+1] +\n                                            src_d[sline+w] + src_d[sline+w+1] + 2) >> 2;\n                    }\n                    sptr += w << 1;\n                    dptr += w2;\n                }\n            },\n\n            // dst: [gx,gy,...]\n            scharr_derivatives: function(src, dst) {\n                var w = src.cols, h = src.rows;\n                var dstep = w<<1,x=0,y=0,x1=0,a,b,c,d,e,f;\n                var srow0=0,srow1=0,srow2=0,drow=0;\n                var trow0,trow1;\n\n                dst.resize(w, h, 2); // 2 channel output gx, gy\n\n                var img = src.data, gxgy=dst.data;\n\n                var buf0_node = jsfeat.cache.get_buffer((w+2)<<2);\n                var buf1_node = jsfeat.cache.get_buffer((w+2)<<2);\n\n                if(src.type&jsfeat.U8_t || src.type&jsfeat.S32_t) {\n                    trow0 = buf0_node.i32;\n                    trow1 = buf1_node.i32;\n                } else {\n                    trow0 = buf0_node.f32;\n                    trow1 = buf1_node.f32;\n                }\n\n                for(; y < h; ++y, srow1+=w) {\n                    srow0 = ((y > 0 ? y-1 : 1)*w)|0;\n                    srow2 = ((y < h-1 ? y+1 : h-2)*w)|0;\n                    drow = (y*dstep)|0;\n                    // do vertical convolution\n                    for(x = 0, x1 = 1; x <= w-2; x+=2, x1+=2) {\n                        a = img[srow0+x], b = img[srow2+x];\n                        trow0[x1] = ( (a + b)*3 + (img[srow1+x])*10 );\n                        trow1[x1] = ( b - a );\n                        //\n                        a = img[srow0+x+1], b = img[srow2+x+1];\n                        trow0[x1+1] = ( (a + b)*3 + (img[srow1+x+1])*10 );\n                        trow1[x1+1] = ( b - a );\n                    }\n                    for(; x < w; ++x, ++x1) {\n                        a = img[srow0+x], b = img[srow2+x];\n                        trow0[x1] = ( (a + b)*3 + (img[srow1+x])*10 );\n                        trow1[x1] = ( b - a );\n                    }\n                    // make border\n                    x = (w + 1)|0;\n                    trow0[0] = trow0[1]; trow0[x] = trow0[w];\n                    trow1[0] = trow1[1]; trow1[x] = trow1[w];\n                    // do horizontal convolution, interleave the results and store them\n                    for(x = 0; x <= w-4; x+=4) {\n                        a = trow1[x+2], b = trow1[x+1], c = trow1[x+3], d = trow1[x+4],\n                        e = trow0[x+2], f = trow0[x+3];\n                        gxgy[drow++] = ( e - trow0[x] );\n                        gxgy[drow++] = ( (a + trow1[x])*3 + b*10 );\n                        gxgy[drow++] = ( f - trow0[x+1] );\n                        gxgy[drow++] = ( (c + b)*3 + a*10 );\n\n                        gxgy[drow++] = ( (trow0[x+4] - e) );\n                        gxgy[drow++] = ( ((d + a)*3 + c*10) );\n                        gxgy[drow++] = ( (trow0[x+5] - f) );\n                        gxgy[drow++] = ( ((trow1[x+5] + c)*3 + d*10) );\n                    }\n                    for(; x < w; ++x) {\n                        gxgy[drow++] = ( (trow0[x+2] - trow0[x]) );\n                        gxgy[drow++] = ( ((trow1[x+2] + trow1[x])*3 + trow1[x+1]*10) );\n                    }\n                }\n                jsfeat.cache.put_buffer(buf0_node);\n                jsfeat.cache.put_buffer(buf1_node);\n            },\n\n            // compute gradient using Sobel kernel [1 2 1] * [-1 0 1]^T\n            // dst: [gx,gy,...]\n            sobel_derivatives: function(src, dst) {\n                var w = src.cols, h = src.rows;\n                var dstep = w<<1,x=0,y=0,x1=0,a,b,c,d,e,f;\n                var srow0=0,srow1=0,srow2=0,drow=0;\n                var trow0,trow1;\n\n                dst.resize(w, h, 2); // 2 channel output gx, gy\n\n                var img = src.data, gxgy=dst.data;\n\n                var buf0_node = jsfeat.cache.get_buffer((w+2)<<2);\n                var buf1_node = jsfeat.cache.get_buffer((w+2)<<2);\n\n                if(src.type&jsfeat.U8_t || src.type&jsfeat.S32_t) {\n                    trow0 = buf0_node.i32;\n                    trow1 = buf1_node.i32;\n                } else {\n                    trow0 = buf0_node.f32;\n                    trow1 = buf1_node.f32;\n                }\n\n                for(; y < h; ++y, srow1+=w) {\n                    srow0 = ((y > 0 ? y-1 : 1)*w)|0;\n                    srow2 = ((y < h-1 ? y+1 : h-2)*w)|0;\n                    drow = (y*dstep)|0;\n                    // do vertical convolution\n                    for(x = 0, x1 = 1; x <= w-2; x+=2, x1+=2) {\n                        a = img[srow0+x], b = img[srow2+x];\n                        trow0[x1] = ( (a + b) + (img[srow1+x]*2) );\n                        trow1[x1] = ( b - a );\n                        //\n                        a = img[srow0+x+1], b = img[srow2+x+1];\n                        trow0[x1+1] = ( (a + b) + (img[srow1+x+1]*2) );\n                        trow1[x1+1] = ( b - a );\n                    }\n                    for(; x < w; ++x, ++x1) {\n                        a = img[srow0+x], b = img[srow2+x];\n                        trow0[x1] = ( (a + b) + (img[srow1+x]*2) );\n                        trow1[x1] = ( b - a );\n                    }\n                    // make border\n                    x = (w + 1)|0;\n                    trow0[0] = trow0[1]; trow0[x] = trow0[w];\n                    trow1[0] = trow1[1]; trow1[x] = trow1[w];\n                    // do horizontal convolution, interleave the results and store them\n                    for(x = 0; x <= w-4; x+=4) {\n                        a = trow1[x+2], b = trow1[x+1], c = trow1[x+3], d = trow1[x+4],\n                        e = trow0[x+2], f = trow0[x+3];\n                        gxgy[drow++] = ( e - trow0[x] );\n                        gxgy[drow++] = ( a + trow1[x] + b*2 );\n                        gxgy[drow++] = ( f - trow0[x+1] );\n                        gxgy[drow++] = ( c + b + a*2 );\n\n                        gxgy[drow++] = ( trow0[x+4] - e );\n                        gxgy[drow++] = ( d + a + c*2 );\n                        gxgy[drow++] = ( trow0[x+5] - f );\n                        gxgy[drow++] = ( trow1[x+5] + c + d*2 );\n                    }\n                    for(; x < w; ++x) {\n                        gxgy[drow++] = ( trow0[x+2] - trow0[x] );\n                        gxgy[drow++] = ( trow1[x+2] + trow1[x] + trow1[x+1]*2 );\n                    }\n                }\n                jsfeat.cache.put_buffer(buf0_node);\n                jsfeat.cache.put_buffer(buf1_node);\n            },\n\n            // please note: \n            // dst_(type) size should be cols = src.cols+1, rows = src.rows+1\n            compute_integral_image: function(src, dst_sum, dst_sqsum, dst_tilted) {\n                var w0=src.cols|0,h0=src.rows|0,src_d=src.data;\n                var w1=(w0+1)|0;\n                var s=0,s2=0,p=0,pup=0,i=0,j=0,v=0,k=0;\n\n                if(dst_sum && dst_sqsum) {\n                    // fill first row with zeros\n                    for(; i < w1; ++i) {\n                        dst_sum[i] = 0, dst_sqsum[i] = 0;\n                    }\n                    p = (w1+1)|0, pup = 1;\n                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n                        s = s2 = 0;\n                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {\n                            v = src_d[k];\n                            s += v, s2 += v*v;\n                            dst_sum[p] = dst_sum[pup] + s;\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\n\n                            v = src_d[k+1];\n                            s += v, s2 += v*v;\n                            dst_sum[p+1] = dst_sum[pup+1] + s;\n                            dst_sqsum[p+1] = dst_sqsum[pup+1] + s2;\n                        }\n                        for(; j < w0; ++j, ++k, ++p, ++pup) {\n                            v = src_d[k];\n                            s += v, s2 += v*v;\n                            dst_sum[p] = dst_sum[pup] + s;\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\n                        }\n                    }\n                } else if(dst_sum) {\n                    // fill first row with zeros\n                    for(; i < w1; ++i) {\n                        dst_sum[i] = 0;\n                    }\n                    p = (w1+1)|0, pup = 1;\n                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n                        s = 0;\n                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {\n                            s += src_d[k];\n                            dst_sum[p] = dst_sum[pup] + s;\n                            s += src_d[k+1];\n                            dst_sum[p+1] = dst_sum[pup+1] + s;\n                        }\n                        for(; j < w0; ++j, ++k, ++p, ++pup) {\n                            s += src_d[k];\n                            dst_sum[p] = dst_sum[pup] + s;\n                        }\n                    }\n                } else if(dst_sqsum) {\n                    // fill first row with zeros\n                    for(; i < w1; ++i) {\n                        dst_sqsum[i] = 0;\n                    }\n                    p = (w1+1)|0, pup = 1;\n                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n                        s2 = 0;\n                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {\n                            v = src_d[k];\n                            s2 += v*v;\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\n                            v = src_d[k+1];\n                            s2 += v*v;\n                            dst_sqsum[p+1] = dst_sqsum[pup+1] + s2;\n                        }\n                        for(; j < w0; ++j, ++k, ++p, ++pup) {\n                            v = src_d[k];\n                            s2 += v*v;\n                            dst_sqsum[p] = dst_sqsum[pup] + s2;\n                        }\n                    }\n                }\n\n                if(dst_tilted) {\n                    // fill first row with zeros\n                    for(i = 0; i < w1; ++i) {\n                        dst_tilted[i] = 0;\n                    }\n                    // diagonal\n                    p = (w1+1)|0, pup = 0;\n                    for(i = 0, k = 0; i < h0; ++i, ++p, ++pup) {\n                        for(j = 0; j <= w0-2; j+=2, k+=2, p+=2, pup+=2) {\n                            dst_tilted[p] = src_d[k] + dst_tilted[pup];\n                            dst_tilted[p+1] = src_d[k+1] + dst_tilted[pup+1];\n                        }\n                        for(; j < w0; ++j, ++k, ++p, ++pup) {\n                            dst_tilted[p] = src_d[k] + dst_tilted[pup];\n                        }\n                    }\n                    // diagonal\n                    p = (w1+w0)|0, pup = w0;\n                    for(i = 0; i < h0; ++i, p+=w1, pup+=w1) {\n                        dst_tilted[p] += dst_tilted[pup];\n                    }\n\n                    for(j = w0-1; j > 0; --j) {\n                        p = j+h0*w1, pup=p-w1;\n                        for(i = h0; i > 0; --i, p-=w1, pup-=w1) {\n                            dst_tilted[p] += dst_tilted[pup] + dst_tilted[pup+1];\n                        }\n                    }\n                }\n            },\n            equalize_histogram: function(src, dst) {\n                var w=src.cols,h=src.rows,src_d=src.data;\n\n                dst.resize(w, h, src.channel);\n\n                var dst_d=dst.data,size=w*h;\n                var i=0,prev=0,hist0,norm;\n\n                var hist0_node = jsfeat.cache.get_buffer(256<<2);\n                hist0 = hist0_node.i32;\n                for(; i < 256; ++i) hist0[i] = 0;\n                for (i = 0; i < size; ++i) {\n                    ++hist0[src_d[i]];\n                }\n\n                prev = hist0[0];\n                for (i = 1; i < 256; ++i) {\n                    prev = hist0[i] += prev;\n                }\n\n                norm = 255 / size;\n                for (i = 0; i < size; ++i) {\n                    dst_d[i] = (hist0[src_d[i]] * norm + 0.5)|0;\n                }\n                jsfeat.cache.put_buffer(hist0_node);\n            },\n\n            canny: function(src, dst, low_thresh, high_thresh) {\n                var w=src.cols,h=src.rows,src_d=src.data;\n\n                dst.resize(w, h, src.channel);\n                \n                var dst_d=dst.data;\n                var i=0,j=0,grad=0,w2=w<<1,_grad=0,suppress=0,f=0,x=0,y=0,s=0;\n                var tg22x=0,tg67x=0;\n\n                // cache buffers\n                var dxdy_node = jsfeat.cache.get_buffer((h * w2)<<2);\n                var buf_node = jsfeat.cache.get_buffer((3 * (w + 2))<<2);\n                var map_node = jsfeat.cache.get_buffer(((h+2) * (w + 2))<<2);\n                var stack_node = jsfeat.cache.get_buffer((h * w)<<2);\n                \n\n                var buf = buf_node.i32;\n                var map = map_node.i32;\n                var stack = stack_node.i32;\n                var dxdy = dxdy_node.i32;\n                var dxdy_m = new jsfeat.matrix_t(w, h, jsfeat.S32C2_t, dxdy_node.data);\n                var row0=1,row1=(w+2+1)|0,row2=(2*(w+2)+1)|0,map_w=(w+2)|0,map_i=(map_w+1)|0,stack_i=0;\n\n                this.sobel_derivatives(src, dxdy_m);\n\n                if(low_thresh > high_thresh) {\n                    i = low_thresh;\n                    low_thresh = high_thresh;\n                    high_thresh = i;\n                }\n\n                i = (3 * (w + 2))|0;\n                while(--i>=0) {\n                    buf[i] = 0;\n                }\n\n                i = ((h+2) * (w + 2))|0;\n                while(--i>=0) {\n                    map[i] = 0;\n                }\n\n                for (; j < w; ++j, grad+=2) {\n                    //buf[row1+j] = Math.abs(dxdy[grad]) + Math.abs(dxdy[grad+1]);\n                    x = dxdy[grad], y = dxdy[grad+1];\n                    //buf[row1+j] = x*x + y*y;\n                    buf[row1+j] = ((x ^ (x >> 31)) - (x >> 31)) + ((y ^ (y >> 31)) - (y >> 31));\n                }\n\n                for(i=1; i <= h; ++i, grad+=w2) {\n                    if(i == h) {\n                        j = row2+w;\n                        while(--j>=row2) {\n                            buf[j] = 0;\n                        }\n                    } else {\n                        for (j = 0; j < w; j++) {\n                            //buf[row2+j] =  Math.abs(dxdy[grad+(j<<1)]) + Math.abs(dxdy[grad+(j<<1)+1]);\n                            x = dxdy[grad+(j<<1)], y = dxdy[grad+(j<<1)+1];\n                            //buf[row2+j] = x*x + y*y;\n                            buf[row2+j] = ((x ^ (x >> 31)) - (x >> 31)) + ((y ^ (y >> 31)) - (y >> 31));\n                        }\n                    }\n                    _grad = (grad - w2)|0;\n                    map[map_i-1] = 0;\n                    suppress = 0;\n                    for(j = 0; j < w; ++j, _grad+=2) {\n                        f = buf[row1+j];\n                        if (f > low_thresh) {\n                            x = dxdy[_grad];\n                            y = dxdy[_grad+1];\n                            s = x ^ y;\n                            // seems ot be faster than Math.abs\n                            x = ((x ^ (x >> 31)) - (x >> 31))|0;\n                            y = ((y ^ (y >> 31)) - (y >> 31))|0;\n                            //x * tan(22.5) x * tan(67.5) == 2 * x + x * tan(22.5)\n                            tg22x = x * 13573;\n                            tg67x = tg22x + ((x + x) << 15);\n                            y <<= 15;\n                            if (y < tg22x) {\n                                if (f > buf[row1+j-1] && f >= buf[row1+j+1]) {\n                                    if (f > high_thresh && !suppress && map[map_i+j-map_w] != 2) {\n                                        map[map_i+j] = 2;\n                                        suppress = 1;\n                                        stack[stack_i++] = map_i + j;\n                                    } else {\n                                        map[map_i+j] = 1;\n                                    }\n                                    continue;\n                                }\n                            } else if (y > tg67x) {\n                                if (f > buf[row0+j] && f >= buf[row2+j]) {\n                                    if (f > high_thresh && !suppress && map[map_i+j-map_w] != 2) {\n                                        map[map_i+j] = 2;\n                                        suppress = 1;\n                                        stack[stack_i++] = map_i + j;\n                                    } else {\n                                        map[map_i+j] = 1;\n                                    }\n                                    continue;\n                                }\n                            } else {\n                                s = s < 0 ? -1 : 1;\n                                if (f > buf[row0+j-s] && f > buf[row2+j+s]) {\n                                    if (f > high_thresh && !suppress && map[map_i+j-map_w] != 2) {\n                                        map[map_i+j] = 2;\n                                        suppress = 1;\n                                        stack[stack_i++] = map_i + j;\n                                    } else {\n                                        map[map_i+j] = 1;\n                                    }\n                                    continue;\n                                }\n                            }\n                        }\n                        map[map_i+j] = 0;\n                        suppress = 0;\n                    }\n                    map[map_i+w] = 0;\n                    map_i += map_w;\n                    j = row0;\n                    row0 = row1;\n                    row1 = row2;\n                    row2 = j;\n                }\n\n                j = map_i - map_w - 1;\n                for(i = 0; i < map_w; ++i, ++j) {\n                    map[j] = 0;\n                }\n                // path following\n                while(stack_i > 0) {\n                    map_i = stack[--stack_i];\n                    map_i -= map_w+1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += 1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += 1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += map_w;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i -= 2;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += map_w;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += 1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                    map_i += 1;\n                    if(map[map_i] == 1) map[map_i] = 2, stack[stack_i++] = map_i;\n                }\n\n                map_i = map_w + 1;\n                row0 = 0;\n                for(i = 0; i < h; ++i, map_i+=map_w) {\n                    for(j = 0; j < w; ++j) {\n                        dst_d[row0++] = (map[map_i+j] == 2) * 0xff;\n                    }\n                }\n\n                // free buffers\n                jsfeat.cache.put_buffer(dxdy_node);\n                jsfeat.cache.put_buffer(buf_node);\n                jsfeat.cache.put_buffer(map_node);\n                jsfeat.cache.put_buffer(stack_node);\n            },\n            // transform is 3x3 matrix_t\n            warp_perspective: function(src, dst, transform, fill_value) {\n                if (typeof fill_value === \"undefined\") { fill_value = 0; }\n                var src_width=src.cols|0, src_height=src.rows|0, dst_width=dst.cols|0, dst_height=dst.rows|0;\n                var src_d=src.data, dst_d=dst.data;\n                var x=0,y=0,off=0,ixs=0,iys=0,xs=0.0,ys=0.0,xs0=0.0,ys0=0.0,ws=0.0,sc=0.0,a=0.0,b=0.0,p0=0.0,p1=0.0;\n                var td=transform.data;\n                var m00=td[0],m01=td[1],m02=td[2],\n                    m10=td[3],m11=td[4],m12=td[5],\n                    m20=td[6],m21=td[7],m22=td[8];\n\n                for(var dptr = 0; y < dst_height; ++y) {\n                    xs0 = m01 * y + m02,\n                    ys0 = m11 * y + m12,\n                    ws  = m21 * y + m22;\n                    for(x = 0; x < dst_width; ++x, ++dptr, xs0+=m00, ys0+=m10, ws+=m20) {\n                        sc = 1.0 / ws;\n                        xs = xs0 * sc, ys = ys0 * sc;\n                        ixs = xs | 0, iys = ys | 0;\n\n                        if(xs > 0 && ys > 0 && ixs < (src_width - 1) && iys < (src_height - 1)) {\n                            a = Math.max(xs - ixs, 0.0);\n                            b = Math.max(ys - iys, 0.0);\n                            off = (src_width*iys + ixs)|0;\n\n                            p0 = src_d[off] +  a * (src_d[off+1] - src_d[off]);\n                            p1 = src_d[off+src_width] + a * (src_d[off+src_width+1] - src_d[off+src_width]);\n\n                            dst_d[dptr] = p0 + b * (p1 - p0);\n                        }\n                        else dst_d[dptr] = fill_value;\n                    }\n                }\n            },\n            // transform is 3x3 or 2x3 matrix_t only first 6 values referenced\n            warp_affine: function(src, dst, transform, fill_value) {\n                if (typeof fill_value === \"undefined\") { fill_value = 0; }\n                var src_width=src.cols, src_height=src.rows, dst_width=dst.cols, dst_height=dst.rows;\n                var src_d=src.data, dst_d=dst.data;\n                var x=0,y=0,off=0,ixs=0,iys=0,xs=0.0,ys=0.0,a=0.0,b=0.0,p0=0.0,p1=0.0;\n                var td=transform.data;\n                var m00=td[0],m01=td[1],m02=td[2],\n                    m10=td[3],m11=td[4],m12=td[5];\n\n                for(var dptr = 0; y < dst_height; ++y) {\n                    xs = m01 * y + m02;\n                    ys = m11 * y + m12;\n                    for(x = 0; x < dst_width; ++x, ++dptr, xs+=m00, ys+=m10) {\n                        ixs = xs | 0; iys = ys | 0;\n\n                        if(ixs >= 0 && iys >= 0 && ixs < (src_width - 1) && iys < (src_height - 1)) {\n                            a = xs - ixs;\n                            b = ys - iys;\n                            off = src_width*iys + ixs;\n\n                            p0 = src_d[off] +  a * (src_d[off+1] - src_d[off]);\n                            p1 = src_d[off+src_width] + a * (src_d[off+src_width+1] - src_d[off+src_width]);\n\n                            dst_d[dptr] = p0 + b * (p1 - p0);\n                        }\n                        else dst_d[dptr] = fill_value;\n                    }\n                }\n            },\n            \n            // Basic RGB Skin detection filter\n            // from http://popscan.blogspot.fr/2012/08/skin-detection-in-digital-images.html\n            skindetector: function(src,dst) {\n                var r,g,b,j;\n                var i = src.width*src.height;\n                while(i--){\n                    j = i*4;\n                    r = src.data[j];\n                    g = src.data[j+1];\n                    b = src.data[j+2];\n                    if((r>95)&&(g>40)&&(b>20)\n                     &&(r>g)&&(r>b)\n                     &&(r-Math.min(g,b)>15)\n                     &&(Math.abs(r-g)>15)){\n                         dst[i] = 255;\n                    } else {\n                        dst[i] = 0;\n                    }\n                }                \n            }\n        };\n    })();\n\n    global.imgproc = imgproc;\n\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * This is FAST corner detector, contributed to OpenCV by the author, Edward Rosten.\r\n */\r\n\r\n/*\r\nThe references are:\r\n * Machine learning for high-speed corner detection,\r\n   E. Rosten and T. Drummond, ECCV 2006\r\n * Faster and better: A machine learning approach to corner detection\r\n   E. Rosten, R. Porter and T. Drummond, PAMI, 2009  \r\n*/\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n    var fast_corners = (function() {\r\n\r\n        var offsets16 = new Int32Array([0, 3, 1, 3, 2, 2, 3, 1, 3, 0, 3, -1, 2, -2, 1, -3, 0, -3, -1, -3, -2, -2, -3, -1, -3, 0, -3, 1, -2, 2, -1, 3]);\r\n\r\n        var threshold_tab = new Uint8Array(512);\r\n        var pixel_off = new Int32Array(25);\r\n        var score_diff = new Int32Array(25);\r\n\r\n        // private functions\r\n        var _cmp_offsets = function(pixel, step, pattern_size) {\r\n            var k = 0;\r\n            var offsets = offsets16;\r\n            for( ; k < pattern_size; ++k ) {\r\n                pixel[k] = offsets[k<<1] + offsets[(k<<1)+1] * step;\r\n            }\r\n            for( ; k < 25; ++k ) {\r\n                pixel[k] = pixel[k - pattern_size];\r\n            }\r\n        },\r\n\r\n        _cmp_score_16 = function(src, off, pixel, d, threshold) {\r\n            var N = 25, k = 0, v = src[off];\r\n            var a0 = threshold,a=0,b0=0,b=0;\r\n\r\n            for( ; k < N; ++k ) {\r\n                d[k] = v - src[off+pixel[k]];\r\n            }\r\n\r\n            for( k = 0; k < 16; k += 2 ) {\r\n                a = Math.min(d[k+1], d[k+2]);\r\n                a = Math.min(a, d[k+3]);\r\n\r\n                if( a <= a0 ) continue;\r\n\r\n                a = Math.min(a, d[k+4]);\r\n                a = Math.min(a, d[k+5]);\r\n                a = Math.min(a, d[k+6]);\r\n                a = Math.min(a, d[k+7]);\r\n                a = Math.min(a, d[k+8]);\r\n                a0 = Math.max(a0, Math.min(a, d[k]));\r\n                a0 = Math.max(a0, Math.min(a, d[k+9]));\r\n            }\r\n\r\n            b0 = -a0;\r\n            for( k = 0; k < 16; k += 2 ) {\r\n                b = Math.max(d[k+1], d[k+2]);\r\n                b = Math.max(b, d[k+3]);\r\n                b = Math.max(b, d[k+4]);\r\n                b = Math.max(b, d[k+5]);\r\n\r\n                if( b >= b0 ) continue;\r\n                b = Math.max(b, d[k+6]);\r\n                b = Math.max(b, d[k+7]);\r\n                b = Math.max(b, d[k+8]);\r\n                b0 = Math.min(b0, Math.max(b, d[k]));\r\n                b0 = Math.min(b0, Math.max(b, d[k+9]));\r\n            }\r\n\r\n            return -b0-1;\r\n        };\r\n\r\n        var _threshold = 20;\r\n\r\n        return {\r\n            set_threshold: function(threshold) {\r\n                _threshold = Math.min(Math.max(threshold, 0), 255);\r\n                for (var i = -255; i <= 255; ++i) {\r\n                    threshold_tab[(i + 255)] = (i < -_threshold ? 1 : (i > _threshold ? 2 : 0));\r\n                }\r\n                return _threshold;\r\n            },\r\n            \r\n            detect: function(src, corners, border) {\r\n                if (typeof border === \"undefined\") { border = 3; }\r\n\r\n                var K = 8, N = 25;\r\n                var img = src.data, w = src.cols, h = src.rows;\r\n                var i=0, j=0, k=0, vt=0, x=0, m3=0;\r\n                var buf_node = jsfeat.cache.get_buffer(3 * w);\r\n                var cpbuf_node = jsfeat.cache.get_buffer(((w+1)*3)<<2);\r\n                var buf = buf_node.u8;\r\n                var cpbuf = cpbuf_node.i32;\r\n                var pixel = pixel_off;\r\n                var sd = score_diff;\r\n                var sy = Math.max(3, border);\r\n                var ey = Math.min((h-2), (h-border));\r\n                var sx = Math.max(3, border);\r\n                var ex = Math.min((w - 3), (w - border));\r\n                var _count = 0, corners_cnt = 0, pt;\r\n                var score_func = _cmp_score_16;\r\n                var thresh_tab = threshold_tab;\r\n                var threshold = _threshold;\r\n\r\n                var v=0,tab=0,d=0,ncorners=0,cornerpos=0,curr=0,ptr=0,prev=0,pprev=0;\r\n                var jp1=0,jm1=0,score=0;\r\n\r\n                _cmp_offsets(pixel, w, 16);\r\n\r\n                // local vars are faster?\r\n                var pixel0 = pixel[0];\r\n                var pixel1 = pixel[1];\r\n                var pixel2 = pixel[2];\r\n                var pixel3 = pixel[3];\r\n                var pixel4 = pixel[4];\r\n                var pixel5 = pixel[5];\r\n                var pixel6 = pixel[6];\r\n                var pixel7 = pixel[7];\r\n                var pixel8 = pixel[8];\r\n                var pixel9 = pixel[9];\r\n                var pixel10 = pixel[10];\r\n                var pixel11 = pixel[11];\r\n                var pixel12 = pixel[12];\r\n                var pixel13 = pixel[13];\r\n                var pixel14 = pixel[14];\r\n                var pixel15 = pixel[15];\r\n\r\n                for(i = 0; i < w*3; ++i) {\r\n                    buf[i] = 0;\r\n                }\r\n\r\n                for(i = sy; i < ey; ++i) {\r\n                    ptr = ((i * w) + sx)|0;\r\n                    m3 = (i - 3)%3;\r\n                    curr = (m3*w)|0;\r\n                    cornerpos = (m3*(w+1))|0;\r\n                    for (j = 0; j < w; ++j) buf[curr+j] = 0;\r\n                    ncorners = 0;\r\n                    \r\n                    if( i < (ey - 1) ) {\r\n                        j = sx;\r\n                        \r\n                        for( ; j < ex; ++j, ++ptr ) {\r\n                            v = img[ptr];\r\n                            tab = ( - v + 255 );\r\n                            d = ( thresh_tab[tab+img[ptr+pixel0]] | thresh_tab[tab+img[ptr+pixel8]] );\r\n                            \r\n                            if( d == 0 ) {\r\n                                continue;\r\n                            }\r\n                            \r\n                            d &= ( thresh_tab[tab+img[ptr+pixel2]] | thresh_tab[tab+img[ptr+pixel10]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel4]] | thresh_tab[tab+img[ptr+pixel12]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel6]] | thresh_tab[tab+img[ptr+pixel14]] );\r\n                            \r\n                            if( d == 0 ) {\r\n                                continue;\r\n                            }\r\n                            \r\n                            d &= ( thresh_tab[tab+img[ptr+pixel1]] | thresh_tab[tab+img[ptr+pixel9]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel3]] | thresh_tab[tab+img[ptr+pixel11]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel5]] | thresh_tab[tab+img[ptr+pixel13]] );\r\n                            d &= ( thresh_tab[tab+img[ptr+pixel7]] | thresh_tab[tab+img[ptr+pixel15]] );\r\n                            \r\n                            if( d & 1 ) {\r\n                                vt = (v - threshold);\r\n                                _count = 0;\r\n                                \r\n                                for( k = 0; k < N; ++k ) {\r\n                                    x = img[(ptr+pixel[k])];\r\n                                    if(x < vt) {\r\n                                        ++_count;\r\n                                        if( _count > K ) {\r\n                                            ++ncorners;\r\n                                            cpbuf[cornerpos+ncorners] = j;\r\n                                            buf[curr+j] = score_func(img, ptr, pixel, sd, threshold);\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        _count = 0;\r\n                                    }\r\n                                }\r\n                            }\r\n                            \r\n                            if( d & 2 ) {\r\n                                vt = (v + threshold);\r\n                                _count = 0;\r\n                                \r\n                                for( k = 0; k < N; ++k ) {\r\n                                    x = img[(ptr+pixel[k])];\r\n                                    if(x > vt) {\r\n                                        ++_count;\r\n                                        if( _count > K ) {\r\n                                            ++ncorners;\r\n                                            cpbuf[cornerpos+ncorners] = j;\r\n                                            buf[curr+j] = score_func(img, ptr, pixel, sd, threshold);\r\n                                            break;\r\n                                        }\r\n                                    }\r\n                                    else {\r\n                                        _count = 0;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    \r\n                    cpbuf[cornerpos+w] = ncorners;\r\n            \r\n                    if ( i == sy ) {\r\n                        continue;\r\n                    }\r\n                    \r\n                    m3 = (i - 4 + 3)%3;\r\n                    prev = (m3*w)|0;\r\n                    cornerpos = (m3*(w+1))|0;\r\n                    m3 = (i - 5 + 3)%3;\r\n                    pprev = (m3*w)|0;\r\n\r\n                    ncorners = cpbuf[cornerpos+w];\r\n                    \r\n                    for( k = 0; k < ncorners; ++k ) {\r\n                        j = cpbuf[cornerpos+k];\r\n                        jp1 = (j+1)|0;\r\n                        jm1 = (j-1)|0;\r\n                        score = buf[prev+j];\r\n                        if( (score > buf[prev+jp1] && score > buf[prev+jm1] &&\r\n                            score > buf[pprev+jm1] && score > buf[pprev+j] && score > buf[pprev+jp1] &&\r\n                            score > buf[curr+jm1] && score > buf[curr+j] && score > buf[curr+jp1]) ) {\r\n                            // save corner\r\n                            pt = corners[corners_cnt];\r\n                            pt.x = j, pt.y = (i-1), pt.score = score;\r\n                            corners_cnt++;\r\n                        }\r\n                    }\r\n                } // y loop\r\n                jsfeat.cache.put_buffer(buf_node);\r\n                jsfeat.cache.put_buffer(cpbuf_node);\r\n                return corners_cnt;\r\n            }\r\n        };\r\n    })();\r\n\r\n    global.fast_corners = fast_corners;\r\n    fast_corners.set_threshold(20); // set default\r\n\r\n})(jsfeat);\r\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n * Copyright 2007 Computer Vision Lab,\n * Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland.\n * @author Vincent Lepetit (http://cvlab.epfl.ch/~lepetit)\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var yape06 = (function() {\n        \n        var compute_laplacian = function(src, dst, w, h, Dxx, Dyy, sx,sy, ex,ey) {\n            var y=0,x=0,yrow=(sy*w+sx)|0,row=yrow;\n\n            for(y = sy; y < ey; ++y, yrow+=w, row = yrow) {\n                for(x = sx; x < ex; ++x, ++row) {\n                    dst[row] = -4 * src[row] + src[row+Dxx] + src[row-Dxx] + src[row+Dyy] + src[row-Dyy];\n                }\n            }\n        }\n\n        var hessian_min_eigen_value = function(src, off, tr, Dxx, Dyy, Dxy, Dyx) {\n            var Ixx = -2 * src[off] + src[off + Dxx] + src[off - Dxx];\n            var Iyy = -2 * src[off] + src[off + Dyy] + src[off - Dyy];\n            var Ixy = src[off + Dxy] + src[off - Dxy] - src[off + Dyx] - src[off - Dyx];\n            var sqrt_delta = ( Math.sqrt(((Ixx - Iyy) * (Ixx - Iyy) + 4 * Ixy * Ixy) ) )|0;\n\n            return Math.min(Math.abs(tr - sqrt_delta), Math.abs(-(tr + sqrt_delta)));\n        }\n\n        return {\n\n            laplacian_threshold: 30,\n            min_eigen_value_threshold: 25,\n\n            detect: function(src, points, border) {\n                if (typeof border === \"undefined\") { border = 5; }\n                var x=0,y=0;\n                var w=src.cols, h=src.rows, srd_d=src.data;\n                var Dxx = 5, Dyy = (5 * w)|0;\n                var Dxy = (3 + 3 * w)|0, Dyx = (3 - 3 * w)|0;\n                var lap_buf = jsfeat.cache.get_buffer((w*h)<<2);\n                var laplacian = lap_buf.i32;\n                var lv=0, row=0,rowx=0,min_eigen_value=0,pt;\n                var number_of_points = 0;\n                var lap_thresh = this.laplacian_threshold;\n                var eigen_thresh = this.min_eigen_value_threshold;\n\n                var sx = Math.max(5, border)|0;\n                var sy = Math.max(3, border)|0;\n                var ex = Math.min(w-5, w-border)|0;\n                var ey = Math.min(h-3, h-border)|0;\n\n                x = w*h;\n                while(--x>=0) {laplacian[x]=0;}\n                compute_laplacian(srd_d, laplacian, w, h, Dxx, Dyy, sx,sy, ex,ey);\n\n                row = (sy*w+sx)|0;\n                for(y = sy; y < ey; ++y, row += w) {\n                    for(x = sx, rowx=row; x < ex; ++x, ++rowx) {\n\n                        lv = laplacian[rowx];\n                        if ((lv < -lap_thresh &&\n                            lv < laplacian[rowx - 1]      && lv < laplacian[rowx + 1] &&\n                            lv < laplacian[rowx - w]     && lv < laplacian[rowx + w] &&\n                            lv < laplacian[rowx - w - 1] && lv < laplacian[rowx + w - 1] &&\n                            lv < laplacian[rowx - w + 1] && lv < laplacian[rowx + w + 1])\n                            ||\n                            (lv > lap_thresh &&\n                            lv > laplacian[rowx - 1]      && lv > laplacian[rowx + 1] &&\n                            lv > laplacian[rowx - w]     && lv > laplacian[rowx + w] &&\n                            lv > laplacian[rowx - w - 1] && lv > laplacian[rowx + w - 1] &&\n                            lv > laplacian[rowx - w + 1] && lv > laplacian[rowx + w + 1])\n                            ) {\n\n                            min_eigen_value = hessian_min_eigen_value(srd_d, rowx, lv, Dxx, Dyy, Dxy, Dyx);\n                            if (min_eigen_value > eigen_thresh) {\n                                pt = points[number_of_points];\n                                pt.x = x, pt.y = y, pt.score = min_eigen_value;\n                                ++number_of_points;\n                                ++x, ++rowx; // skip next pixel since this is maxima in 3x3\n                            }\n                        }\n                    }\n                }\n\n                jsfeat.cache.put_buffer(lap_buf);\n\n                return number_of_points;\n            }\n\n        };\n    })();\n\n    global.yape06 = yape06;\n\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * Copyright 2007 Computer Vision Lab,\r\n * Ecole Polytechnique Federale de Lausanne (EPFL), Switzerland.\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n\r\n    var yape = (function() {\r\n\r\n        var precompute_directions = function(step, dirs, R) {\r\n            var i = 0;\r\n            var x, y;\r\n\r\n            x = R;\r\n            for(y = 0; y < x; y++, i++)\r\n            {\r\n                x = (Math.sqrt((R * R - y * y)) + 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(x-- ; x < y && x >= 0; x--, i++)\r\n            {\r\n                y = (Math.sqrt((R * R - x * x)) + 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for( ; -x < y; x--, i++)\r\n            {\r\n                y = (Math.sqrt((R * R - x * x)) + 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(y-- ; y >= 0; y--, i++)\r\n            {\r\n                x = (-Math.sqrt((R * R - y * y)) - 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(; y > x; y--, i++)\r\n            {\r\n                x = (-Math.sqrt((R * R - y * y)) - 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(x++ ; x <= 0; x++, i++)\r\n            {\r\n                y = (-Math.sqrt((R * R - x * x)) - 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for( ; x < -y; x++, i++)\r\n            {\r\n                y = (-Math.sqrt((R * R - x * x)) - 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n            for(y++ ; y < 0; y++, i++)\r\n            {\r\n                x = (Math.sqrt((R * R - y * y)) + 0.5)|0;\r\n                dirs[i] = (x + step * y);\r\n            }\r\n\r\n            dirs[i] = dirs[0];\r\n            dirs[i + 1] = dirs[1];\r\n            return i;\r\n        }\r\n\r\n        var third_check = function (Sb, off, step) {\r\n            var n = 0;\r\n            if(Sb[off+1]   != 0) n++;\r\n            if(Sb[off-1]   != 0) n++;\r\n            if(Sb[off+step]   != 0) n++;\r\n            if(Sb[off+step+1] != 0) n++;\r\n            if(Sb[off+step-1] != 0) n++;\r\n            if(Sb[off-step]   != 0) n++;\r\n            if(Sb[off-step+1] != 0) n++;\r\n            if(Sb[off-step-1] != 0) n++;\r\n\r\n            return n;\r\n        }\r\n\r\n        var is_local_maxima = function(p, off, v, step, neighborhood) {\r\n            var x, y;\r\n\r\n            if (v > 0) {\r\n                off -= step*neighborhood;\r\n                for (y= -neighborhood; y<=neighborhood; ++y) {\r\n                    for (x= -neighborhood; x<=neighborhood; ++x) {\r\n                        if (p[off+x] > v) return false;\r\n                    }\r\n                    off += step;\r\n                }\r\n            } else {\r\n                off -= step*neighborhood;\r\n                for (y= -neighborhood; y<=neighborhood; ++y) {\r\n                    for (x= -neighborhood; x<=neighborhood; ++x) {\r\n                        if (p[off+x] < v) return false;\r\n                    }\r\n                    off += step;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        var perform_one_point = function(I, x, Scores, Im, Ip, dirs, opposite, dirs_nb) {\r\n          var score = 0;\r\n          var a = 0, b = (opposite - 1)|0;\r\n          var A=0, B0=0, B1=0, B2=0;\r\n          var state=0;\r\n\r\n          // WE KNOW THAT NOT(A ~ I0 & B1 ~ I0):\r\n          A = I[x+dirs[a]];\r\n          if ((A <= Ip)) {\r\n            if ((A >= Im)) { // A ~ I0\r\n              B0 = I[x+dirs[b]];\r\n              if ((B0 <= Ip)) {\r\n                if ((B0 >= Im)) { Scores[x] = 0; return; }\r\n                else {\r\n                  b++; B1 = I[x+dirs[b]];\r\n                  if ((B1 > Ip)) {\r\n                    b++; B2 = I[x+dirs[b]];\r\n                    if ((B2 > Ip)) state = 3;\r\n                    else if ((B2 < Im)) state = 6;\r\n                    else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n                  }\r\n                  else/* if ((B1 < Im))*/ {\r\n                    b++; B2 = I[x+dirs[b]];\r\n                    if ((B2 > Ip)) state = 7;\r\n                    else if ((B2 < Im)) state = 2;\r\n                    else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n                  }\r\n                  //else { Scores[x] = 0; return; } // A ~ I0, B1 ~ I0\r\n                }\r\n              }\r\n              else { // B0 < I0\r\n                b++; B1 = I[x+dirs[b]];\r\n                if ((B1 > Ip)) {\r\n                  b++; B2 = I[x+dirs[b]];\r\n                  if ((B2 > Ip)) state = 3;\r\n                  else if ((B2 < Im)) state = 6;\r\n                  else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n                }\r\n                else if ((B1 < Im)) {\r\n                  b++; B2 = I[x+dirs[b]];\r\n                  if ((B2 > Ip)) state = 7;\r\n                  else if ((B2 < Im)) state = 2;\r\n                  else { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n                }\r\n                else { Scores[x] = 0; return; } // A ~ I0, B1 ~ I0\r\n              }\r\n            }\r\n            else { // A > I0\r\n              B0 = I[x+dirs[b]];\r\n              if ((B0 > Ip)) { Scores[x] = 0; return; }\r\n                b++; B1 = I[x+dirs[b]];\r\n              if ((B1 > Ip)) { Scores[x] = 0; return; }\r\n                b++; B2 = I[x+dirs[b]];\r\n              if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                state = 1;\r\n            }\r\n          }\r\n          else // A < I0\r\n          {\r\n            B0 = I[x+dirs[b]];\r\n            if ((B0 < Im)) { Scores[x] = 0; return; }\r\n              b++; B1 = I[x+dirs[b]];\r\n            if ((B1 < Im)) { Scores[x] = 0; return; }\r\n              b++; B2 = I[x+dirs[b]];\r\n            if ((B2 < Im)) { Scores[x] = 0; return; }\r\n              state = 0;\r\n          }\r\n\r\n          for(a = 1; a <= opposite; a++)\r\n          {\r\n            A = I[x+dirs[a]];\r\n\r\n            switch(state)\r\n            {\r\n            case 0:\r\n              if ((A > Ip)) {\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 0; break; };\r\n              }\r\n              if ((A < Im)) {\r\n                if ((B1 > Ip)) { Scores[x] = 0; return; }\r\n                  if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                    B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 8; break; };\r\n              } \r\n              // A ~ I0\r\n              if ((B1 <= Ip)) { Scores[x] = 0; return; }\r\n                if ((B2 <= Ip)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              if ((B2 > Ip)) { score -= A + B1; state = 3; break; };\r\n              if ((B2 < Im)) { score -= A + B1; state = 6; break; };\r\n              { Scores[x] = 0; return; }\r\n\r\n            case 1:\r\n              if ((A < Im)) {\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 1; break; };\r\n              }\r\n              if ((A > Ip)) {\r\n                if ((B1 < Im)) { Scores[x] = 0; return; }\r\n                  if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                    B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 9; break; };\r\n              }\r\n              // A ~ I0\r\n              if ((B1 >= Im)) { Scores[x] = 0; return; }\r\n                if ((B2 >= Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              if ((B2 < Im)) { score -= A + B1; state = 2; break; };\r\n              if ((B2 > Ip)) { score -= A + B1; state = 7; break; };\r\n              { Scores[x] = 0; return; }\r\n\r\n            case 2:\r\n              if ((A > Ip)) { Scores[x] = 0; return; }\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              if ((A < Im))\r\n              {\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 4; break; };\r\n              } \r\n              // A ~ I0\r\n              if ((B2 > Ip)) { score -= A + B1; state = 7; break; };\r\n              if ((B2 < Im)) { score -= A + B1; state = 2; break; };\r\n              { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n\r\n            case 3:\r\n              if ((A < Im)) { Scores[x] = 0; return; }\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              if ((A > Ip)) {\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 5; break; };\r\n              }\r\n              // A ~ I0\r\n              if ((B2 > Ip)) { score -= A + B1; state = 3; break; };\r\n              if ((B2 < Im)) { score -= A + B1; state = 6; break; };\r\n              { Scores[x] = 0; return; }\r\n\r\n            case 4:\r\n              if ((A > Ip)) { Scores[x] = 0; return; }\r\n                if ((A < Im)) {\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                  if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                    { score -= A + B1; state = 1; break; };\r\n                }\r\n                if ((B2 >= Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { score -= A + B1; state = 2; break; };\r\n                if ((B2 > Ip)) { score -= A + B1; state = 7; break; };\r\n                { Scores[x] = 0; return; }\r\n\r\n            case 5:\r\n              if ((A < Im)) { Scores[x] = 0; return; }\r\n                if ((A > Ip)) {\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                  if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                    { score -= A + B1; state = 0; break; };\r\n                }\r\n                // A ~ I0\r\n                if ((B2 <= Ip)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { score -= A + B1; state = 3; break; };\r\n                if ((B2 < Im)) { score -= A + B1; state = 6; break; };\r\n                { Scores[x] = 0; return; }\r\n\r\n            case 7:\r\n              if ((A > Ip)) { Scores[x] = 0; return; }\r\n                if ((A < Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              // A ~ I0\r\n              if ((B2 > Ip)) { score -= A + B1; state = 3; break; };\r\n              if ((B2 < Im)) { score -= A + B1; state = 6; break; };\r\n              { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n\r\n            case 6:\r\n              if ((A > Ip)) { Scores[x] = 0; return; }\r\n                if ((A < Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n              // A ~ I0\r\n              if ((B2 < Im)) { score -= A + B1; state = 2; break; };\r\n              if ((B2 > Ip)) { score -= A + B1; state = 7; break; };\r\n              { Scores[x] = 0; return; } // A ~ I0, B2 ~ I0\r\n\r\n            case 8:\r\n              if ((A > Ip)) {\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 9; break; };\r\n              }\r\n              if ((A < Im)) {\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 1; break; };\r\n              }\r\n              { Scores[x] = 0; return; }\r\n\r\n            case 9:\r\n              if ((A < Im)) {\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 > Ip)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 8; break; };\r\n              }\r\n              if ((A > Ip)) {\r\n                B1 = B2; b++; B2 = I[x+dirs[b]];\r\n                if ((B2 < Im)) { Scores[x] = 0; return; }\r\n                  { score -= A + B1; state = 0; break; };\r\n              }\r\n              { Scores[x] = 0; return; }\r\n\r\n            default:\r\n              //\"PB default\";\r\n              break;\r\n            } // switch(state)\r\n          } // for(a...)\r\n\r\n          Scores[x] = (score + dirs_nb * I[x]);\r\n        }\r\n\r\n        var lev_table_t = (function () {\r\n            function lev_table_t(w, h, r) {\r\n                this.dirs = new Int32Array(1024);\r\n                this.dirs_count = precompute_directions(w, this.dirs, r)|0;\r\n                this.scores = new Int32Array(w*h);\r\n                this.radius = r|0;\r\n            }\r\n            return lev_table_t;\r\n        })();\r\n        \r\n        return {\r\n\r\n            level_tables: [],\r\n            tau: 7,\r\n\r\n            init: function(width, height, radius, pyramid_levels) {\r\n                if (typeof pyramid_levels === \"undefined\") { pyramid_levels = 1; }\r\n                var i;\r\n                radius = Math.min(radius, 7);\r\n                radius = Math.max(radius, 3);\r\n                for(i = 0; i < pyramid_levels; ++i) {\r\n                    this.level_tables[i] = new lev_table_t(width>>i, height>>i, radius);\r\n                }\r\n            },\r\n\r\n            detect: function(src, points, border) {\r\n                if (typeof border === \"undefined\") { border = 4; }\r\n                var t = this.level_tables[0];\r\n                var R = t.radius|0, Rm1 = (R-1)|0;\r\n                var dirs = t.dirs;\r\n                var dirs_count = t.dirs_count|0;\r\n                var opposite = dirs_count >> 1;\r\n                var img = src.data, w=src.cols|0, h=src.rows|0,hw=w>>1;\r\n                var scores = t.scores;\r\n                var x=0,y=0,row=0,rowx=0,ip=0,im=0,abs_score=0, score=0;\r\n                var tau = this.tau|0;\r\n                var number_of_points = 0, pt;\r\n\r\n                var sx = Math.max(R+1, border)|0;\r\n                var sy = Math.max(R+1, border)|0;\r\n                var ex = Math.min(w-R-2, w-border)|0;\r\n                var ey = Math.min(h-R-2, h-border)|0;\r\n\r\n                row = (sy*w+sx)|0;\r\n                for(y = sy; y < ey; ++y, row+=w) {\r\n                    for(x = sx, rowx = row; x < ex; ++x, ++rowx) {\r\n                        ip = img[rowx] + tau, im = img[rowx] - tau;\r\n\r\n                        if (im<img[rowx+R] && img[rowx+R]<ip && im<img[rowx-R] && img[rowx-R]<ip) {\r\n                            scores[rowx] = 0;\r\n                        } else {\r\n                            perform_one_point(img, rowx, scores, im, ip, dirs, opposite, dirs_count);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // local maxima\r\n                row = (sy*w+sx)|0;\r\n                for(y = sy; y < ey; ++y, row+=w) {\r\n                    for(x = sx, rowx = row; x < ex; ++x, ++rowx) {\r\n                        score = scores[rowx];\r\n                        abs_score = Math.abs(score);\r\n                        if(abs_score < 5) {\r\n                            // if this pixel is 0, the next one will not be good enough. Skip it.\r\n                            ++x, ++rowx;\r\n                        } else {\r\n                            if(third_check(scores, rowx, w) >= 3 && is_local_maxima(scores, rowx, score, hw, R)) {\r\n                                pt = points[number_of_points];\r\n                                pt.x = x, pt.y = y, pt.score = abs_score;\r\n                                ++number_of_points;\r\n\r\n                                x += Rm1, rowx += Rm1;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return number_of_points;\r\n            }\r\n        };\r\n\r\n    })();\r\n\r\n    global.yape = yape;\r\n\r\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n * Original implementation derived from OpenCV,\n * @authors Ethan Rublee, Vincent Rabaud, Gary Bradski\n */\n\n(function(global) {\n    \"use strict\";\n    //\n\n    var orb = (function() {\n\n    \tvar bit_pattern_31_ = new Int32Array([\n\t\t    8,-3, 9,5/*mean (0), correlation (0)*/,\n\t\t    4,2, 7,-12/*mean (1.12461e-05), correlation (0.0437584)*/,\n\t\t    -11,9, -8,2/*mean (3.37382e-05), correlation (0.0617409)*/,\n\t\t    7,-12, 12,-13/*mean (5.62303e-05), correlation (0.0636977)*/,\n\t\t    2,-13, 2,12/*mean (0.000134953), correlation (0.085099)*/,\n\t\t    1,-7, 1,6/*mean (0.000528565), correlation (0.0857175)*/,\n\t\t    -2,-10, -2,-4/*mean (0.0188821), correlation (0.0985774)*/,\n\t\t    -13,-13, -11,-8/*mean (0.0363135), correlation (0.0899616)*/,\n\t\t    -13,-3, -12,-9/*mean (0.121806), correlation (0.099849)*/,\n\t\t    10,4, 11,9/*mean (0.122065), correlation (0.093285)*/,\n\t\t    -13,-8, -8,-9/*mean (0.162787), correlation (0.0942748)*/,\n\t\t    -11,7, -9,12/*mean (0.21561), correlation (0.0974438)*/,\n\t\t    7,7, 12,6/*mean (0.160583), correlation (0.130064)*/,\n\t\t    -4,-5, -3,0/*mean (0.228171), correlation (0.132998)*/,\n\t\t    -13,2, -12,-3/*mean (0.00997526), correlation (0.145926)*/,\n\t\t    -9,0, -7,5/*mean (0.198234), correlation (0.143636)*/,\n\t\t    12,-6, 12,-1/*mean (0.0676226), correlation (0.16689)*/,\n\t\t    -3,6, -2,12/*mean (0.166847), correlation (0.171682)*/,\n\t\t    -6,-13, -4,-8/*mean (0.101215), correlation (0.179716)*/,\n\t\t    11,-13, 12,-8/*mean (0.200641), correlation (0.192279)*/,\n\t\t    4,7, 5,1/*mean (0.205106), correlation (0.186848)*/,\n\t\t    5,-3, 10,-3/*mean (0.234908), correlation (0.192319)*/,\n\t\t    3,-7, 6,12/*mean (0.0709964), correlation (0.210872)*/,\n\t\t    -8,-7, -6,-2/*mean (0.0939834), correlation (0.212589)*/,\n\t\t    -2,11, -1,-10/*mean (0.127778), correlation (0.20866)*/,\n\t\t    -13,12, -8,10/*mean (0.14783), correlation (0.206356)*/,\n\t\t    -7,3, -5,-3/*mean (0.182141), correlation (0.198942)*/,\n\t\t    -4,2, -3,7/*mean (0.188237), correlation (0.21384)*/,\n\t\t    -10,-12, -6,11/*mean (0.14865), correlation (0.23571)*/,\n\t\t    5,-12, 6,-7/*mean (0.222312), correlation (0.23324)*/,\n\t\t    5,-6, 7,-1/*mean (0.229082), correlation (0.23389)*/,\n\t\t    1,0, 4,-5/*mean (0.241577), correlation (0.215286)*/,\n\t\t    9,11, 11,-13/*mean (0.00338507), correlation (0.251373)*/,\n\t\t    4,7, 4,12/*mean (0.131005), correlation (0.257622)*/,\n\t\t    2,-1, 4,4/*mean (0.152755), correlation (0.255205)*/,\n\t\t    -4,-12, -2,7/*mean (0.182771), correlation (0.244867)*/,\n\t\t    -8,-5, -7,-10/*mean (0.186898), correlation (0.23901)*/,\n\t\t    4,11, 9,12/*mean (0.226226), correlation (0.258255)*/,\n\t\t    0,-8, 1,-13/*mean (0.0897886), correlation (0.274827)*/,\n\t\t    -13,-2, -8,2/*mean (0.148774), correlation (0.28065)*/,\n\t\t    -3,-2, -2,3/*mean (0.153048), correlation (0.283063)*/,\n\t\t    -6,9, -4,-9/*mean (0.169523), correlation (0.278248)*/,\n\t\t    8,12, 10,7/*mean (0.225337), correlation (0.282851)*/,\n\t\t    0,9, 1,3/*mean (0.226687), correlation (0.278734)*/,\n\t\t    7,-5, 11,-10/*mean (0.00693882), correlation (0.305161)*/,\n\t\t    -13,-6, -11,0/*mean (0.0227283), correlation (0.300181)*/,\n\t\t    10,7, 12,1/*mean (0.125517), correlation (0.31089)*/,\n\t\t    -6,-3, -6,12/*mean (0.131748), correlation (0.312779)*/,\n\t\t    10,-9, 12,-4/*mean (0.144827), correlation (0.292797)*/,\n\t\t    -13,8, -8,-12/*mean (0.149202), correlation (0.308918)*/,\n\t\t    -13,0, -8,-4/*mean (0.160909), correlation (0.310013)*/,\n\t\t    3,3, 7,8/*mean (0.177755), correlation (0.309394)*/,\n\t\t    5,7, 10,-7/*mean (0.212337), correlation (0.310315)*/,\n\t\t    -1,7, 1,-12/*mean (0.214429), correlation (0.311933)*/,\n\t\t    3,-10, 5,6/*mean (0.235807), correlation (0.313104)*/,\n\t\t    2,-4, 3,-10/*mean (0.00494827), correlation (0.344948)*/,\n\t\t    -13,0, -13,5/*mean (0.0549145), correlation (0.344675)*/,\n\t\t    -13,-7, -12,12/*mean (0.103385), correlation (0.342715)*/,\n\t\t    -13,3, -11,8/*mean (0.134222), correlation (0.322922)*/,\n\t\t    -7,12, -4,7/*mean (0.153284), correlation (0.337061)*/,\n\t\t    6,-10, 12,8/*mean (0.154881), correlation (0.329257)*/,\n\t\t    -9,-1, -7,-6/*mean (0.200967), correlation (0.33312)*/,\n\t\t    -2,-5, 0,12/*mean (0.201518), correlation (0.340635)*/,\n\t\t    -12,5, -7,5/*mean (0.207805), correlation (0.335631)*/,\n\t\t    3,-10, 8,-13/*mean (0.224438), correlation (0.34504)*/,\n\t\t    -7,-7, -4,5/*mean (0.239361), correlation (0.338053)*/,\n\t\t    -3,-2, -1,-7/*mean (0.240744), correlation (0.344322)*/,\n\t\t    2,9, 5,-11/*mean (0.242949), correlation (0.34145)*/,\n\t\t    -11,-13, -5,-13/*mean (0.244028), correlation (0.336861)*/,\n\t\t    -1,6, 0,-1/*mean (0.247571), correlation (0.343684)*/,\n\t\t    5,-3, 5,2/*mean (0.000697256), correlation (0.357265)*/,\n\t\t    -4,-13, -4,12/*mean (0.00213675), correlation (0.373827)*/,\n\t\t    -9,-6, -9,6/*mean (0.0126856), correlation (0.373938)*/,\n\t\t    -12,-10, -8,-4/*mean (0.0152497), correlation (0.364237)*/,\n\t\t    10,2, 12,-3/*mean (0.0299933), correlation (0.345292)*/,\n\t\t    7,12, 12,12/*mean (0.0307242), correlation (0.366299)*/,\n\t\t    -7,-13, -6,5/*mean (0.0534975), correlation (0.368357)*/,\n\t\t    -4,9, -3,4/*mean (0.099865), correlation (0.372276)*/,\n\t\t    7,-1, 12,2/*mean (0.117083), correlation (0.364529)*/,\n\t\t    -7,6, -5,1/*mean (0.126125), correlation (0.369606)*/,\n\t\t    -13,11, -12,5/*mean (0.130364), correlation (0.358502)*/,\n\t\t    -3,7, -2,-6/*mean (0.131691), correlation (0.375531)*/,\n\t\t    7,-8, 12,-7/*mean (0.160166), correlation (0.379508)*/,\n\t\t    -13,-7, -11,-12/*mean (0.167848), correlation (0.353343)*/,\n\t\t    1,-3, 12,12/*mean (0.183378), correlation (0.371916)*/,\n\t\t    2,-6, 3,0/*mean (0.228711), correlation (0.371761)*/,\n\t\t    -4,3, -2,-13/*mean (0.247211), correlation (0.364063)*/,\n\t\t    -1,-13, 1,9/*mean (0.249325), correlation (0.378139)*/,\n\t\t    7,1, 8,-6/*mean (0.000652272), correlation (0.411682)*/,\n\t\t    1,-1, 3,12/*mean (0.00248538), correlation (0.392988)*/,\n\t\t    9,1, 12,6/*mean (0.0206815), correlation (0.386106)*/,\n\t\t    -1,-9, -1,3/*mean (0.0364485), correlation (0.410752)*/,\n\t\t    -13,-13, -10,5/*mean (0.0376068), correlation (0.398374)*/,\n\t\t    7,7, 10,12/*mean (0.0424202), correlation (0.405663)*/,\n\t\t    12,-5, 12,9/*mean (0.0942645), correlation (0.410422)*/,\n\t\t    6,3, 7,11/*mean (0.1074), correlation (0.413224)*/,\n\t\t    5,-13, 6,10/*mean (0.109256), correlation (0.408646)*/,\n\t\t    2,-12, 2,3/*mean (0.131691), correlation (0.416076)*/,\n\t\t    3,8, 4,-6/*mean (0.165081), correlation (0.417569)*/,\n\t\t    2,6, 12,-13/*mean (0.171874), correlation (0.408471)*/,\n\t\t    9,-12, 10,3/*mean (0.175146), correlation (0.41296)*/,\n\t\t    -8,4, -7,9/*mean (0.183682), correlation (0.402956)*/,\n\t\t    -11,12, -4,-6/*mean (0.184672), correlation (0.416125)*/,\n\t\t    1,12, 2,-8/*mean (0.191487), correlation (0.386696)*/,\n\t\t    6,-9, 7,-4/*mean (0.192668), correlation (0.394771)*/,\n\t\t    2,3, 3,-2/*mean (0.200157), correlation (0.408303)*/,\n\t\t    6,3, 11,0/*mean (0.204588), correlation (0.411762)*/,\n\t\t    3,-3, 8,-8/*mean (0.205904), correlation (0.416294)*/,\n\t\t    7,8, 9,3/*mean (0.213237), correlation (0.409306)*/,\n\t\t    -11,-5, -6,-4/*mean (0.243444), correlation (0.395069)*/,\n\t\t    -10,11, -5,10/*mean (0.247672), correlation (0.413392)*/,\n\t\t    -5,-8, -3,12/*mean (0.24774), correlation (0.411416)*/,\n\t\t    -10,5, -9,0/*mean (0.00213675), correlation (0.454003)*/,\n\t\t    8,-1, 12,-6/*mean (0.0293635), correlation (0.455368)*/,\n\t\t    4,-6, 6,-11/*mean (0.0404971), correlation (0.457393)*/,\n\t\t    -10,12, -8,7/*mean (0.0481107), correlation (0.448364)*/,\n\t\t    4,-2, 6,7/*mean (0.050641), correlation (0.455019)*/,\n\t\t    -2,0, -2,12/*mean (0.0525978), correlation (0.44338)*/,\n\t\t    -5,-8, -5,2/*mean (0.0629667), correlation (0.457096)*/,\n\t\t    7,-6, 10,12/*mean (0.0653846), correlation (0.445623)*/,\n\t\t    -9,-13, -8,-8/*mean (0.0858749), correlation (0.449789)*/,\n\t\t    -5,-13, -5,-2/*mean (0.122402), correlation (0.450201)*/,\n\t\t    8,-8, 9,-13/*mean (0.125416), correlation (0.453224)*/,\n\t\t    -9,-11, -9,0/*mean (0.130128), correlation (0.458724)*/,\n\t\t    1,-8, 1,-2/*mean (0.132467), correlation (0.440133)*/,\n\t\t    7,-4, 9,1/*mean (0.132692), correlation (0.454)*/,\n\t\t    -2,1, -1,-4/*mean (0.135695), correlation (0.455739)*/,\n\t\t    11,-6, 12,-11/*mean (0.142904), correlation (0.446114)*/,\n\t\t    -12,-9, -6,4/*mean (0.146165), correlation (0.451473)*/,\n\t\t    3,7, 7,12/*mean (0.147627), correlation (0.456643)*/,\n\t\t    5,5, 10,8/*mean (0.152901), correlation (0.455036)*/,\n\t\t    0,-4, 2,8/*mean (0.167083), correlation (0.459315)*/,\n\t\t    -9,12, -5,-13/*mean (0.173234), correlation (0.454706)*/,\n\t\t    0,7, 2,12/*mean (0.18312), correlation (0.433855)*/,\n\t\t    -1,2, 1,7/*mean (0.185504), correlation (0.443838)*/,\n\t\t    5,11, 7,-9/*mean (0.185706), correlation (0.451123)*/,\n\t\t    3,5, 6,-8/*mean (0.188968), correlation (0.455808)*/,\n\t\t    -13,-4, -8,9/*mean (0.191667), correlation (0.459128)*/,\n\t\t    -5,9, -3,-3/*mean (0.193196), correlation (0.458364)*/,\n\t\t    -4,-7, -3,-12/*mean (0.196536), correlation (0.455782)*/,\n\t\t    6,5, 8,0/*mean (0.1972), correlation (0.450481)*/,\n\t\t    -7,6, -6,12/*mean (0.199438), correlation (0.458156)*/,\n\t\t    -13,6, -5,-2/*mean (0.211224), correlation (0.449548)*/,\n\t\t    1,-10, 3,10/*mean (0.211718), correlation (0.440606)*/,\n\t\t    4,1, 8,-4/*mean (0.213034), correlation (0.443177)*/,\n\t\t    -2,-2, 2,-13/*mean (0.234334), correlation (0.455304)*/,\n\t\t    2,-12, 12,12/*mean (0.235684), correlation (0.443436)*/,\n\t\t    -2,-13, 0,-6/*mean (0.237674), correlation (0.452525)*/,\n\t\t    4,1, 9,3/*mean (0.23962), correlation (0.444824)*/,\n\t\t    -6,-10, -3,-5/*mean (0.248459), correlation (0.439621)*/,\n\t\t    -3,-13, -1,1/*mean (0.249505), correlation (0.456666)*/,\n\t\t    7,5, 12,-11/*mean (0.00119208), correlation (0.495466)*/,\n\t\t    4,-2, 5,-7/*mean (0.00372245), correlation (0.484214)*/,\n\t\t    -13,9, -9,-5/*mean (0.00741116), correlation (0.499854)*/,\n\t\t    7,1, 8,6/*mean (0.0208952), correlation (0.499773)*/,\n\t\t    7,-8, 7,6/*mean (0.0220085), correlation (0.501609)*/,\n\t\t    -7,-4, -7,1/*mean (0.0233806), correlation (0.496568)*/,\n\t\t    -8,11, -7,-8/*mean (0.0236505), correlation (0.489719)*/,\n\t\t    -13,6, -12,-8/*mean (0.0268781), correlation (0.503487)*/,\n\t\t    2,4, 3,9/*mean (0.0323324), correlation (0.501938)*/,\n\t\t    10,-5, 12,3/*mean (0.0399235), correlation (0.494029)*/,\n\t\t    -6,-5, -6,7/*mean (0.0420153), correlation (0.486579)*/,\n\t\t    8,-3, 9,-8/*mean (0.0548021), correlation (0.484237)*/,\n\t\t    2,-12, 2,8/*mean (0.0616622), correlation (0.496642)*/,\n\t\t    -11,-2, -10,3/*mean (0.0627755), correlation (0.498563)*/,\n\t\t    -12,-13, -7,-9/*mean (0.0829622), correlation (0.495491)*/,\n\t\t    -11,0, -10,-5/*mean (0.0843342), correlation (0.487146)*/,\n\t\t    5,-3, 11,8/*mean (0.0929937), correlation (0.502315)*/,\n\t\t    -2,-13, -1,12/*mean (0.113327), correlation (0.48941)*/,\n\t\t    -1,-8, 0,9/*mean (0.132119), correlation (0.467268)*/,\n\t\t    -13,-11, -12,-5/*mean (0.136269), correlation (0.498771)*/,\n\t\t    -10,-2, -10,11/*mean (0.142173), correlation (0.498714)*/,\n\t\t    -3,9, -2,-13/*mean (0.144141), correlation (0.491973)*/,\n\t\t    2,-3, 3,2/*mean (0.14892), correlation (0.500782)*/,\n\t\t    -9,-13, -4,0/*mean (0.150371), correlation (0.498211)*/,\n\t\t    -4,6, -3,-10/*mean (0.152159), correlation (0.495547)*/,\n\t\t    -4,12, -2,-7/*mean (0.156152), correlation (0.496925)*/,\n\t\t    -6,-11, -4,9/*mean (0.15749), correlation (0.499222)*/,\n\t\t    6,-3, 6,11/*mean (0.159211), correlation (0.503821)*/,\n\t\t    -13,11, -5,5/*mean (0.162427), correlation (0.501907)*/,\n\t\t    11,11, 12,6/*mean (0.16652), correlation (0.497632)*/,\n\t\t    7,-5, 12,-2/*mean (0.169141), correlation (0.484474)*/,\n\t\t    -1,12, 0,7/*mean (0.169456), correlation (0.495339)*/,\n\t\t    -4,-8, -3,-2/*mean (0.171457), correlation (0.487251)*/,\n\t\t    -7,1, -6,7/*mean (0.175), correlation (0.500024)*/,\n\t\t    -13,-12, -8,-13/*mean (0.175866), correlation (0.497523)*/,\n\t\t    -7,-2, -6,-8/*mean (0.178273), correlation (0.501854)*/,\n\t\t    -8,5, -6,-9/*mean (0.181107), correlation (0.494888)*/,\n\t\t    -5,-1, -4,5/*mean (0.190227), correlation (0.482557)*/,\n\t\t    -13,7, -8,10/*mean (0.196739), correlation (0.496503)*/,\n\t\t    1,5, 5,-13/*mean (0.19973), correlation (0.499759)*/,\n\t\t    1,0, 10,-13/*mean (0.204465), correlation (0.49873)*/,\n\t\t    9,12, 10,-1/*mean (0.209334), correlation (0.49063)*/,\n\t\t    5,-8, 10,-9/*mean (0.211134), correlation (0.503011)*/,\n\t\t    -1,11, 1,-13/*mean (0.212), correlation (0.499414)*/,\n\t\t    -9,-3, -6,2/*mean (0.212168), correlation (0.480739)*/,\n\t\t    -1,-10, 1,12/*mean (0.212731), correlation (0.502523)*/,\n\t\t    -13,1, -8,-10/*mean (0.21327), correlation (0.489786)*/,\n\t\t    8,-11, 10,-6/*mean (0.214159), correlation (0.488246)*/,\n\t\t    2,-13, 3,-6/*mean (0.216993), correlation (0.50287)*/,\n\t\t    7,-13, 12,-9/*mean (0.223639), correlation (0.470502)*/,\n\t\t    -10,-10, -5,-7/*mean (0.224089), correlation (0.500852)*/,\n\t\t    -10,-8, -8,-13/*mean (0.228666), correlation (0.502629)*/,\n\t\t    4,-6, 8,5/*mean (0.22906), correlation (0.498305)*/,\n\t\t    3,12, 8,-13/*mean (0.233378), correlation (0.503825)*/,\n\t\t    -4,2, -3,-3/*mean (0.234323), correlation (0.476692)*/,\n\t\t    5,-13, 10,-12/*mean (0.236392), correlation (0.475462)*/,\n\t\t    4,-13, 5,-1/*mean (0.236842), correlation (0.504132)*/,\n\t\t    -9,9, -4,3/*mean (0.236977), correlation (0.497739)*/,\n\t\t    0,3, 3,-9/*mean (0.24314), correlation (0.499398)*/,\n\t\t    -12,1, -6,1/*mean (0.243297), correlation (0.489447)*/,\n\t\t    3,2, 4,-8/*mean (0.00155196), correlation (0.553496)*/,\n\t\t    -10,-10, -10,9/*mean (0.00239541), correlation (0.54297)*/,\n\t\t    8,-13, 12,12/*mean (0.0034413), correlation (0.544361)*/,\n\t\t    -8,-12, -6,-5/*mean (0.003565), correlation (0.551225)*/,\n\t\t    2,2, 3,7/*mean (0.00835583), correlation (0.55285)*/,\n\t\t    10,6, 11,-8/*mean (0.00885065), correlation (0.540913)*/,\n\t\t    6,8, 8,-12/*mean (0.0101552), correlation (0.551085)*/,\n\t\t    -7,10, -6,5/*mean (0.0102227), correlation (0.533635)*/,\n\t\t    -3,-9, -3,9/*mean (0.0110211), correlation (0.543121)*/,\n\t\t    -1,-13, -1,5/*mean (0.0113473), correlation (0.550173)*/,\n\t\t    -3,-7, -3,4/*mean (0.0140913), correlation (0.554774)*/,\n\t\t    -8,-2, -8,3/*mean (0.017049), correlation (0.55461)*/,\n\t\t    4,2, 12,12/*mean (0.01778), correlation (0.546921)*/,\n\t\t    2,-5, 3,11/*mean (0.0224022), correlation (0.549667)*/,\n\t\t    6,-9, 11,-13/*mean (0.029161), correlation (0.546295)*/,\n\t\t    3,-1, 7,12/*mean (0.0303081), correlation (0.548599)*/,\n\t\t    11,-1, 12,4/*mean (0.0355151), correlation (0.523943)*/,\n\t\t    -3,0, -3,6/*mean (0.0417904), correlation (0.543395)*/,\n\t\t    4,-11, 4,12/*mean (0.0487292), correlation (0.542818)*/,\n\t\t    2,-4, 2,1/*mean (0.0575124), correlation (0.554888)*/,\n\t\t    -10,-6, -8,1/*mean (0.0594242), correlation (0.544026)*/,\n\t\t    -13,7, -11,1/*mean (0.0597391), correlation (0.550524)*/,\n\t\t    -13,12, -11,-13/*mean (0.0608974), correlation (0.55383)*/,\n\t\t    6,0, 11,-13/*mean (0.065126), correlation (0.552006)*/,\n\t\t    0,-1, 1,4/*mean (0.074224), correlation (0.546372)*/,\n\t\t    -13,3, -9,-2/*mean (0.0808592), correlation (0.554875)*/,\n\t\t    -9,8, -6,-3/*mean (0.0883378), correlation (0.551178)*/,\n\t\t    -13,-6, -8,-2/*mean (0.0901035), correlation (0.548446)*/,\n\t\t    5,-9, 8,10/*mean (0.0949843), correlation (0.554694)*/,\n\t\t    2,7, 3,-9/*mean (0.0994152), correlation (0.550979)*/,\n\t\t    -1,-6, -1,-1/*mean (0.10045), correlation (0.552714)*/,\n\t\t    9,5, 11,-2/*mean (0.100686), correlation (0.552594)*/,\n\t\t    11,-3, 12,-8/*mean (0.101091), correlation (0.532394)*/,\n\t\t    3,0, 3,5/*mean (0.101147), correlation (0.525576)*/,\n\t\t    -1,4, 0,10/*mean (0.105263), correlation (0.531498)*/,\n\t\t    3,-6, 4,5/*mean (0.110785), correlation (0.540491)*/,\n\t\t    -13,0, -10,5/*mean (0.112798), correlation (0.536582)*/,\n\t\t    5,8, 12,11/*mean (0.114181), correlation (0.555793)*/,\n\t\t    8,9, 9,-6/*mean (0.117431), correlation (0.553763)*/,\n\t\t    7,-4, 8,-12/*mean (0.118522), correlation (0.553452)*/,\n\t\t    -10,4, -10,9/*mean (0.12094), correlation (0.554785)*/,\n\t\t    7,3, 12,4/*mean (0.122582), correlation (0.555825)*/,\n\t\t    9,-7, 10,-2/*mean (0.124978), correlation (0.549846)*/,\n\t\t    7,0, 12,-2/*mean (0.127002), correlation (0.537452)*/,\n\t\t    -1,-6, 0,-11/*mean (0.127148), correlation (0.547401)*/\n\t\t]);\n\n\t    var H = new jsfeat.matrix_t(3, 3, jsfeat.F32_t|jsfeat.C1_t);\n\t    var patch_img = new jsfeat.matrix_t(32, 32, jsfeat.U8_t|jsfeat.C1_t);\n\n\t    var rectify_patch = function(src, dst, angle, px, py, psize) {\n\t    \tvar cosine = Math.cos(angle);\n\t    \tvar sine   = Math.sin(angle);\n\n\t        H.data[0] = cosine, H.data[1] = -sine,    H.data[2] = (-cosine + sine  ) * psize*0.5 + px,\n\t        H.data[3] = sine,   H.data[4] =  cosine,  H.data[5] = (-sine   - cosine) * psize*0.5 + py;\n\n\t        jsfeat.imgproc.warp_affine(src, dst, H, 128);\n\t    }\n\n    \treturn {\n\n    \t\tdescribe: function(src, corners, count, descriptors) {\n    \t\t\tvar DESCR_SIZE = 32; // bytes;\n\t\t\t\tvar i=0,b=0,px=0.0,py=0.0,angle=0.0;\n\t\t\t\tvar t0=0, t1=0, val=0;\n\t\t\t\tvar img = src.data, w = src.cols, h = src.rows;\n\t\t\t\tvar patch_d = patch_img.data;\n\t\t\t\tvar patch_off = 16*32 + 16; // center of patch\n\t\t\t\tvar patt=0;\n\n\t\t\t\tif(!(descriptors.type&jsfeat.U8_t)) {\n\t\t\t\t\t// relocate to U8 type\n\t\t\t\t\tdescriptors.type = jsfeat.U8_t;\n\t\t\t\t\tdescriptors.cols = DESCR_SIZE;\n\t                descriptors.rows = count;\n\t                descriptors.channel = 1;\n\t\t\t\t\tdescriptors.allocate();\n\t\t\t\t} else {\n\t\t\t\t\tdescriptors.resize(DESCR_SIZE, count, 1);\n\t\t\t\t}\n\n\t\t\t\tvar descr_d = descriptors.data;\n\t\t\t\tvar descr_off = 0;\n\n\t\t\t\tfor(i = 0; i < count; ++i) {\n\t\t\t\t\tpx = corners[i].x;\n\t\t\t\t\tpy = corners[i].y;\n\t\t\t\t\tangle = corners[i].angle;\n\n\t\t\t\t\trectify_patch(src, patch_img, angle, px, py, 32);\n\n\t\t\t\t\t// describe the patch\n\t\t\t\t\tpatt = 0;\n\t\t\t\t\tfor (b = 0; b < DESCR_SIZE; ++b) {\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val = (t0 < t1)|0;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 1;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 2;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 3;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 4;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 5;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 6;\n\t\t\t            \n\t\t\t            t0 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            t1 = patch_d[patch_off + bit_pattern_31_[patt+1] * 32 + bit_pattern_31_[patt]]; patt += 2\n\t\t\t            val |= (t0 < t1) << 7;\n\t\t\t            \n\t\t\t            descr_d[descr_off+b] = val;\n\t\t\t        }\n\t\t\t        descr_off += DESCR_SIZE;\n\t\t\t\t}\n    \t\t}\n    \t};\n    })();\n\n    global.orb = orb;\n\n})(jsfeat);\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n *\n * this code is a rewrite from OpenCV's Lucas-Kanade optical flow implementation\n */\n\n(function(global) {\n    \"use strict\";\n    //\n    var optical_flow_lk = (function() {\n\n        // short link to shar deriv\n        var scharr_deriv = jsfeat.imgproc.scharr_derivatives;\n\n        return {\n            track: function(prev_pyr, curr_pyr, prev_xy, curr_xy, count, win_size, max_iter, status, eps, min_eigen_threshold) {\n                if (typeof max_iter === \"undefined\") { max_iter = 30; }\n                if (typeof status === \"undefined\") { status = new Uint8Array(count); }\n                if (typeof eps === \"undefined\") { eps = 0.01; }\n                if (typeof min_eigen_threshold === \"undefined\") { min_eigen_threshold = 0.0001; }\n\n                var half_win = (win_size-1)*0.5;\n                var win_area = (win_size*win_size)|0;\n                var win_area2 = win_area << 1;\n                var prev_imgs = prev_pyr.data, next_imgs = curr_pyr.data;\n                var img_prev=prev_imgs[0].data,img_next=next_imgs[0].data;\n                var w0 = prev_imgs[0].cols, h0 = prev_imgs[0].rows,lw=0,lh=0;\n\n                var iwin_node = jsfeat.cache.get_buffer(win_area<<2);\n                var deriv_iwin_node = jsfeat.cache.get_buffer(win_area2<<2);\n                var deriv_lev_node = jsfeat.cache.get_buffer((h0*(w0<<1))<<2);\n\n                var deriv_m = new jsfeat.matrix_t(w0, h0, jsfeat.S32C2_t, deriv_lev_node.data);\n\n                var iwin_buf = iwin_node.i32;\n                var deriv_iwin = deriv_iwin_node.i32;\n                var deriv_lev = deriv_lev_node.i32;\n\n                var dstep=0,src=0,dsrc=0,iptr=0,diptr=0,jptr=0;\n                var lev_sc=0.0,prev_x=0.0,prev_y=0.0,next_x=0.0,next_y=0.0;\n                var prev_delta_x=0.0,prev_delta_y=0.0,delta_x=0.0,delta_y=0.0;\n                var iprev_x=0,iprev_y=0,inext_x=0,inext_y=0;\n                var i=0,j=0,x=0,y=0,level=0,ptid=0,iter=0;\n                var brd_tl=0,brd_r=0,brd_b=0;\n                var a=0.0,b=0.0,b1=0.0,b2=0.0;\n\n                // fixed point math\n                var W_BITS14 = 14;\n                var W_BITS4 = 14;\n                var W_BITS1m5 = W_BITS4 - 5;\n                var W_BITS1m51 = (1 << ((W_BITS1m5) - 1));\n                var W_BITS14_ = (1 << W_BITS14);\n                var W_BITS41 = (1 << ((W_BITS4) - 1));\n                var FLT_SCALE = 1.0/(1 << 20);\n                var iw00=0,iw01=0,iw10=0,iw11=0,ival=0,ixval=0,iyval=0;\n                var A11=0.0,A12=0.0,A22=0.0,D=0.0,min_eig=0.0;\n\n                var FLT_EPSILON = 0.00000011920929;\n                eps *= eps;\n\n                // reset status\n                for(; i < count; ++i) {\n                    status[i] = 1;\n                }\n\n                var max_level = (prev_pyr.levels - 1)|0;\n                level = max_level;\n\n                for(; level >= 0; --level) {\n                    lev_sc = (1.0/(1 << level));\n                    lw = w0 >> level;\n                    lh = h0 >> level;\n                    dstep = lw << 1;\n                    img_prev = prev_imgs[level].data;\n                    img_next = next_imgs[level].data;\n                    \n                    brd_r = (lw - win_size)|0;\n                    brd_b = (lh - win_size)|0;\n\n                    // calculate level derivatives\n                    scharr_deriv(prev_imgs[level], deriv_m);\n\n                    // iterate through points\n                    for(ptid = 0; ptid < count; ++ptid) {\n                        i = ptid << 1;\n                        j = i + 1;\n                        prev_x = prev_xy[i]*lev_sc;\n                        prev_y = prev_xy[j]*lev_sc;\n\n                        if( level == max_level ) {\n                            next_x = prev_x;\n                            next_y = prev_y;\n                        } else {\n                            next_x = curr_xy[i]*2.0;\n                            next_y = curr_xy[j]*2.0;\n                        }\n                        curr_xy[i] = next_x;\n                        curr_xy[j] = next_y;\n\n                        prev_x -= half_win;\n                        prev_y -= half_win;\n                        iprev_x = prev_x|0;\n                        iprev_y = prev_y|0;\n\n                        // border check\n                        x = (iprev_x <= brd_tl)|(iprev_x >= brd_r)|(iprev_y <= brd_tl)|(iprev_y >= brd_b);\n                        if( x != 0 ) {\n                            if( level == 0 ) {\n                                status[ptid] = 0;\n                            }\n                            continue;\n                        }\n\n                        a = prev_x - iprev_x;\n                        b = prev_y - iprev_y;\n                        iw00 = (((1.0 - a)*(1.0 - b)*W_BITS14_) + 0.5)|0;\n                        iw01 = ((a*(1.0 - b)*W_BITS14_) + 0.5)|0;\n                        iw10 = (((1.0 - a)*b*W_BITS14_) + 0.5)|0;\n                        iw11 = (W_BITS14_ - iw00 - iw01 - iw10);\n\n                        A11 = 0.0, A12 = 0.0, A22 = 0.0;\n\n                        // extract the patch from the first image, compute covariation matrix of derivatives\n                        for( y = 0; y < win_size; ++y ) {\n                            src = ( (y + iprev_y)*lw + iprev_x )|0;\n                            dsrc = src << 1;\n\n                            iptr = (y*win_size)|0;\n                            diptr = iptr << 1;\n                            for(x = 0 ; x < win_size; ++x, ++src, ++iptr, dsrc += 2) {\n                                ival = ( (img_prev[src])*iw00 + (img_prev[src+1])*iw01 +\n                                        (img_prev[src+lw])*iw10 + (img_prev[src+lw+1])*iw11 );\n                                ival = (((ival) + W_BITS1m51) >> (W_BITS1m5));\n\n                                ixval = ( deriv_lev[dsrc]*iw00 + deriv_lev[dsrc+2]*iw01 +\n                                        deriv_lev[dsrc+dstep]*iw10 + deriv_lev[dsrc+dstep+2]*iw11 );\n                                ixval = (((ixval) + W_BITS41) >> (W_BITS4));\n\n                                iyval = ( deriv_lev[dsrc+1]*iw00 + deriv_lev[dsrc+3]*iw01 + deriv_lev[dsrc+dstep+1]*iw10 +\n                                        deriv_lev[dsrc+dstep+3]*iw11 );\n                                iyval = (((iyval) + W_BITS41) >> (W_BITS4));\n\n                                iwin_buf[iptr] = ival;\n                                deriv_iwin[diptr++] = ixval;\n                                deriv_iwin[diptr++] = iyval;\n\n                                A11 += ixval*ixval;\n                                A12 += ixval*iyval;\n                                A22 += iyval*iyval;\n                            }\n                        }\n\n                        A11 *= FLT_SCALE; A12 *= FLT_SCALE; A22 *= FLT_SCALE;\n\n                        D = A11*A22 - A12*A12;\n                        min_eig = (A22 + A11 - Math.sqrt((A11-A22)*(A11-A22) + 4.0*A12*A12)) / win_area2;\n\n                        if( min_eig < min_eigen_threshold || D < FLT_EPSILON )\n                        {\n                            if( level == 0 ) {\n                                status[ptid] = 0;\n                            }\n                            continue;\n                        }\n\n                        D = 1.0/D;\n\n                        next_x -= half_win;\n                        next_y -= half_win;\n                        prev_delta_x = 0.0;\n                        prev_delta_y = 0.0;\n\n                        for( iter = 0; iter < max_iter; ++iter ) {\n                            inext_x = next_x|0;\n                            inext_y = next_y|0;\n\n                            x = (inext_x <= brd_tl)|(inext_x >= brd_r)|(inext_y <= brd_tl)|(inext_y >= brd_b);\n                            if( x != 0 ) {\n                                if( level == 0 ) {\n                                    status[ptid] = 0;\n                                }\n                                break;\n                            }\n\n                            a = next_x - inext_x;\n                            b = next_y - inext_y;\n                            iw00 = (((1.0 - a)*(1.0 - b)*W_BITS14_) + 0.5)|0;\n                            iw01 = ((a*(1.0 - b)*W_BITS14_) + 0.5)|0;\n                            iw10 = (((1.0 - a)*b*W_BITS14_) + 0.5)|0;\n                            iw11 = (W_BITS14_ - iw00 - iw01 - iw10);\n                            b1 = 0.0, b2 = 0.0;\n\n                            for( y = 0; y < win_size; ++y ) {\n                                jptr = ( (y + inext_y)*lw + inext_x )|0;\n\n                                iptr = (y*win_size)|0;\n                                diptr = iptr << 1;\n                                for( x = 0 ; x < win_size; ++x, ++jptr, ++iptr ) {\n                                    ival = ( (img_next[jptr])*iw00 + (img_next[jptr+1])*iw01 +\n                                            (img_next[jptr+lw])*iw10 + (img_next[jptr+lw+1])*iw11 );\n                                    ival = (((ival) + W_BITS1m51) >> (W_BITS1m5));\n                                    ival = (ival - iwin_buf[iptr]);\n\n                                    b1 += ival * deriv_iwin[diptr++];\n                                    b2 += ival * deriv_iwin[diptr++];\n                                }\n                            }\n\n                            b1 *= FLT_SCALE;\n                            b2 *= FLT_SCALE;\n\n                            delta_x = ((A12*b2 - A22*b1) * D);\n                            delta_y = ((A12*b1 - A11*b2) * D);\n\n                            next_x += delta_x;\n                            next_y += delta_y;\n                            curr_xy[i] = next_x + half_win;\n                            curr_xy[j] = next_y + half_win;\n\n                            if( delta_x*delta_x + delta_y*delta_y <= eps ) {\n                                break;\n                            }\n\n                            if( iter > 0 && Math.abs(delta_x + prev_delta_x) < 0.01 &&\n                                            Math.abs(delta_y + prev_delta_y) < 0.01 ) {\n                                curr_xy[i] -= delta_x*0.5;\n                                curr_xy[j] -= delta_y*0.5;\n                                break;\n                            }\n\n                            prev_delta_x = delta_x;\n                            prev_delta_y = delta_y;\n                        }\n                    } // points loop\n                } // levels loop\n\n                jsfeat.cache.put_buffer(iwin_node);\n                jsfeat.cache.put_buffer(deriv_iwin_node);\n                jsfeat.cache.put_buffer(deriv_lev_node);\n            }\n        };\n    })();\n\n    global.optical_flow_lk = optical_flow_lk;\n\n})(jsfeat);\n/**\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * this code is a rewrite from https://github.com/mtschirs/js-objectdetect implementation\r\n * @author Martin Tschirsich / http://www.tu-darmstadt.de/~m_t\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n    var haar = (function() {\r\n\r\n        var _group_func = function(r1, r2) {\r\n            var distance = (r1.width * 0.25 + 0.5)|0;\r\n\r\n            return r2.x <= r1.x + distance &&\r\n                   r2.x >= r1.x - distance &&\r\n                   r2.y <= r1.y + distance &&\r\n                   r2.y >= r1.y - distance &&\r\n                   r2.width <= (r1.width * 1.5 + 0.5)|0 &&\r\n                   (r2.width * 1.5 + 0.5)|0 >= r1.width;\r\n        }\r\n        \r\n        return {\r\n\r\n            edges_density: 0.07,\r\n\r\n            detect_single_scale: function(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, scale, classifier) {\r\n                var win_w = (classifier.size[0] * scale)|0,\r\n                    win_h = (classifier.size[1] * scale)|0,\r\n                    step_x = (0.5 * scale + 1.5)|0,\r\n                    step_y = step_x;\r\n                var i,j,k,x,y,ex=(width-win_w)|0,ey=(height-win_h)|0;\r\n                var w1=(width+1)|0,edge_dens,mean,variance,std;\r\n                var inv_area = 1.0 / (win_w * win_h);\r\n                var stages,stage,trees,tree,sn,tn,fn,found=true,stage_thresh,stage_sum,tree_sum,feature,features;\r\n                var fi_a,fi_b,fi_c,fi_d,fw,fh;\r\n\r\n                var ii_a=0,ii_b=win_w,ii_c=win_h*w1,ii_d=ii_c+win_w;\r\n                var edges_thresh = ((win_w*win_h) * 0xff * this.edges_density)|0;\r\n                // if too much gradient we also can skip\r\n                //var edges_thresh_high = ((win_w*win_h) * 0xff * 0.3)|0;\r\n\r\n                var rects = [];\r\n                for(y = 0; y < ey; y += step_y) {\r\n                    ii_a = y * w1;\r\n                    for(x = 0; x < ex; x += step_x, ii_a += step_x) {\r\n\r\n                        mean =    int_sum[ii_a] \r\n                                - int_sum[ii_a+ii_b]\r\n                                - int_sum[ii_a+ii_c]\r\n                                + int_sum[ii_a+ii_d];\r\n\r\n                        // canny prune\r\n                        if(int_canny_sum) {\r\n                            edge_dens = (int_canny_sum[ii_a] \r\n                                        - int_canny_sum[ii_a+ii_b]\r\n                                        - int_canny_sum[ii_a+ii_c]\r\n                                        + int_canny_sum[ii_a+ii_d]);\r\n                            if(edge_dens < edges_thresh || mean < 20) {\r\n                                x += step_x, ii_a += step_x;\r\n                                continue;\r\n                            }\r\n                        }\r\n\r\n                        mean *= inv_area;\r\n                        variance = (int_sqsum[ii_a] \r\n                                    - int_sqsum[ii_a+ii_b]\r\n                                    - int_sqsum[ii_a+ii_c]\r\n                                    + int_sqsum[ii_a+ii_d]) * inv_area - mean * mean;\r\n\r\n                        std = variance > 0. ? Math.sqrt(variance) : 1;\r\n\r\n                        stages = classifier.complexClassifiers;\r\n                        sn = stages.length;\r\n                        found =  true;\r\n                        for(i = 0; i < sn; ++i) {\r\n                            stage = stages[i];\r\n                            stage_thresh = stage.threshold;\r\n                            trees = stage.simpleClassifiers;\r\n                            tn = trees.length;\r\n                            stage_sum = 0;\r\n                            for(j = 0; j < tn; ++j) {\r\n                                tree = trees[j];\r\n                                tree_sum = 0;\r\n                                features = tree.features;\r\n                                fn = features.length;\r\n                                if(tree.tilted === 1) {\r\n                                    for(k=0; k < fn; ++k) {\r\n                                        feature = features[k];\r\n                                        fi_a = ~~(x + feature[0] * scale) + ~~(y + feature[1] * scale) * w1;\r\n                                        fw = ~~(feature[2] * scale);\r\n                                        fh = ~~(feature[3] * scale);\r\n                                        fi_b = fw * w1;\r\n                                        fi_c =  fh * w1;\r\n\r\n                                        tree_sum += (int_tilted[fi_a]\r\n                                                    - int_tilted[fi_a + fw + fi_b]\r\n                                                    - int_tilted[fi_a - fh + fi_c]\r\n                                                    + int_tilted[fi_a + fw - fh + fi_b + fi_c]) * feature[4];\r\n                                    }\r\n                                } else {\r\n                                    for(k=0; k < fn; ++k) {\r\n                                        feature = features[k];\r\n                                        fi_a = ~~(x + feature[0] * scale) + ~~(y + feature[1] * scale) * w1;\r\n                                        fw = ~~(feature[2] * scale);\r\n                                        fh = ~~(feature[3] * scale);\r\n                                        fi_c = fh * w1;\r\n\r\n                                        tree_sum += (int_sum[fi_a] \r\n                                                    - int_sum[fi_a+fw]\r\n                                                    - int_sum[fi_a+fi_c]\r\n                                                    + int_sum[fi_a+fi_c+fw]) * feature[4];\r\n                                    }\r\n                                }\r\n                                stage_sum += (tree_sum * inv_area < tree.threshold * std) ? tree.left_val : tree.right_val;\r\n                            }\r\n                            if (stage_sum < stage_thresh) {\r\n                                found = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        \r\n                        if(found) {\r\n                            rects.push({\"x\" : x,\r\n                                        \"y\" : y,\r\n                                        \"width\" : win_w,\r\n                                        \"height\" : win_h,\r\n                                        \"neighbor\" : 1,\r\n                                        \"confidence\" : stage_sum});\r\n                            x += step_x, ii_a += step_x;\r\n                        }\r\n                    }\r\n                }\r\n                return rects;\r\n            },\r\n\r\n            detect_multi_scale: function(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, classifier, scale_factor, scale_min) {\r\n                if (typeof scale_factor === \"undefined\") { scale_factor = 1.2; }\r\n                if (typeof scale_min === \"undefined\") { scale_min = 1.0; }\r\n                var win_w = classifier.size[0];\r\n                var win_h = classifier.size[1];\r\n                var rects = [];\r\n                while (scale_min * win_w < width && scale_min * win_h < height) {\r\n                    rects = rects.concat(this.detect_single_scale(int_sum, int_sqsum, int_tilted, int_canny_sum, width, height, scale_min, classifier));\r\n                    scale_min *= scale_factor;\r\n                }\r\n                return rects;\r\n            },\r\n\r\n            // OpenCV method to group detected rectangles\r\n            group_rectangles: function(rects, min_neighbors) {\r\n                if (typeof min_neighbors === \"undefined\") { min_neighbors = 1; }\r\n                var i, j, n = rects.length;\r\n                var node = [];\r\n                for (i = 0; i < n; ++i) {\r\n                    node[i] = {\"parent\" : -1,\r\n                               \"element\" : rects[i],\r\n                               \"rank\" : 0};\r\n                }\r\n                for (i = 0; i < n; ++i) {\r\n                    if (!node[i].element)\r\n                        continue;\r\n                    var root = i;\r\n                    while (node[root].parent != -1)\r\n                        root = node[root].parent;\r\n                    for (j = 0; j < n; ++j) {\r\n                        if( i != j && node[j].element && _group_func(node[i].element, node[j].element)) {\r\n                            var root2 = j;\r\n\r\n                            while (node[root2].parent != -1)\r\n                                root2 = node[root2].parent;\r\n\r\n                            if(root2 != root) {\r\n                                if(node[root].rank > node[root2].rank)\r\n                                    node[root2].parent = root;\r\n                                else {\r\n                                    node[root].parent = root2;\r\n                                    if (node[root].rank == node[root2].rank)\r\n                                    node[root2].rank++;\r\n                                    root = root2;\r\n                                }\r\n\r\n                                /* compress path from node2 to the root: */\r\n                                var temp, node2 = j;\r\n                                while (node[node2].parent != -1) {\r\n                                    temp = node2;\r\n                                    node2 = node[node2].parent;\r\n                                    node[temp].parent = root;\r\n                                }\r\n\r\n                                /* compress path from node to the root: */\r\n                                node2 = i;\r\n                                while (node[node2].parent != -1) {\r\n                                    temp = node2;\r\n                                    node2 = node[node2].parent;\r\n                                    node[temp].parent = root;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                var idx_seq = [];\r\n                var class_idx = 0;\r\n                for(i = 0; i < n; i++) {\r\n                    j = -1;\r\n                    var node1 = i;\r\n                    if(node[node1].element) {\r\n                        while (node[node1].parent != -1)\r\n                            node1 = node[node1].parent;\r\n                        if(node[node1].rank >= 0)\r\n                            node[node1].rank = ~class_idx++;\r\n                        j = ~node[node1].rank;\r\n                    }\r\n                    idx_seq[i] = j;\r\n                }\r\n                \r\n                var comps = [];\r\n                for (i = 0; i < class_idx+1; ++i) {\r\n                    comps[i] = {\"neighbors\" : 0,\r\n                                \"x\" : 0,\r\n                                \"y\" : 0,\r\n                                \"width\" : 0,\r\n                                \"height\" : 0,\r\n                                \"confidence\" : 0};\r\n                }\r\n\r\n                // count number of neighbors\r\n                for(i = 0; i < n; ++i) {\r\n                    var r1 = rects[i];\r\n                    var idx = idx_seq[i];\r\n\r\n                    if (comps[idx].neighbors == 0)\r\n                        comps[idx].confidence = r1.confidence;\r\n\r\n                    ++comps[idx].neighbors;\r\n\r\n                    comps[idx].x += r1.x;\r\n                    comps[idx].y += r1.y;\r\n                    comps[idx].width += r1.width;\r\n                    comps[idx].height += r1.height;\r\n                    comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);\r\n                }\r\n\r\n                var seq2 = [];\r\n                // calculate average bounding box\r\n                for(i = 0; i < class_idx; ++i) {\r\n                    n = comps[i].neighbors;\r\n                    if (n >= min_neighbors)\r\n                        seq2.push({\"x\" : (comps[i].x * 2 + n) / (2 * n),\r\n                                   \"y\" : (comps[i].y * 2 + n) / (2 * n),\r\n                                   \"width\" : (comps[i].width * 2 + n) / (2 * n),\r\n                                   \"height\" : (comps[i].height * 2 + n) / (2 * n),\r\n                                   \"neighbors\" : comps[i].neighbors,\r\n                                   \"confidence\" : comps[i].confidence});\r\n                }\r\n\r\n                var result_seq = [];\r\n                n = seq2.length;\r\n                // filter out small face rectangles inside large face rectangles\r\n                for(i = 0; i < n; ++i) {\r\n                    var r1 = seq2[i];\r\n                    var flag = true;\r\n                    for(j = 0; j < n; ++j) {\r\n                        var r2 = seq2[j];\r\n                        var distance = (r2.width * 0.25 + 0.5)|0;\r\n\r\n                        if(i != j &&\r\n                           r1.x >= r2.x - distance &&\r\n                           r1.y >= r2.y - distance &&\r\n                           r1.x + r1.width <= r2.x + r2.width + distance &&\r\n                           r1.y + r1.height <= r2.y + r2.height + distance &&\r\n                           (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3)) {\r\n                            flag = false;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(flag)\r\n                        result_seq.push(r1);\r\n                }\r\n                return result_seq;\r\n            }\r\n        };\r\n\r\n    })();\r\n\r\n    global.haar = haar;\r\n\r\n})(jsfeat);\r\n/**\r\n * BBF: Brightness Binary Feature\r\n *\r\n * @author Eugene Zatepyakin / http://inspirit.ru/\r\n *\r\n * this code is a rewrite from https://github.com/liuliu/ccv implementation\r\n * @author Liu Liu / http://liuliu.me/\r\n *\r\n * The original paper refers to: YEF∗ Real-Time Object Detection, Yotam Abramson and Bruno Steux\r\n */\r\n\r\n(function(global) {\r\n    \"use strict\";\r\n    //\r\n    var bbf = (function() {\r\n\r\n        var _group_func = function(r1, r2) {\r\n            var distance = (r1.width * 0.25 + 0.5)|0;\r\n\r\n            return r2.x <= r1.x + distance &&\r\n                   r2.x >= r1.x - distance &&\r\n                   r2.y <= r1.y + distance &&\r\n                   r2.y >= r1.y - distance &&\r\n                   r2.width <= (r1.width * 1.5 + 0.5)|0 &&\r\n                   (r2.width * 1.5 + 0.5)|0 >= r1.width;\r\n        }\r\n\r\n        var img_pyr = new jsfeat.pyramid_t(1);\r\n\r\n        return {\r\n\r\n            interval: 4,\r\n            scale: 1.1486,\r\n            next: 5,\r\n            scale_to: 1,\r\n\r\n            // make features local copy\r\n            // to avoid array allocation with each scale\r\n            // this is strange but array works faster than Int32 version???\r\n            prepare_cascade: function(cascade) {\r\n                var sn = cascade.stage_classifier.length;\r\n                for (var j = 0; j < sn; j++) {\r\n                    var orig_feature = cascade.stage_classifier[j].feature;\r\n                    var f_cnt = cascade.stage_classifier[j].count;\r\n                    var feature = cascade.stage_classifier[j]._feature = new Array(f_cnt);\r\n                    for (var k = 0; k < f_cnt; k++) {\r\n                        feature[k] = {\"size\" : orig_feature[k].size,\r\n                                      \"px\" : new Array(orig_feature[k].size),\r\n                                      \"pz\" : new Array(orig_feature[k].size),\r\n                                      \"nx\" : new Array(orig_feature[k].size),\r\n                                      \"nz\" : new Array(orig_feature[k].size)};\r\n                    }\r\n                }\r\n            },\r\n\r\n            build_pyramid: function(src, min_width, min_height, interval) {\r\n                if (typeof interval === \"undefined\") { interval = 4; }\r\n\r\n                var sw=src.cols,sh=src.rows;\r\n                var i=0,nw=0,nh=0;\r\n                var new_pyr=false;\r\n                var src0=src,src1=src;\r\n                var data_type = jsfeat.U8_t | jsfeat.C1_t;\r\n\r\n                this.interval = interval;\r\n                this.scale = Math.pow(2, 1 / (this.interval + 1));\r\n                this.next = (this.interval + 1)|0;\r\n                this.scale_to = (Math.log(Math.min(sw / min_width, sh / min_height)) / Math.log(this.scale))|0;\r\n\r\n                var pyr_l = ((this.scale_to + this.next * 2) * 4) | 0;\r\n                if(img_pyr.levels != pyr_l) {\r\n                    img_pyr.levels = pyr_l;\r\n                    img_pyr.data = new Array(pyr_l);\r\n                    new_pyr = true;\r\n                    img_pyr.data[0] = src; // first is src\r\n                }\r\n\r\n                for (i = 1; i <= this.interval; ++i) {\r\n                    nw = (sw / Math.pow(this.scale, i))|0;\r\n                    nh = (sh / Math.pow(this.scale, i))|0;\r\n                    src0 = img_pyr.data[i<<2];\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[i<<2] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[i<<2];\r\n                    }\r\n                    jsfeat.imgproc.resample(src, src0, nw, nh);\r\n                }\r\n                for (i = this.next; i < this.scale_to + this.next * 2; ++i) {\r\n                    src1 = img_pyr.data[(i << 2) - (this.next << 2)];\r\n                    src0 = img_pyr.data[i<<2];\r\n                    nw = src1.cols >> 1;\r\n                    nh = src1.rows >> 1;\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[i<<2] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[i<<2];\r\n                    }\r\n                    jsfeat.imgproc.pyrdown(src1, src0);\r\n                }\r\n                for (i = this.next * 2; i < this.scale_to + this.next * 2; ++i) {\r\n                    src1 = img_pyr.data[(i << 2) - (this.next << 2)];\r\n                    nw = src1.cols >> 1;\r\n                    nh = src1.rows >> 1;\r\n                    src0 = img_pyr.data[(i<<2)+1];\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[(i<<2)+1] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[(i<<2)+1];\r\n                    }\r\n                    jsfeat.imgproc.pyrdown(src1, src0, 1, 0);\r\n                    //\r\n                    src0 = img_pyr.data[(i<<2)+2];\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[(i<<2)+2] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[(i<<2)+2];\r\n                    }\r\n                    jsfeat.imgproc.pyrdown(src1, src0, 0, 1);\r\n                    //\r\n                    src0 = img_pyr.data[(i<<2)+3];\r\n                    if(new_pyr || nw != src0.cols || nh != src0.rows) {\r\n                        img_pyr.data[(i<<2)+3] = new jsfeat.matrix_t(nw, nh, data_type);\r\n                        src0 = img_pyr.data[(i<<2)+3];\r\n                    }\r\n                    jsfeat.imgproc.pyrdown(src1, src0, 1, 1);\r\n                }\r\n                return img_pyr;\r\n            },\r\n\r\n            detect: function(pyramid, cascade) {\r\n                var interval = this.interval;\r\n                var scale = this.scale;\r\n                var next = this.next;\r\n                var scale_upto = this.scale_to;\r\n                var i=0,j=0,k=0,n=0,x=0,y=0,q=0,sn=0,f_cnt=0,q_cnt=0,p=0,pmin=0,nmax=0,f=0,i4=0,qw=0,qh=0;\r\n                var sum=0.0, alpha, feature, orig_feature, feature_k, feature_o, flag = true, shortcut=true;\r\n                var scale_x = 1.0, scale_y = 1.0;\r\n                var dx = [0, 1, 0, 1];\r\n                var dy = [0, 0, 1, 1];\r\n                var seq = [];\r\n                var pyr=pyramid.data, bpp = 1, bpp2 = 2, bpp4 = 4;\r\n\r\n                var u8 = [], u8o = [0,0,0];\r\n                var step = [0,0,0];\r\n                var paddings = [0,0,0];\r\n\r\n                for (i = 0; i < scale_upto; i++) {\r\n                    i4 = (i<<2);\r\n                    qw = pyr[i4 + (next << 3)].cols - (cascade.width >> 2);\r\n                    qh = pyr[i4 + (next << 3)].rows - (cascade.height >> 2);\r\n                    step[0] = pyr[i4].cols * bpp;\r\n                    step[1] = pyr[i4 + (next << 2)].cols * bpp;\r\n                    step[2] = pyr[i4 + (next << 3)].cols * bpp;\r\n                    paddings[0] = (pyr[i4].cols * bpp4) - (qw * bpp4);\r\n                    paddings[1] = (pyr[i4 + (next << 2)].cols * bpp2) - (qw * bpp2);\r\n                    paddings[2] = (pyr[i4 + (next << 3)].cols * bpp) - (qw * bpp);\r\n                    sn = cascade.stage_classifier.length;\r\n                    for (j = 0; j < sn; j++) {\r\n                        orig_feature = cascade.stage_classifier[j].feature;\r\n                        feature = cascade.stage_classifier[j]._feature;\r\n                        f_cnt = cascade.stage_classifier[j].count;\r\n                        for (k = 0; k < f_cnt; k++) {\r\n                            feature_k = feature[k];\r\n                            feature_o = orig_feature[k];\r\n                            q_cnt = feature_o.size|0;\r\n                            for (q = 0; q < q_cnt; q++) {\r\n                                feature_k.px[q] = (feature_o.px[q] * bpp) + feature_o.py[q] * step[feature_o.pz[q]];\r\n                                feature_k.pz[q] = feature_o.pz[q];\r\n                                feature_k.nx[q] = (feature_o.nx[q] * bpp) + feature_o.ny[q] * step[feature_o.nz[q]];\r\n                                feature_k.nz[q] = feature_o.nz[q];\r\n                            }\r\n                        }\r\n                    }\r\n                    u8[0] = pyr[i4].data; u8[1] = pyr[i4 + (next<<2)].data;\r\n                    for (q = 0; q < 4; q++) {\r\n                        u8[2] = pyr[i4 + (next<<3) + q].data;\r\n                        u8o[0] = (dx[q]*bpp2) + dy[q] * (pyr[i4].cols*bpp2); \r\n                        u8o[1] = (dx[q]*bpp) + dy[q] * (pyr[i4 + (next<<2)].cols*bpp); \r\n                        u8o[2] = 0;\r\n                        for (y = 0; y < qh; y++) {\r\n                            for (x = 0; x < qw; x++) {\r\n                                sum = 0;\r\n                                flag = true;\r\n                                sn = cascade.stage_classifier.length;\r\n                                for (j = 0; j < sn; j++) {\r\n                                    sum = 0;\r\n                                    alpha = cascade.stage_classifier[j].alpha;\r\n                                    feature = cascade.stage_classifier[j]._feature;\r\n                                    f_cnt = cascade.stage_classifier[j].count;\r\n                                    for (k = 0; k < f_cnt; k++) {\r\n                                        feature_k = feature[k];\r\n                                        pmin = u8[feature_k.pz[0]][u8o[feature_k.pz[0]] + feature_k.px[0]];\r\n                                        nmax = u8[feature_k.nz[0]][u8o[feature_k.nz[0]] + feature_k.nx[0]];\r\n                                        if (pmin <= nmax) {\r\n                                            sum += alpha[k << 1];\r\n                                        } else {\r\n                                            shortcut = true;\r\n                                            q_cnt = feature_k.size;\r\n                                            for (f = 1; f < q_cnt; f++) {\r\n                                                if (feature_k.pz[f] >= 0) {\r\n                                                    p = u8[feature_k.pz[f]][u8o[feature_k.pz[f]] + feature_k.px[f]];\r\n                                                    if (p < pmin) {\r\n                                                        if (p <= nmax) {\r\n                                                            shortcut = false;\r\n                                                            break;\r\n                                                        }\r\n                                                        pmin = p;\r\n                                                    }\r\n                                                }\r\n                                                if (feature_k.nz[f] >= 0) {\r\n                                                    n = u8[feature_k.nz[f]][u8o[feature_k.nz[f]] + feature_k.nx[f]];\r\n                                                    if (n > nmax) {\r\n                                                        if (pmin <= n) {\r\n                                                            shortcut = false;\r\n                                                            break;\r\n                                                        }\r\n                                                        nmax = n;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            sum += (shortcut) ? alpha[(k << 1) + 1] : alpha[k << 1];\r\n                                        }\r\n                                    }\r\n                                    if (sum < cascade.stage_classifier[j].threshold) {\r\n                                        flag = false;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (flag) {\r\n                                    seq.push({\"x\" : (x * 4 + dx[q] * 2) * scale_x,\r\n                                              \"y\" : (y * 4 + dy[q] * 2) * scale_y,\r\n                                              \"width\" : cascade.width * scale_x,\r\n                                              \"height\" : cascade.height * scale_y,\r\n                                              \"neighbor\" : 1,\r\n                                              \"confidence\" : sum});\r\n                                    ++x;\r\n                                    u8o[0] += bpp4;\r\n                                    u8o[1] += bpp2;\r\n                                    u8o[2] += bpp;\r\n                                }\r\n                                u8o[0] += bpp4;\r\n                                u8o[1] += bpp2;\r\n                                u8o[2] += bpp;\r\n                            }\r\n                            u8o[0] += paddings[0];\r\n                            u8o[1] += paddings[1];\r\n                            u8o[2] += paddings[2];\r\n                        }\r\n                    }\r\n                    scale_x *= scale;\r\n                    scale_y *= scale;\r\n                }\r\n\r\n                return seq;\r\n            },\r\n\r\n            // OpenCV method to group detected rectangles\r\n            group_rectangles: function(rects, min_neighbors) {\r\n                if (typeof min_neighbors === \"undefined\") { min_neighbors = 1; }\r\n                var i, j, n = rects.length;\r\n                var node = [];\r\n                for (i = 0; i < n; ++i) {\r\n                    node[i] = {\"parent\" : -1,\r\n                               \"element\" : rects[i],\r\n                               \"rank\" : 0};\r\n                }\r\n                for (i = 0; i < n; ++i) {\r\n                    if (!node[i].element)\r\n                        continue;\r\n                    var root = i;\r\n                    while (node[root].parent != -1)\r\n                        root = node[root].parent;\r\n                    for (j = 0; j < n; ++j) {\r\n                        if( i != j && node[j].element && _group_func(node[i].element, node[j].element)) {\r\n                            var root2 = j;\r\n\r\n                            while (node[root2].parent != -1)\r\n                                root2 = node[root2].parent;\r\n\r\n                            if(root2 != root) {\r\n                                if(node[root].rank > node[root2].rank)\r\n                                    node[root2].parent = root;\r\n                                else {\r\n                                    node[root].parent = root2;\r\n                                    if (node[root].rank == node[root2].rank)\r\n                                    node[root2].rank++;\r\n                                    root = root2;\r\n                                }\r\n\r\n                                /* compress path from node2 to the root: */\r\n                                var temp, node2 = j;\r\n                                while (node[node2].parent != -1) {\r\n                                    temp = node2;\r\n                                    node2 = node[node2].parent;\r\n                                    node[temp].parent = root;\r\n                                }\r\n\r\n                                /* compress path from node to the root: */\r\n                                node2 = i;\r\n                                while (node[node2].parent != -1) {\r\n                                    temp = node2;\r\n                                    node2 = node[node2].parent;\r\n                                    node[temp].parent = root;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                var idx_seq = [];\r\n                var class_idx = 0;\r\n                for(i = 0; i < n; i++) {\r\n                    j = -1;\r\n                    var node1 = i;\r\n                    if(node[node1].element) {\r\n                        while (node[node1].parent != -1)\r\n                            node1 = node[node1].parent;\r\n                        if(node[node1].rank >= 0)\r\n                            node[node1].rank = ~class_idx++;\r\n                        j = ~node[node1].rank;\r\n                    }\r\n                    idx_seq[i] = j;\r\n                }\r\n                \r\n                var comps = [];\r\n                for (i = 0; i < class_idx+1; ++i) {\r\n                    comps[i] = {\"neighbors\" : 0,\r\n                                \"x\" : 0,\r\n                                \"y\" : 0,\r\n                                \"width\" : 0,\r\n                                \"height\" : 0,\r\n                                \"confidence\" : 0};\r\n                }\r\n\r\n                // count number of neighbors\r\n                for(i = 0; i < n; ++i) {\r\n                    var r1 = rects[i];\r\n                    var idx = idx_seq[i];\r\n\r\n                    if (comps[idx].neighbors == 0)\r\n                        comps[idx].confidence = r1.confidence;\r\n\r\n                    ++comps[idx].neighbors;\r\n\r\n                    comps[idx].x += r1.x;\r\n                    comps[idx].y += r1.y;\r\n                    comps[idx].width += r1.width;\r\n                    comps[idx].height += r1.height;\r\n                    comps[idx].confidence = Math.max(comps[idx].confidence, r1.confidence);\r\n                }\r\n\r\n                var seq2 = [];\r\n                // calculate average bounding box\r\n                for(i = 0; i < class_idx; ++i) {\r\n                    n = comps[i].neighbors;\r\n                    if (n >= min_neighbors)\r\n                        seq2.push({\"x\" : (comps[i].x * 2 + n) / (2 * n),\r\n                                   \"y\" : (comps[i].y * 2 + n) / (2 * n),\r\n                                   \"width\" : (comps[i].width * 2 + n) / (2 * n),\r\n                                   \"height\" : (comps[i].height * 2 + n) / (2 * n),\r\n                                   \"neighbors\" : comps[i].neighbors,\r\n                                   \"confidence\" : comps[i].confidence});\r\n                }\r\n\r\n                var result_seq = [];\r\n                n = seq2.length;\r\n                // filter out small face rectangles inside large face rectangles\r\n                for(i = 0; i < n; ++i) {\r\n                    var r1 = seq2[i];\r\n                    var flag = true;\r\n                    for(j = 0; j < n; ++j) {\r\n                        var r2 = seq2[j];\r\n                        var distance = (r2.width * 0.25 + 0.5)|0;\r\n\r\n                        if(i != j &&\r\n                           r1.x >= r2.x - distance &&\r\n                           r1.y >= r2.y - distance &&\r\n                           r1.x + r1.width <= r2.x + r2.width + distance &&\r\n                           r1.y + r1.height <= r2.y + r2.height + distance &&\r\n                           (r2.neighbors > Math.max(3, r1.neighbors) || r1.neighbors < 3)) {\r\n                            flag = false;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if(flag)\r\n                        result_seq.push(r1);\r\n                }\r\n                return result_seq;\r\n            }\r\n\r\n        };\r\n\r\n    })();\r\n\r\n    global.bbf = bbf;\r\n\r\n})(jsfeat);\r\n/**\n * @author Eugene Zatepyakin / http://inspirit.ru/\n */\n\n(function(lib) {\n    \"use strict\";\n\n    if (typeof module === \"undefined\" || typeof module.exports === \"undefined\") {\n        // in a browser, define its namespaces in global\n        window.jsfeat = lib;\n    } else {\n        // in commonjs, or when AMD wrapping has been applied, define its namespaces as exports\n        module.exports = lib;\n    }\n})(jsfeat);\n"],"sourceRoot":""}